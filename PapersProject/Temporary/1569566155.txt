Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 14:20:27 2012
ModDate:        Tue Jun 19 12:55:16 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      347344 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569566155

Synchrony Ampliﬁcation
Ueli Maurer

Bj¨ rn Tackmann
o

Department of Computer Science
ETH Zurich
8092 Zurich, Switzerland
Email: maurer@inf.ethz.ch

Department of Computer Science
ETH Zurich
8092 Zurich, Switzerland
Email: bjoernt@inf.ethz.ch

A. Previous Work

Abstract—Various protocols in the cryptography and
distributed systems literature assume some notion of time:
One major (but not the only) example are “synchronous”
models which assume that a protocol is executed in a welldeﬁned sequence of rounds with round switches that occur
(almost) simultaneously at the parties. In many of the
considered models, the notion of time is either implicit,
or it is closely interweaved with other mechanics of the
model such that formally proving even simple statements
becomes a tedious task.
In this work, we develop an abstract formal model that
captures exactly how the availability of clocks with “weak”
synchrony guarantees can beneﬁt parties; in particular,
we show how—and at what cost—the “synchrony” of
clocks can be improved. Proofs in this model are simple
and the statements transfer to all models that satisfy the
abstraction.
The main contribution of this paper is not the actual
statements we prove (which mostly verify folklore beliefs), but the formal model that follows the construction
paradigm of abstract cryptography and allows to state these
proofs in a simple yet rigorous manner. Indeed, the paper
is a step towards a treatment of synchronous cryptographic
protocols in this constructive sense.

The arguably most inﬂuential paper on the effects
of time on distributed systems is [Lam78]. In fact, the
physical clock model introduced there is continuous but
otherwise similar to the formalization we present here.
The main beneﬁt of our model is the cleaner and more
rigorous formalism that makes the goals and assumptions
of protocols explicit and is derived from [MR11].
The model presented in [KLP05] extends the interactive Turing machine (ITM) framework widely used
in cryptography by extending each such ITM with an
additional “clock tape.” The clock tapes of the individual
ITMs (which encode the protocol) can be written to by
the “adversary,” which is another ITM that captures potential misbehavior. While this formalism drawn from the
models prevalent in the cryptographic literature makes
the model very expressive, its complexity inhibits simple
proofs (even for trivial statements). Also, the exact
formalization prohibits statements about the termination
of protocols, which is one major reason for protocols to
use time.
The Timed Automata in [LV96], [KLSV03] extend
the state-transition model of automata by continuous
trajectories on the states. While this allows to capture the
inﬂuence of real-time in a detailed and concrete way, it
seems fair to say that it results in a fairly complex model.

I. I NTRODUCTION
Many protocols that are used in computer networks
make use of time. This may either be explicit, as for
“time-out” messages that are issued if some expected
message is delayed for too long, or implicit, as for
synchronous protocols that are executed in a sequence of
“rounds,” where the local round switches at the parties
involved in the protocol execution occur (almost) simultaneously. The usual justiﬁcation for these models is that
the “rounds” can be emulated using weakly synchronous
clocks and communication channels with a known upper
bound on the delay until a message is delivered.
One natural goal of parties that have access to weakly
synchronous clocks is to improve the synchrony, potentially at the cost of reducing the clock speed. In the spirit
of [MR11], we consider clocks as resources available
to the parties and a protocol as a construction of one
resource from another one. In particular, we ask which
constructions can be achieved.

B. Contributions
The main contribution of this work is the rigorous
and formal yet simple model. The deﬁnitions are based
on ideas developed in [MR11]; clocks are considered as
resources that are available to the parties, and a protocol
is a construction between such resources.
The model developed here, however, is restricted in
that it does not allow for resources being available
in addition to the clocks. An extended model that is
capable of also capturing reactive resources such as
communication channels (while preserving the simplicity
of the current model) is currently in preparation.

1

Deﬁnition 2 (Construction). A construction1 for a resource set Ω and a constructor set Γ is a subset of
Ω × Γ × Ω. A construction is often denoted as an arrow
“−→” as follows: If (R, α, S) is in the construction, then
α
we write R −→ S and say that S can be constructed
from R (or that S can be reduced to R) by α.

II. P RELIMINARIES
A. Notation
For a number n ∈ N, let [n] := {1, . . . , n}. If, for two
functions f and g, we write f (·) ≥ g(·), we mean that
the condition holds on the complete domain.

In this paper, the resource set Ω is the set of all clocks,
and a constructor in the set Γ corresponds to a scheme
or protocol executed by the parties.

B. Systems: Resources and Converters
Both clocks and protocols are formalized as systems.
At the highest level of abstraction, a system is an abstract
object with interfaces through which it interacts with the
environment and with other systems [MR11]; interfaces
are labeled with elements of a label set I. Two systems
are composed into a single system by connecting one
interface of each system.
We consider the setting in which n parties have access
to (weakly) synchronous clocks. We distinguish two
types of systems: The ﬁrst type are n-party clocks that
are resources according to [MR11] and provide one
interface for each party; resources are generally denoted
by upper case letters. The second type are converters
that are denoted by small Greek letters and model local
actions of a party. A converter provides two interfaces:
one inner interface that connects to a clock and one outer
interface provided to the party. If the party corresponding
to interface i ∈ I accesses the resource R via the
converter τ , this is denoted as τ i R.
For such a systems algebra, we usually require the
following type of generalized associativity, which is
explained in more detail in [MR11].

D. Speciﬁcations
A further notion derived from [MR11] is the concept
of a speciﬁcation, which technically is a set of resources
and formalizes the guarantee that the parties have access
to any one resource from the set. Construction notions
for resources extend generically to speciﬁcations: For
two speciﬁcations R, S ⊆ Ω and a constructor α ∈ Γ,
α

R −→ S

:⇔

α

∀R ∈ R ∃S ∈ S : R −→ S.

III. T IME AND C LOCKS
For protocols that make use of clocks, the absolute
value of the time is not of interest.2 Indeed, for a
single isolated party, a local clock is merely a source
of “activations” (such as a processor’s clock); a party
can of course assign to each activation some label or
identiﬁer.3 In distributed systems, the main use of time
is to derive information about the order of events at
different locations [Lam78], and a guarantee on the
synchrony of clocks states that the activations issued to
different parties are ordered in a speciﬁc manner.
These two purposes of using clocks—activations and
some global ordering—are captured by specifying the
availability of (weakly) synchronous clocks as an nparty resource. Restricted to the local view of each
party, a clock is merely an (a priori inﬁnite) sequence
of activations, that is, unary outputs of the resource. The
“global” guarantee of the clocks for multiple parties is
described exactly by how the activations to the individual
parties are interleaved.

Deﬁnition 1. A set of systems with compositions is
composition-order independent if for any system composed of several systems, the order in which the systems
are composed does not matter.
A protocol for resources with I interfaces can then
simply be deﬁned as a tuple of |I| converters, one
converter for each party that has access to the resource.

Deﬁnition 3 (Clock). An n-party clock is a sequence
C = (Ck )k≥1 of sets with Ck ⊆ [n].

C. Constructive Cryptography
This paper is based on the construction paradigm
introduced in [MR11], [Mau11]: The goal of a protocol
or scheme is phrased as constructing a resource with
the desired behavior from one or more given ones. As
the given resources and the constructed ones are objects
of the same type, such a deﬁnition is predestined for
protocol composition: The resources constructed by one
protocol are used by another one, which induces a serial
composition operation for protocols.

The interpretation of a clock C is that it proceeds
in steps, and in the k-th step it issues an activation at
the interfaces of all parties i with i ∈ Ck . The setting
1 This concept was called reduction in [MR11]; however, we prefer
the more descriptive term construction from [Mau11].
2 Some run-time environments use the clock register as a source of
entropy, though.
3 A party can in particular count the activations and call some number
of such activations a second, a minute, and so on.

2

2

Deﬁnition 8 (Drift). For k ∈ N, the drift of a clock C
up to index k is deﬁned as

where |Ck | > 1 corresponds to the situation where two
parties obtain activations in such a way that no “realtime” difference can be measured between these events;
they are (essentially) simultaneous. Intuitively, the global
index corresponds to the most ﬁne-grained resolution
that can be observed with respect to time.
The knowledge about the ordering of events is often
not complete; the parties might only know that their
clocks advance at similar speed. Such a weaker guarantee
is speciﬁed by a clock speciﬁcation, a set of clocks.

drf C (k) := max

i,j∈[n]

loci (k)
C
locj (k)
C

.

We set drf C (k) := 1 for all k with mini∈[n] loci (k) = 0.
C
For a function ρ : N → R, a clock C is called a ρbounded drift clock if drf C (·) ≤ ρ(·). The speciﬁcation
drf
drf
Cρ is deﬁned as Cρ := {C| drf C (·) ≤ ρ(·)}.

Deﬁnition 4 (Clock speciﬁcation). An n-party clock
speciﬁcation is a set C of n-party clocks.

Note that our deﬁnition of drift differs from that used,
for instance, in [KLP05] in that they require that the
difference in speed is bounded for every time interval.
Such a notion of “smoothness” is stricter, but our result
in Theorem 8 extends to this case.

The local time of a party i ∈ [n] connected to a clock
C = (Ck )k≥1 with respect to the global index k can,
without loss of generality, be deﬁned to be the number
of activations that the party obtained up to k.

IV. C ONVERTERS , P ROTOCOLS , AND
C ONSTRUCTIONS

Deﬁnition 5 (Local time). The local time at the k-th
index at party i ∈ [n] is deﬁned as

A. Converters

loci (k) := |{k ≤ k | i ∈ Ck }| .
C

If the only resources available to the parties are clocks
and they cannot make use of other resources such as
communication channels, then a converter that a party
uses to “transform” clocks can only ignore certain activations and forward others. Consequently, the converter
can be speciﬁed as a sequence of integers that specify
the activations that are forwarded.

The speed of a clock is measured by its “rate” with
respect to the global index k: the number of activations
issued up to k. The rate can of course be deﬁned for
each individual party or for the complete clock (as the
rate of the “slowest” party). Since we will be interested
in comparing how the rates of clocks evolve over time,
we consider the rate of a clock as a function of the index.

Deﬁnition 9 (Converter). A (clock) converter τ is a
strictly increasing (ﬁnite or inﬁnite) sequence (tl )l≥1 of
integers tl ∈ N.

Deﬁnition 6 (Rate). For a clock C and an index
k ∈ N, the rate of C at party i up to index k is
loci (k)
C
the value rati (k) :=
. For brevity, we deﬁne
C
k
i
ratC (k) := mini∈[n] ratC (k) and the asymptotic rate
ratC := limk→∞ ratC (k) (if deﬁned).

We describe the clock that is produced by applying a
converter at some interface of the original clock.
Deﬁnition 10. Let C = (Ck )k≥1 be a clock, i be an
interface of the clock, and τ = (tl )l≥1 be a converter.
The converted clock C := τ i C obtained by attaching
the converter τ at the interface of party i is described by
the sequence C = (Ck )k≥1 with

An important measure of the synchrony of a clock is
the offset, that is, the maximum difference between the
local times at two different parties.
Deﬁnition 7 (Offset). For a clock C, the offset at index
k ∈ N is deﬁned as
oﬀ C (k) := max loci (k) − locj (k) .
C
C

Ck =

i,j∈[n]

For a function δ : N → N, a clock C is called a δbounded offset clock if oﬀ C (·) ≤ δ(·). The speciﬁcation
off
off
Cδ is deﬁned as Cδ := {C| oﬀ C (·) ≤ δ(·)}.

Ck ,
Ck \ {i}

if ∃l ∈ N : loci (k) = tl ,
C
otherwise.

For a clock speciﬁcation C, we deﬁne
τ i C := τ i C : C ∈ C .

Bounded-offset clocks guarantee that the clocks of all
parties advance at (essentially) the same speed. This is
a strong assumption, which is not justiﬁable for many
clocks used in practice where one might only want to
make the assumption that the difference in speed is
bounded; that is, the clocks have a bounded drift.

Note that the algebra of clocks and converters fulﬁlls
the notion of composition order independence from Definition 1. This is obvious because applying a converter
at some interface i “transforms” the clock in a way
irrespective of what happens at the other interfaces.
3

3

Proof: By the deﬁnition of lk ,

B. Protocols
A protocol is a tuple of converters; one converter for
each party.

loci (k)
loci C (k)
loci (k)
C
τ
C
≤
≤
,
tlk +1 − 1
lk
tl k

Deﬁnition 11. A (clock transformation) protocol is a
tuple τ = (τi )i∈[n] of converters τi = (ti )l≥1 . Applying
l
1
n
of a protocol to a clock is deﬁned as τ C = τ1 . . . τn C.
This notion extends naturally to clock speciﬁcations.

so ratτ C (k) ≤ mini∈[n]
ity follows analogously.

lk
tlk

·

loci (k)
C
.
k

The other inequal-

Corollary 3. Let C be a clock and τ be a symmetric
protocol with constant efﬁciency, that is, eﬀ τ (·) = η ∈
(0, 1]. Then, ratτ C = η · ratC .

By deﬁnition, a protocol can only decrease the rate of
a clock (converters cannot generate activations). In practical applications, one would be interested in protocols
with a minimal such slackness.

C. Constructions

Deﬁnition 12 (Efﬁciency). Let τ be a protocol, and l ∈
N. The efﬁciency of τ at index l is deﬁned as eﬀ τ (l) :=
l/ maxi∈[n] ti . For ﬁnite protocols, the efﬁciency after
l
the last deﬁned index is 0.

A (clock transformation) protocol induces a natural
notion of construction:4 Denote by Ω the set of all
clocks, and by Γ the set of all (clock transformation)
protocols. Then we obtain, for C1 , C2 ∈ Ω and τ ∈ Γ,
τ

C1 −→ C2

Symmetric protocols in which all parties use the
same converter are an important class of protocols:
For constructions where both the given and the desired
speciﬁcations are symmetric with respect to the parties,
the interesting protocols are of this form. For this type
of protocol, we show that the rate of the clocks is
transformed in the expected sense.

:⇔

τ C1 = C2 .

Lemma 1. Let C be a clock and τ be a symmetric
protocol, that is, τ = (τ, . . . , τ ) with τ = (tl )l≥1 . Then,

This deﬁnition extends to clock speciﬁcations as described in Section II: For each C ∈ C1 , the constructed
τ C must be in C2 . For speciﬁcations, however, a further
notion of construction, denoted by −→, is interesting:
For two speciﬁcations C1 and C2 , we can ask whether
there is a protocol with at least efﬁciency η that constructs C2 from C1 . More precisely, for C1 , C2 ⊆ Ω and
η : N → [0, 1],

ratτ C (k) = eﬀ τ (tv ) · ratC (k),

C1 −→ C2 :⇔ ∃τ ∈ Γ : eﬀ τ (·) ≥ η(·) ∧ C1 −→ C2 .

for all k with ∃v ∈ N : tv = mini∈[n] loci (k), that is,
C
indices at which the “slowest party” is activated.

V. S YNCHRONY A MPLIFICATION

η

τ

In order to use synchronous protocols, one needs
synchronized clocks that determine the round switches.
This type of synchrony is described by the speciﬁcation
off
C sync = C1 , and this section describes from which type
of assumption such synchrony can be achieved.

Proof: By Deﬁnitions 6 and 10, ratτ C (k) =
loci C (k)
mini∈[n] τk , and loci C (k) = min{l | tl ≥
τ
loci (k)}. By the condition on k, ratC (k) = tv /k and
C
eﬀ τ (v) = v/tv for v as above. By monotonicity,

Lemma 4. Let δ1 , δ2 ∈ N with δ1 ≥ δ2 .5 From a δ1 offset bounded clock C1 , we can construct a δ2 -offset
bounded clock C2 using a protocol τ with

min min{l | tl ≥ loci (k)}
C

i∈[n]

= min{l | tl ≥ min loci (k)} = v,
C
i∈[n]

eﬀ τ (l) =

which concludes the proof.
For the indices which do not correspond to activations
of τ C, we can still prove bounds for the rate.

l
.
(l − 1) · δ1 /δ2 + 1

Proof: We consider the symmetric protocol τδ1 /δ2
in which each converter τi is deﬁned by the (same)
sequence (tl )l≥1 with tl = (l − 1) · δ1 /δ2 + 1. We

Lemma 2. For C and τ as in Lemma 1,
tl k
· eﬀ τ (lk ) · ratC (k)
tlk +1 − 1
≤ ratτ C (k) ≤ eﬀ τ (lk ) · ratC (k),

4 For a cryptographic treatment in the spirit of [MR11], we also have
to specify the behavior of clocks with respect to dishonest parties. Yet,
if we specify that dishonest parties are activated by a clock for every
index, then with simulators σ = (1, 2, . . . ) the construction −→ is
the same as that considered in [MR11].
5 Of course, δ ∈ N can be seen as the constant function n → δ.

with lk := min{v | tv ≥ loci (k)} = loci C (k).
C
τ
4

4

Assume that the protocol τ with τ1 = (t1 )l≥1 and
l
τ2 = (t2 )l≥1 is such that τ C is synchronous. Hence, for
l
each value t2 it must hold that
v

set C2 = τδ1 /δ2 C1 . Note that this in particular means
that
(loci 2 (k) − 1) · δ1 /δ2 + 1 ≤ loci 1 (k)
C
C
≤

loci 2 (k)
C

(1)

min k loc1 (k) = t1
C
v+1

· δ1 /δ2 ,
(2)

that is, party 1 switches to v + 1 before party 2 switches
to v + 2. Hence, t2 ≥ t1 ρ for the clock C.
v+2
v+1
Of course, using the conversely deﬁned clock C ∈
drf
Cρ , we can conclude that t1 ≥ t2 ρ . Plugging the
v
v+1
two equations together, we obtain that t2 ≥ t2 ρ ρ .
v
v+2
From this, the statement for the ti can be easily comv
puted.
By the lemma, for a clock C with constant rate, τ C
has asymptotical rate log k/k. The following theorem is
a consequence of Lemma 7.

where both (1) and (2) use Deﬁnition 10 and (1) also
uses δ1 ≥ δ2 .
Assume that there exists a k ∈ N with oﬀ C2 (k) > δ2 .
This means that there exist i = j with
loci 2 (k) − locj 2 (k) = δ2 + 1.
C
C

(3)

Together, this means that
loci 1 (k) − locj 1 (k) − 1
C
C

η

≥ (loci 2 (k) − 1) · δ1 /δ2 − locj 2 (k) · δ1 /δ2
C
C
= δ2 · δ1 /δ2 = δ1 ,

drf
Theorem 8. Cρ −→ C sync only if η(·) vanishes exponentially.

(4)
(5)

Together, Theorems 6 and 8 imply that it is also
impossible to efﬁciently construct offset-bounded clocks
for any constant from an arbitrary bounded-drift clock.

where (4) follows from (1) and (2), and (5) follows
from (3): loci 2 (k) − 1 and locj 2 (k) have the same
C
C
remainder modulo δ2 . This equation contradicts the
assumption about C1 , and the efﬁciency statement is
obvious.
Indeed, we can prove that the rate of the clocks is
transformed as expected, which follows from Lemma 2.

VI. C ONCLUSION AND F UTURE W ORK
We have developed a formal model that allows to
make statements about the synchrony of clocks in a
simple yet rigorous manner, which we demonstrated by
proving one “positive” and one “negative” statement
about amplifying synchrony.
The current model does not allow for reactive resources such as communication channels; a full-ﬂedged
model that also covers this type of resource and can
be seen as an extension of the model presented here is
currently being developed. Yet, the statements proven
here will be maintained.

Lemma 5. For δ1 , δ2 , C1 , and τ as in Lemma 4,
ratτ C1 (·) ≥

δ2
· ratC1 (·).
δ1

Lemmas 4 and 5 imply that we can obtain a roundsynchronous clock from any bounded-offset clock, the
rate degrades by a factor depending on the given clock.
Theorem 6. For δ1 , δ2 ∈ N with δ1 ≥ δ2 ,
off δ2 /δ1
Cδ1 −→

≤ min k loc2 (k) = t2
C
v+2 ,

R EFERENCES

off
Cδ2 .

[KLP05]

Y. T. Kalai, Y. Lindell, and M. Prabhakaran. Concurrent
composition of secure protocols in the timing model. In
STOC, pages 644–653. ACM, 2005.
[KLSV03] D. K. Kaynar, N. Lynch, R. Segala, and F. Vaandrager.
Timed I/O automata: A mathematical framework for modeling and analyzing real-time systems. In 24th IEEE RTSS,
pages 166–177. IEEE, December 2003.
[Lam78] L. Lamport. Time, clocks, and the ordering of events in
distributed systems. C. ACM, 21(7):558–565, July 1978.
[LV96]
N. Lynch and F. Vaandrager. Forward and backward
simulations—Part II: Timing-based systems. Information
and Computation, 128(1):1–25, July 1996.
[Mau11] U. Maurer. Constructive cryptography: A new paradigm
for security deﬁnitions and proofs. In TOSCA, LNCS.
Springer-Verlag, 2011.
[MR11]
U. Maurer and R. Renner. Abstract cryptography. In ICS.
Tsinghua University Press, 2011.

δ −1

off 1
In particular, Cδ1 −→ C sync .

We also prove a converse statement: If we only have
a guarantee for the drift, the offset of the clock can grow
exponentially (as a function of k). The following lemma
states that one can obtain a round-synchronous clock
only at the cost of a rapidly decreasing rate.
Lemma 7. Let ρ = p ∈ Q, ρ > 1, and let τ =
q
τ
drf
((t1 )l , . . . , tn )l ) be a protocol that achieves Cρ −→
l
l
C sync . Then, for ti ≥ 2 · q 2 /p, ti ≥ ρ/2 · ti .
v
v
v+2
drf
Proof: The speciﬁcation Cρ contains the clock C
with 2 ∈ Ck for all k ∈ N and 1 ∈ Ck for k = j · p/q
with some j ∈ N. This clock has drf C (k) ≤ ρ.

5

5

