Creator:         TeX output 2012.05.14:1438
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Mon May 14 14:39:02 2012
ModDate:        Tue Jun 19 12:54:11 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      310771 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569563763

On q -ary Antipodal Matchings and Applications
Erik Ordentlich

Ron M. Roth

Gadiel Seroussi

Hewlett–Packard Laboratories
Palo Alto, CA 94304
erik.ordentlich@hp.com

Computer Science Department
Technion, Haifa, Israel
ronny@cs.technion.ac.il

Hewlett–Packard Laboratories
Palo Alto, CA 94304
gadiel.seroussi@hp.com

that we are aware of, and thus, in the general case, it is not
immediately evident that a perfect matching even exists.
It turns out that perfect matchings do in fact exist for all q
and our ﬁrst set of results pertains to the constructions of two
efﬁciently computable q-ary antipodal matchings, by which
we mean that the bijection φ and its inverse are efﬁciently
computable. For reasons related to the speciﬁcs of the constructions, we shall refer to the two constructions, respectively,
as the unary and complementary (q-ary antipodal) matchings.
The complementary matching will satisfy, in addition, the
following complementary property: if an edge (x, y) belongs
to the matching, then yi ∈ {xi , xi } for each i ∈ [ℓ]. Though we
lack the space to explain this here, complementary antipodal
matchings exist in more general bipartite graphs than Gℓ,q
and these graphs may have some potential advantages in the
context of our main application for these matchings, which,
as explained further below, is the construction of codes that
might be useful for mitigating parasitic currents in a next
generation memory technology. On the negative side, although
we will show that matchings satisfying the complementary
property exist for all q, we presently have explicit descriptions
of such matchings only for limited q (still, when q is ﬁxed, the
matching can be computed in time complexity that is linear
in ℓ). Unary matchings, on the other hand, are speciﬁc to
the graph Gℓ,q , but can be explicitly speciﬁed for all q, and
can be computed requiring only O(ℓ) arithmetic operations on
integers with absolute value at most ℓ(q−1).
Consider the set An×n of all n × n arrays A = (Ai,j )i,j∈[n]
over Q such that the cost of each row and column is nonpositive, namely, for every i, j ∈ [n],
(
)
(
)
c Ai,[n] ≤ 0 and c A[n],j ≤ 0 ,
(1)

Abstract—We deﬁne a q-ary antipodal matching to be a perfect
matching in the bipartite graph with vertices corresponding to
words of length ℓ over the integer alphabet Q = {0, 1, . . . , q−1},
wherein the left and right vertices are those with respective
component sums greater and smaller than ℓ(q−1)/2, and wherein
two vertices are connected by an edge if one of the corresponding
words dominates the other. We present two different constructions of efﬁciently computable q-ary antipodal matchings. We
then show how such matchings can be used for encoding arbitrary
data into n × n arrays over the alphabet Q all of whose row
and column sums are at most n(q−1)/2. Such encoders might
be useful for mitigating parasitic currents in a next generation
memory technology based on crossbar arrays of resistive devices.

I. I NTRODUCTION
For any positive real r, let [r] denote the integer set {i ∈
Z : 0 ≤ i < r}. Hereafter, we ﬁx Q to be the integer alphabet
[q], for some integer q ≥ 2. For a symbol x ∈ Q, we deﬁne
its cost by c(x) = 2x − (q−1) (which may be negative) and
its complement (over Q) by x = q−1−x; thus, c(x) = −c(x).
We extend these deﬁnitions to words x = (xi)i∈[ℓ] over Q by
)
(∑
∑
deﬁning c(x) = i∈[ℓ] c(xi ) = 2
i∈[ℓ] xi − ℓ(q−1) and
x = (xi )i∈[ℓ] .
Consider the bipartite graph (cf. [3]) Gℓ,q = (L : R, E)
with left and right vertex sets L and R and edges E given by
{
}
L = Lℓ,q = {x ∈ Qℓ : c(x) > 0}
R = Rℓ,q = x ∈ Qℓ : c(x) < 0
E = Eℓ,q = {(x, y) ∈ L × R : x ≥ y} ,
where the last inequality holds componentwise. We deﬁne a
q-ary antipodal matching to be a perfect matching in Gℓ,q ,
wherein a perfect matching is the usual notion from graph
theory, namely, an edge subset {(x, φ(x)) : x ∈ L}, where
φ : L → R is a bijection.
Antipodal matchings for the special case of q = 2 were
studied recently in [10]. As noted therein, for this case,
the constituent bipartite graphs obtained by decomposing the
graph Gℓ,q according to the cost of left and right vertices, are
regular graphs, and hence it follows from Hall’s theorem [3,
pp. 217–218] that perfect matchings exist. An explicit construction of a perfect matching for the case of q = 2 was also
presented. In the case of q > 2, there does not seem to be
an analogous regular decomposition of Gℓ,q , or at least one

where the notation Ai,[ℓ] (respectively, A[ℓ],j ) stands for the
row (respectively, column) word formed by the ﬁrst ℓ entries
of row i (respectively, column j) of an array A. Our principal
application of q-ary antipodal matchings is to the problem of
efﬁciently encoding and decoding arbitrary data to and from
(a subset of) An×n . Following the usual formal deﬁnitions,
a code for this problem (referred to as a row–column cost
limiting code) consists of a subset C ⊆ An×n , an encoder
(bijection) from [|C|] to C, and a respective decoder (inverse
mapping). Of interest are codes for which the encoder and
decoder can be computed with low complexity and C is as
2
large as possible. Obviously, |C| ≤ |An×n | < q n , and we
2
shall refer to the gap n log2 q − log2 |C| as the redundancy

The work of R. M. Roth was carried out in part while visiting Hewlett–
Packard Laboratories, Palo Alto, CA. This work was supported in part
by Grant No. 2008058 from the United-States–Israel Binational Science
Foundation.

1

positions. Note that Pa is nonempty whenever c(a) > 0 and
that ai = 1 for every i ∈ Pa . For a ∈ B m with c(a) > 0, the
mapping a → φB (a) is then deﬁned by
{
ai if i ∈ Pa
/
, i ∈ [m] .
(2)
(φB (a))i =
ai if i ∈ Pa
In order to compute this mapping, the set Pa must be determined. There is an algorithm for ﬁnding the minimal positions
that runs in time that is linear in ℓ and is described in Figure 4
of [10] (see also [5] and [6]). It follows from the results
of [10] that φB is a bijection from {a ∈ B m : c(a) > 0} to
{a ∈ B m : c(a) < 0} and, so, it induces a perfect matching
in the graph Gm,2 .

of the code.
Our second set of results addresses this coding problem, by
generalizing the row–column cost limiting codes of [10] to
the q-ary case, for q > 2. For the q-ary iterative ﬂipping code
(generalizing the iterative ﬂipping code from [10]), the upper
bound on the number of row–column ﬂips during encoding
increases by a factor of q−1. This provides even stronger
motivation for the q-ary antipodal matching codes based on
the above q-ary antipodal matchings, which avoid iterations.
Both the q-ary iterative ﬂipping and q-ary antipodal matching
codes constructed continue to have a redundancy of roughly 2n
bits, as in the binary case. Thus, one new aspect of the q > 2
setting, as will be seen, is that the q-ary array positions that
carry the redundancy also carry non-redundant information.
The motivation for encoding data into the constrained arrays
An×n is, as in [10], to reduce parasitic current in a next
generation memory technology based on crossbar arrays of
resistive memory devices [9], [11]. The codes presented here
extend this paradigm to devices which can be programmed into
q > 2 resistance states. The rough idea is as follows. In the
q-ary setting, the states of the devices in an n×n crossbar can
be represented by an n × n array over Q. For a certain writing
biasing scheme and overwriting protocol, the parasitic current
magnitude passing through any device can be expressed as
a non-decreasing function ϱ : Q → R+ of the device state,
and the maximum parasitic current magnitude passing through
any wire of the crossbar can be bounded by the maximum
sum of ϱ(Ai,j ) over all rows and columns of the array. The
parasitic current is thus data-dependent and, by encoding data
using the above codes to limit row and column costs of the
resulting arrays, the worst case current can be reduced. In the
case that ϱ is an afﬁne function of the state, the constraint (1)
is well matched to ϱ. As alluded to, in the general case, codes
based on complementary matchings adapted to a different ϱdependent bipartite graph may have better current limiting
properties than the above. For conciseness, here we will target
only the above simpler scenario with afﬁne ϱ.

B. Unary matching
The bijection underlying the unary matching will be denoted
by φU . It is based on the following unary coding of Q into
words in Bq−1 :
u(x) = 0 0 · · · 0 1 1 · · · 1 ,

x∈Q.

x

x

Namely, a symbol x ∈ Q is mapped to a binary word of
length q−1 with x = q−1−x initial 0’s followed by x
trailing 1’s. It is obvious that u is invertible. The mapping u
can be extended to words x = (xi )i∈[ℓ] in Qℓ via u(x) =
u(x0 ) u(x1 ) . . . u(xℓ−1 ) (the concatenation of the symbolwise mappings). This word extension, u : Qℓ → u(Qℓ ), is
also readily seen to be invertible. The following lemma can
be easily shown to follow from the properties of u and φB .
Lemma 2.1: For every x ∈ Lℓ,q (the left vertex set in Gℓ,q ),
φB (u(x)) ∈ u(Rℓ,q ) ,
where φB is the bijection (2) deﬁned for binary words of length
m = ℓ(q−1).
Lemma 2.1, in turn, allows us to deﬁne the following
mapping φU : Lℓ,q → Rℓ,q :
φU (x) = u−1 (φB (u(x))) ,
∗

x ∈ Lℓ,q .

(3)

In the next proposition, x stands for the word obtained by
reversing the order of entries in the word complement x of x.
Proposition 2.2: The mapping φU : Lℓ,q → Rℓ,q is a bijection, and, so, {(x, φU (x)) : x ∈ Lℓ,q } is a perfect matching
in Gℓ,q . Moreover, φ−1 (y) = (φU (y ∗ ))∗ for every y ∈ Rℓ,q .
U
We point out that this construction can also be inferred
from known explicit minimal partitions of Qℓ into symmetric
chains [2], [4], [7].
Computing φU via φB as in (3) has complexity proportional
to qℓ operations if the linear time algorithm from [10] is used
for computing φB . By exploiting constraints on the binary
words in the range of u and properties of φB , it is possible
to carry out the computation more efﬁciently, with only a
constant (independent of q) times ℓ operations on integers
with absolute value at most ℓ(q−1). The algorithm is given
in Figure 1. Roughly speaking, the ﬁrst loop “identiﬁes” an
element of Pu(x) and the next loop identiﬁes the remaining
elements and implements the bijection directly in the Qdomain. The following proposition can be proved.
Proposition 2.3: The algorithm of Figure 1 computes φU .

II. q- ARY ANTIPODAL MATCHINGS
Both of our q-ary antipodal matching constructions are
based on reductions to the binary case and, at least conceptually, invoke the binary antipodal matching of [10] as a subroutine. The constructions differ in the nature of the reduction.
A. The binary case
Let B denote the binary (integer) alphabet {0, 1}. We
include here a brief review of the binary antipodal matching
from [10], whose bijection we shall denote by φB . In this
subsection, the deﬁnitions of cost and complementation correspond to q = 2, i.e., c(0) = −1, c(1) = 1, 0 = 1, and
1 = 0.
Given a word a = (ai )i∈[m] in Bm with c(a) > 0,
the image φB (a) is deﬁned as follows. A position i ∈ [m]
in a is called minimal (with respect to a) if and only if
∑i+h
j=i c(aj ) > 0 for every natural h, where indices are
wrapped around modulo m. Let Pa denote the set of minimal

2

Input: x = (xi )i∈[ℓ] ∈ Lℓ,q
Output: y = φU (x)
Variables: i, t ∈ Z/ℓZ (arithmetic modulo ℓ); d, S, W ∈ Z

by verifying the condition for the existence of a perfect
matching in Hall’s theorem, which is that all subsets of left
vertices have at least as many right neighbors. Unlike the case
where all entries of w are equal, generally, we are not able to
partition the graph G(w) into a collection of regular induced
subgraphs and, thus, checking Hall’s condition is somewhat
more involved. Key to our proof is the following classical combinatorial lemma concerning set differences. Given two sets α
and β, denote by α \ β their set difference {s ∈ α : s ̸∈ β}.
For a ﬁnite collection of sets X, let ∆X = {α\β : α, β ∈ X}
denote the collection of distinct differences of members of X.
Lemma 2.5 (Marica–Sch¨ nheim inequality [8]):
o

t = 0; d = 0; S = 0;
for i = 1 to ℓ − 1 do
S += (c(xi−1 ) + c(xi ))/2;
if S ≤ d then
d = S; t = i;
end if
end for
y = x; W = c(x);
while W > 0 do
d = 0;
while d ≤ 0 do
d += (c(xt−1 ) + c(xt ))/2; t −−;
end while
yt = xt − d; W −= d;
end while
return y.
Fig. 1.

|∆X| ≥ |X| .
Proof of Proposition 2.4: We verify that G(w) satisﬁes
Hall’s condition. Let X ⊆ L(w) and let N (X) ⊆ R(w)
denote the set of neighbors of X. Consider the set
{
}
Y = a ∧ b : a, b ∈ X ,
(4)

Efﬁcient computation of φU (x).

where b denotes the (Boolean) word complement of b over
B and “∧” denotes componentwise conjunction (“AND”). By
regarding the words of L(w) as characteristic vectors of
subsets of [m], it follows from Lemma 2.5 that |Y | ≥ |X|.
We next argue that Y ⊆ N (X). To see this, consider a word
v in Y . By (4), we can write v = a ∧ b for some a, b ∈ X,
implying that v ≤ a and v ≥ b. From the latter inequality, we
have ⟨w, v⟩ ≥ ⟨w, b⟩ > σ/2 so that ⟨w, v⟩ < σ/2, and this,
together with v ≤ a, implies that v ∈ N (X) (since a ∈ X)
or that Y ⊆ N (X). Putting everything together, we have
|N (X)| ≥ |Y | ≥ |X|, thus verifying Hall’s condition and
completing the proof.
Using essentially the above technique (but with a novel
variation of Lemma 2.5) we can also prove the following more
general matching result, which may be of independent interest.
Proposition 2.6: Let G = (L : R, E) be a bipartite graph
where L and R form any partition of Bm with the property
that a ∈ L if and only if a ∈ R, and where the edge set is

C. Complementary matching: existence
For a word z = (zi )i∈[ℓ] in [q/2]ℓ , denote by Mq (z) the
subset {z0 , z 0 } × {z1 , z 1 } × . . . × {zℓ−1 , z ℓ−1 } (of size 2ℓ ) of
Qℓ , and deﬁne Lq (z) = Lℓ,q ∩ Mq (z) and Rq (z) = Rℓ,q ∩
Mq (z). Clearly, for z ranging over [q/2]ℓ , the sets Lq (z)
(respectively, Rq (z)) form a partition of Lℓ,q (respectively,
Rℓ,q ). For any z as above, let Gq (z) be the bipartite subgraph
of Gℓ,q that is induced by the vertices in Lq (z) ∪ Rq (z). An
example of a graph Gq (z) is shown in Figure 2.
By the complementary property
of complementary matchings in Gℓ,q
− ++
−−−
( 0 3 2) s
¨s( 0 0 1 )
(deﬁned in Section I), to show their
¨s +−−
+− + d  
t
s
( 3 0 2) ¨  ( 3 0 1 )
¨
existence, it sufﬁces to show that a
t
++− dd
 
d
   −+−
¨¨
( 3 3 1 ) s t s( 0 3 1 )
perfect matching exists in Gq (z) for
¨ −−+
d
+++
ℓ
¨¨t

s
( 3 3 2)   ds( 0 0 2)
all q, ℓ, and all z ∈ [q/2] . This will
follow from the next slightly more
Fig. 2. Graph G4 (0 0 1).
general matching result, which we
prove below.
Proposition 2.4: Given a vector w ∈ Rm with nonnegative
entries, let σ be the sum of entries of w and let the bipartite
graph G = G(w) = (L : R, E) be deﬁned by
L = L(w) = {a ∈ B : ⟨a, w⟩ > σ/2}
R = R(w) = {a ∈ B m : ⟨a, w⟩ < σ/2}
E = E(w) = {(a, b) ∈ L × R : a ≥ b}

E = {(a, b) ∈ L × R : a ≤ b or b ≤ a} .
Then G exhibits a perfect matching.
D. Complementary matching: construction

m

The existence result derived from Proposition 2.4 does
not provide, in general, an efﬁcient way for constructing the
claimed perfect matching for Gq (z) for arbitrary values of
q and ℓ. In this subsection, we apply Proposition 2.4 in a
slightly different way, resulting in an explicit construction of
complementary matchings for arbitrary ℓ and limited values of
q. The case of q = 2 is simply the binary antipodal matching
of Subsection II-A, since it inherently has the complementary
property. For q > 2, the idea of the construction is as follows.
Assume for now that q is even.1 Deﬁne the mapping
p : Q → B by p(x) = 0 if x ∈ [q/2] and p(x) = 1
otherwise and, for z ∈ [q/2], let pz be the restriction of p

,

where ⟨·, ·⟩ denotes inner product. Then G exhibits a perfect
matching.
The existence of the desired perfect matching in Gq (z) then
follows since this graph is isomorphic to the graph G(w) of
(
)
Proposition 2.4 with w = − c(zi ) i∈[ℓ] . The graph G(w)
corresponding to the example Gq (z) of Figure 2 is also shown
in the ﬁgure, where, for better readability, the binary values
0, 1 are represented, respectively, as −, +.
Observe that for the case where all the entries of w
are equal, Proposition 2.4 follows from the binary antipodal
matching results. In the general case, we prove Proposition 2.4

1 The case of odd q is treated similarly, except in this case the “center”
symbol (q−1)/2 in Q is always left unchanged by the matching/bijection.

3

w0 > w1 + w2
s
100 s
¨ 000
¨
¨  
101 s   s001

 
   s010
110 s 
¨
¨ s
¨
 

011
111 s
Fig. 3.

w0 = w1 + w2
s
101 s
¨
rr 000
¨
r
s  
110 ¨  s001
¨
rr
¨¨
s
111   rs010

w0 < w1 + w2
s000
011 s
d ¨
t  
¨¨
101 s   s100
¨
t
dd
 
¨¨
  
110 s  ds010
t
¨
d
¨¨t
s

111   ds001

Input: Sequence u of kn2 −2n+1 information bits.
1) With each k successive bits interpreted as an element of Q,
arrange ﬁrst k(n−1)2 bits of u into upper-left (n−1)×(n−1)
subarray of A = (Ai,j )i,j∈[n] .
2) With each k−1 successive bits interpreted as an element of
[q/2], arrange remaining (k−1)(2n−1) bits of u into row n−1
and column n−1 of A (2n−1 elements).
3) If A has any rows with positive cost then ﬂip these rows.
4) If A has any columns with positive cost then ﬂip these columns.
5) If ﬂips happened in Step 4 then go to Step 3, otherwise
terminate and output the ﬁnal array.
Output: n × n array A over the alphabet Q.

Graphs G(w) for q = 6, with highlighted perfect matchings h.

to the domain {z, z} (thus p−1 is well deﬁned). Extend pz
z
to map words over {z, z} to binary words by applying the
ℓ
mapping componentwise. Also, for x = (xi )}
i∈[ℓ] ∈ Q and
{
z ∈ [q/2], let Iz = Iz (x) = i : xi ∈ {z, z} . The notation
x|z will indicate the subword of x that is indexed by Iz .
For q > 2, the value of the bijection φC (x) underlying
the complementary matching will be obtained by selectively
applying the bijection fz = p−1 ◦ φB ◦ pz to the various
z
subwords x|z . The decision to apply fz to any subword x|z
will depend on the sign of c(x|z ) and on the result of yet
another bijection h = hw , namely the one underlying a perfect
matching guaranteed in Proposition 2.4 for the bipartite graph
G(w) therein, with w equal to the vector w(x) deﬁned by
(w(x))z = |c(x|z )| ,

Fig. 4.

Encoding algorithm for iterative ﬂipping code, for q = 2k .

are three different graphs that can arise depending on relations
between the entries of w = (w0 w1 w2 ). The relations, the
graphs, and the corresponding matchings for this case are
shown in Figure 3.
Remark 2.1: The above construction essentially solves
the matching problem for Gℓ,q , with small q and arbitrary ℓ,
by reducing it to one for Gℓ′ ,q′ with small ℓ′ (namely, q/2) and
large q ′ (proportional to ℓ). For example, the rightmost graph
of Figure 3, which arises when solving for Gℓ,6 , is the same
as the graph in Figure 2, which arose when solving for G3,4 .
Thus, there appears to be a duality between these regimes.

z ∈ [q/2] .

Speciﬁcally, for this w, ﬁx such a perfect matching of G(w)
and let a(x) = (az )z∈[q/2] be a binary vector with az = 0 if
c(x|z ) ≤ 0 and az = 1 otherwise. It is not hard to see that
x ∈ Lℓ,q if and only if a(x) ∈ L(w) in the graph G(w).
Writing b(x) = hw(x) (a(x)), we now deﬁne the mapping
φC : Lℓ,q → Rℓ,q as follows: for every x ∈ Lℓ,q , the image
y = φC (x) satisﬁes Iz (y) = Iz (x) for every z ∈ [q/2], and
the subword y|z is given by
{
x|z
if (a(x))z = 0 or (b(x))z = 1
y|z =
.
fz (x|z )
otherwise

III. ROW– COLUMN COST LIMITING CODES
In this section, we apply the q-ary antipodal matchings of
Section II to the problem of encoding data into An×n , as
described in Section I. We begin with a generalization of the
iterative ﬂipping code presented in [10] to the case of q >
2. As in [10], complexity considerations of this scheme will
motivate alternatives based on q-ary antipodal matchings. In
this section, for simplicity, we will assume that q = 2k , k > 1.

Proposition 2.7: For the mapping φC so deﬁned, the set
{(x, φC (x)) : x ∈ Lℓ,q } is a complementary matching in Gℓ,q .
The proof is straightforward and relies on the fact that
w(x) and b(x) can be recovered from φC (x) and, hence, so
can a(x) by the bijectivity of hw(x) . To complete the above
construction of φC , we must explicitly specify the bijection
hw for each possible w. In principle, the variety of mappings
is bounded for any ﬁxed q (i.e., is independent of ℓ for ℓ
sufﬁciently large), since there are ﬁnitely many distinct graphs
G(w) that can be induced by different w. For one thing, given
˜
a w, the graphs induced by all w which are permutations of
w are isomorphic (through a permutation of indices of the
words representing the vertices). It thus sufﬁces to consider
w satisfying w0 ≥ w1 ≥ . . . ≥ wq/2−1 . Even so, the
number of the induced graphs grows rather quickly with q. The
vertex sets of such graphs are closely related to the self-dual
equivalence classes of Boolean threshold functions of q/2 or
fewer variables (see, e.g., [1]; here, we distinguish cases when
the threshold can be met with equality). For limited q (the
sequence in [1] is given up to q/2 = 10), these graphs, along
with the corresponding perfect matching/bijection h, can be
computed explicitly. For example, in the case of q = 6, there

A. Iterative ﬂipping code
The q-ary iterative ﬂipping code for q = 2k encodes
kn2 −2n+1 information bits into n×n arrays belonging to
An×n . Encoding proceeds as in Figure 4. The ﬂip operation in the algorithm corresponds to applying the wordcomplementation mapping x → x to the respective rows
and/or columns.
The encoding procedure is guaranteed to terminate since
each row or column ﬂip strictly reduces the sum of all array
entries. Since the procedure terminates only when no row or
column has positive cost, the ﬁnal array must belong to An×n .
Let U = (Ui,j )i,j∈[n] denote the array formed after Steps 1–
2 in Figure 4. The array U consists of the input bits u
interpreted as elements of Q = [q] and [q/2], and we shall
refer to it as the input array. In a manner similar to the binary
case in [10], the input array U can be decoded as follows from
the encoded array A.
Proposition 3.1: If U and A are respectively the input array
and the encoded array from the algorithm of Figure 4, then
{
Ui,j if p(Ai,n−1 ) ⊕ p(An−1,j ) ⊕ p(An−1,n−1 ) = 0
Ui,j =
U i,j otherwise

4

Input: For n even, arbitrary sequence u of kn2 −2n−4 bits.
1) Using ﬁrst k((n−1)2 −1) bits of u, for i, j ∈ [n−1] except
i = j = n−2, set Ai,j to symbols of Q.
2) Using next 2(k−1)(n−2) bits of u, ﬁll A[n−2],n−1 and
An−1,[n−2] with even symbols of Q.
3) Using remaining 4(k−2) bits of u, for i, j ∈ {n−2, n−1},
set Ai,j to symbols of [q/4].
4) Flip all of the ﬁrst n−2 rows of A having positive cost.
5) For all j ∈ [n−2] do:
If c(A[n],j ) % 4 = 0, set An−1,j += 1.
If (the resulting) c(A[n],j ) is positive then do:
a) replace A[n],j with φU (A[n],j );
b) set An−1,j = (An−1,j + 1) % q.
6) For j ∈ {n−2, n−1} do:
a) if c(A[n−2],j ) > 0, replace A[n−2],j with φU (A[n−2],j )
and set An−2,j += q/4;
b) if c(Aj,[n−2] ) > 0, replace Aj,[n−2] with φU (Aj,[n−2] )
and set An−1,j += q/4.
Output: The resulting n × n array A.

Input: n × n array A.
1) For j ∈ {n−2, n−1} do:
a) if An−2,j ≥ q/4, replace A[n−2],j with φ−1 (A[n−2],j )
U
and set An−2,j −= q/4;
b) if An−1,j ≥ q/4, replace Aj,[n−2] with φ−1 (Aj,[n−2] )
U
and set An−1,j −= q/4.
2) For all j ∈ [n−2] do:
If c(A[n],j ) % 4 = 0 then do:
a) set An−1,j = (An−1,j − 1) % q;
b) replace A[n],j with φ−1 (A[n],j ).
U
If An−1,j is odd, set An−1,j −= 1.
3) Flip all of the ﬁrst n−2 rows of A for which Ai,n−1 is odd.
Output: Sequence u′ of kn2 −2n−4 bits obtained by applying
inverse of Encoder Steps 1–3 to corresponding locations in A.
Fig. 6. Decoding algorithm for q-ary antipodal matching code that is based
on unary matching, for q = 2k .

operation “%” stands for remaindering, and the ﬂip operation
is the same as in Subsection III-A.
Proposition 3.2: The output array A of the encoder of
Figure 5 belongs to An×n .
Proposition 3.3: Provided that the input to Figure 6 is
an array A that was generated as output in Figure 5, the
kn2 −2n−4 bits in the output u′ in Figure 6 coincide with
the corresponding input bits u in Figure 5.
Referring to the encoding algorithm of Figure 5, we see
that the unary q-ary antipodal matching bijection φU may be
applied to cost constraint violating (partial) columns and rows
(e.g., Step 5a). By the domination property of the matching,
namely, φU (x) ≤ x, no new (row) constraint violations are
induced by these steps. Whether φU has been applied to a
particular column is encoded, in some cases (e.g., Step 5b), in
the parity of the sums of the corresponding columns, exploiting
the aforementioned parity preserving property of φU .

Fig. 5. Encoding algorithm for q-ary antipodal matching code that is based
on unary matching, for q = 2k .

where p(·) is as deﬁned in Subsection II-D and “⊕” denotes
addition modulo 2 (“exclusive-OR”).
Thus, as in the binary case, the number of operations
required for decoding is linear in the number of array entries.
The true complexity of encoding, on the other hand, is less
clear. The best guarantee we have presently is an upper bound
of O(qn2 ) row–column ﬂips (equivalently, O(qn3 ) symbol
ﬂips) and iterations between rows and columns, which follows
readily from the above-noted fact that each row–column ﬂip
strictly reduces the sum of array entries by at least 1. The
complexity guarantee thus grows linearly with q, which could
be problematic in practical applications.
B. Antipodal matching code

R EFERENCES

In this subsection, we generalize the two-dimensional antipodal matching code from [10] to the case of q > 2, making
use of the q-ary antipodal matching constructions of Section II.
The key idea is that the underlying q-ary antipodal matching
(unary or complementary) permits iteration-free encoding by
not creating new constraint violations, unlike the row–column
ﬂips of the iterative ﬂipping encoder.
The unary and complementary matchings of Section II give
rise to slightly different antipodal matching code constructions,
with the difference being primarily in how redundancy is
incorporated to allow for decodability. We shall provide the
details only for the unary matching. Also, we shall conﬁne
our description to even n and (again) q = 2k , though the
basic idea applies generally.
For these choices, a key property of the unary q-ary antipodal matching is that the bijection φU (x) preserves the parity of
∑
the sum i xi ; equivalently, it preserves the remainder of the
cost c(x) modulo 4. This will be the means for incorporating
the aforementioned redundancy. Figures 5 and 6 depict the
encoding and decoding algorithms for the antipodal matching
code that is based on unary matching. In these ﬁgures, the

[1] The On-Line Encyclopedia of Integer Sequences, published electronically at http://oeis.org, 2010, Sequence A001532.
[2] M. Aigner, Lexicographic matching in Boolean algebras, J. Comb.
Theory B, 14 (1973), 187–194.
[3] N.L. Biggs, Discrete Mathematics, Oxford Univ. Press, Oxford, 1985.
[4] N. de Bruijn, C. Tengbergen, D. Kruyswijk, On the set of divisors of a
number, Nieuw Arch. Wiskunde, 23 (1951), 191–193.
[5] N. Dershowitz, S. Zaks, The Cycle Lemma and some applications,
Europ. J. Comb., 11 (1990), 35–40.
[6] A. Dvoretzky, Th. Motzkin, A problem of arrangements, Duke Math. J.,
14 (1947), 305–313.
[7] C. Greene, D.J. Kleitman, Strong versions of Sperner’s Theorem, J.
Comb. Th. A, 20 (1976), 80–88.
[8] J. Marica, J. Sch¨ nheim, Differences of sets and a problem of Graham,
o
Canad. Math. Bull., 12 (1969), 635–637.
[9] E. Ordentlich, G.M. Ribeiro, R.M. Roth, G. Seroussi, P.O. Vontobel,
Coding for limiting current in memristor crossbar memories, 2nd Annual
Non-Volatile Memories Workshop, UCSD, La Jolla, CA, March 2011.
Presentation slides accessible at: http://nvmw.ucsd.edu/2011/
[10] E. Ordentlich, R.M. Roth, Low complexity two-dimensional weightconstrained codes, Proc. 2011 IEEE Intl. Symp. Inform. Theory, St.
Petersburg, Russia (Aug. 2011), 116–120.
[11] D.B. Strukov, R.S. Williams, Four-dimensional address topology for
circuits with stacked multilayer crossbar arrays, Proc. Nat’l. Acad. Sci.,
106 (2009), 20155–20158.

5

