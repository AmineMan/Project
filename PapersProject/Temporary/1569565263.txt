Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 11:59:07 2012
ModDate:        Tue Jun 19 12:54:19 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      393664 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569565263

On codes for structured bursts
L.A. Lastras-Monta˜ o
n

M. Blaum

IBM T. J. Watson Research Center
e-mail: lastrasl@us.ibm.com

IBM Almaden Research Center
e-mail: mblaum@us.ibm.com

Abstract—We introduce a technique for constructing codes for
bursts of errors that have some known structure; for example
bursts of length at most b and Hamming weight at most t.
This technique is based on modifying existing codes for generic
bursts by replacing a portion of their check matrix with a more
efﬁcient one, in light of the additional constraints on the burst.
We illustrate this procedure by modifying the Fire, Burton and
Gilbert codes to address bursts with maximum Hamming weight,
bursts with solid errors, or bursts with internal “mini-bursts”. We
provide evidence that the redundancy of the codes we construct
can be very good through examples, one of which is optimal
within the class of cyclic codes.

Fig. 1. Three examples of error patterns that could arise from three different
assumptions of what the structure of a burst might be. The burst is indicated
by the dotted box.

I. I NTRODUCTION
In this article we study the problem of the design of
error correcting codes for burst errors that have some known
structure. One possibility is that a burst is known to be very
sparse in errors when it happens - the ﬁrst example in Figure
1. Or alternately, the burst may have small mini-bursts inside
but otherwise have few errors overall (the second example).
Yet another possibility is that the burst is known to be solid,
this is, a streak of uninterrupted errors with a bound on the
maximum length of the streak.
We have detected a number of applications in which these
type of properties might be relevant. For example, receivers
employing Differential Feedback Equalization with 1 tap of
feedback can cause solid burst errors. Codes for such errors
are known, the most notable example being Shiva et. al. [1]
who adapt generic cyclic codes for errors for such purposes
(see also Wyner [2]). Nonetheless such codes are inefﬁcient
when one can place a reasonable upper bound on the length
of the solid burst, which is the case in the cited application.
Bursts with few errors, even if there are “mini-bursts” inside
of the bursts, can arise from multi-state channel models where
there is an underlying physical mechanism that increases the
propensity to have errors. In addition, in [3] Etzion and
Yaakobi employ codes for bursts with few errors that can also
be used as a construction block for codes for multidimensional
bursts with similar characteristics.
The theory of burst error correction is arguably one of
the oldest and still hardest problems in coding theory. Notable successes with practical implications include the early
work by Fire [4] for a single binary bursts and of course
the omnipresent Reed-Solomon codes, that provide practical
solutions for the problem of correcting (potentially multiple)
binary bursts by thinking of a binary burst as contained in a
sequence of multibit symbols from a Galois Field. Nonetheless
from the perspective of coding theory, these solutions are far

from being optimal in the sense of redundancy for a given
error correction capability, particularly for relatively small
burst sizes. Signiﬁcant progress in identifying the properties
of optimal codes for single burst errors has been made [5],
[6].
The theory of algebraic codes for structured bursts is at
best, in its very early stages. Our contribution is to provide
a reasonably general construction technique that gives good
results in some examples. Our main line of attack is to ask
how one might modify an existing burst error correcting code
to suit our needs. The goal is to reduce its required redundancy
by leveraging the additional information given by the burst
structure. Motivated by the Fire codes and the related Burton
[7] code concept, we study how to modify cyclic codes whose
generator polynomial can be written as
(xi − 1)p(x)

(1)

for some integer i and some polynomial p(x). Other codes that
fall in this category are the Gilbert codes [8] and subsequent
extensions [9], [10], [11], [12], [13].
It turns out that under proper conditions, it is possible to
substitute the factor xi − 1 with a factor of lower degree when
we restrict the class of burst errors one wants to correct.
Through examples, we show that this technique can result
in codes that are within 1 bit of a redundancy lower bound
discussed later; in fact for one example we show that the
redundancy of the example is optimal within the class of
cyclic codes of a given length. The techniques for decoding
these modiﬁed codes can be derived from available techniques
for decoding the original parent code, further enhancing the
attractiveness of our construction.
We start our discussion by giving the reader in Section II
the gist of our idea. We provide mathematical preliminaries

1

in Section III, followed by the main result in Section IV.
We apply this result in Section V where we give examples
of codes with very favorable -sometimes optimal- redundancy
characteristics. Conclusions and future work are in Section VI.

The class of Hamming weight functions deﬁnes the weight
n
H
of v ∈ Fq as wn (v) = |{i ∈ {0, · · · , n − 1} : vi = 0}|. It
is easy to see that for every integer j, the polynomial xj − 1
H
gives wn -weight non-increasing residues.
For another example of a weight function, consider the
problem of counting the number of (generic) bursts of length
at most b ≥ 1 in a vector (see [14]). A burst of length at
most b is a polynomial xj e(x) with e0 = 0 and deg e(x) < b.
Deﬁne the set of cyclic burst covers as follows:

II. P RELUDE TO THE MAIN T HEOREM
Suppose that we were given a full rank parity check matrix
H and we were told that the associated code is good for
correcting some class of errors. We notice that the class of
errors has some property - e.g. bursty with sparse bursts - such
that if e is an error vector within that class, we can always
ˆ
recover the syndrome He from He, and hence e itself due to
ˆ
the starting assumption. In here H is some matrix with fewer
rows than H. Then if we employed a code with parity check
ˆ
matrix H instead, we could always correct the same class of
errors, yet spend fewer redundant bits in doing that.
In this article we apply this idea to the case where the parity
check matrix H with n columns can be written as:
I

H=

I

···
H1

Cb,n = {{i, · · · , i + b − 1}

Thus each element of Cb,n is a set of b (modulo n) consecutive
integers. One can deﬁne the burst weight function as follows:
B
wn (v(x), b) = min |W |

where the minimization is over all W ⊂ Cb,n such that ∀vj =
0, there exists a cyclic burst cover c ∈ W such that j ∈ c.
The minimizing W is in general not unique. This burst weight
function can be regarded as a count of the number of bursts
of length at most b in v(x).
The following result is simple to see:
Lemma 1: If |n for positive integers , n, b, then the polyB
nomial x − 1 gives wn (·, b)-weight non-increasing residues.

I

for a square identity matrix I of size × . Partition e as
e = [e0 , · · · , e(n−1)/ ] with each ei being a vector of length
(assuming divides n). Note that I I · · · I e =
i ei . If for example, e has at most t errors then
i ei also
has at most t errors and thus we can substitute every instance
of I with a parity check matrix M deﬁning a code of length
and distance 2t + 1, and be able to always recover i ei .
From the previous discussion, we thus conclude that we can
use the more efﬁcient parity check matrix
H=

M

M

···
H1

For any weight function wn , we say that a cyclic code
with generator g(x) and code length n has wn -minimum
distance d if for every nonzero v(x) with deg v(x) < n, v(x)
mod g(x) = 0 implies that wn (v(x)) ≥ d.
We say that a cyclic code with generator g(x) can correct
the class of error patterns En if for every a, b ∈ En with a(x) =
b(x), a(x) mod g(x) = b(x) mod g(x).
Finally we have the following basic facts:
1) if a|c and b|c then lcm(a, b)|c.
2) lcm(a, b, c) = lcm(a, lcm(b, c)).
3) The polynomial xm − 1 divides xn − 1 if and only if m
divides n.
4) For any two polynomials p0 (x), p1 (x), if v(x)
mod p0 (x) = 0, then v(x) mod lcm(p0 (x), p1 (x)) =
0.

M

and be able to correct the class of errors of interest.
III. M ATHEMATICAL P RELIMINARIES
n
Let a ∈ Fq . We deﬁne a(x) to be the polynomial
n−1
i
i=0 ai x . Conversely, if one deﬁnes a(x) to be a polynomial
with degree at most n, whenever we refer to a we mean the
n-length vector comprising the coefﬁcients of the polynomial
a(x). We will often switch notation (a ↔ a(x)) without notice.
n
A weight function wn is a mapping Fq → Z with the
n
property that for any two a, b ∈ Fq , wn (a + b) ≤ wn (a) +
wn (b) and if a = 0, then wn (a) > 0. A class of weight
functions w = {wi }∞ is a collection of weight functions for
i=1
every possible vector length parameter. We will use the same
notation for a weight function independently of whether the
argument is a vector or a polynomial.
Since we will be focusing on cyclic codes, we will assume
that the wn -weight of a vector or polynomial remains invariant
with cyclic shifts: for every j > 1, and v(x) with deg v(x) <
n, wn (xj v(x) mod xn − 1) = wn (v(x)).
We say that a polynomial f (x) gives wn -weight nonincreasing residues, if for every polynomial v(x) such that
deg v(x) < n,

wdeg(f (x)) (v(x)

mod n : i ≥ 0}.

IV. T HE BASIC TOOL
Theorem 1: Let a class of weight functions w = {wj }∞
j=1
be given. Assume that g(x) and are such that the n-length
cyclic code generated by
lcm(g(x), x − 1)

(2)

can correct the class of errors En . Let
T = max wn (e(x))
e(x)∈En

and assume that x − 1 gives wn -weight non-increasing
residues. Let d(x) be a divisor of x − 1 generating a cyclic
code of length with w -minimum distance at least 2T + 1;
we assume that d(x) does not divide xi − 1 for i < . Then
the cyclic code generated by

mod f (x)) ≤ wn (v(x)).

lcm(g(x), d(x))

2

deg
d(x)

0 < w (v(x)

mod x − 1) ≤ 2T.

mod d(x) = 0.

v(x) = (x − 1)q(x) + r(x).
Taking the modulus with respect to d(x) and recalling that
d(x) divides x − 1, we get
mod d(x) = r(x)

mod d(x) = 0.

Finally through a second application of basic fact 4 we obtain
v(x) mod lcm(g(x), d(x)) = 0.
It remains to analyze the lengths of the codes.
Let n1 be the smallest positive integer such that
lcm(g(x), x − 1)|(xn1 − 1), and let n2 be the smallest
positive integer such that lcm(g(x), d(x))|(xn2 − 1). It
is obvious that lcm(g(x), d(x))|lcm(g(x), x − 1), and
thus n2 ≤ n1 . By the theorem assumption, d(x) divides
a polynomial of the form xi − 1 only if i ≥
since
otherwise the code’s length would be smaller. Therefore since
d(x)|(xn2 − 1), it is true that n2 ≥ ; even more sharply,
it must be true from basic fact 3 that n2 = θ for some
positive integer θ. This implies that x − 1|xn2 − 1. This,
together with the assumption that g(x)|xn2 − 1, implies
that lcm(g(x), x − 1)|xn2 − 1 and therefore n1 ≤ n2 . We
conclude that n1 = n2 .

t

9
9
9
9
16
16
16
16
16

8
8
8
8
16
16
16
16
16

7665
7665
7665
7665
2031585
2031585
2031585
2031585
2031585

2
3
4
8
2
3
5
7
16

t−1

log2

1+n
i=0

r
(bits)
17
19
22
24
26
31
36
41
47

lower
bound
(bits)
16
18
19
20
25
28
32
35
36

cyclic
lower
bound
16
19
21
23

b−1
i

(4)

is a lower bound on the number of bits one needs. This bound
is included in the table for comparison purposes under the
“lower bound” column. As one can see, the codes that we have
constructed can have very good redundancy characteristics for
the case t = 2 where in both examples we are within 1 bit of
the lower bound. For reference purposes,we have also included
the parameters of the Fire code from which the codes were
constructed; this can be found shaded in gray. To sharpen our

V. A PPLICATIONS
A. Codes for bursts with maximum Hamming weight based on
the Fire construction
The Fire codes are single (generic) b-burst error correcting
codes deﬁned by a generator polynomial of the form
(x2b−1 − 1)p(x)

n

where p(x) is a primitive polynomial of degree m ≥ b
that does not divide x2b−1 − 1. The length of the code is
lcm(2b − 1, q m − 1). We shall assume in this section that we
are working with binary codes (q = 2).
Suppose now that we wanted to correct one burst of length
at most b containing at most t binary errors, for the same code
length. With reference to Theorem 1, we seek a polynomial
d(x)|(x2b−1 − 1) generating a cyclic code of length 2b − 1
and that also has minimum Hamming distance at least 2t + 1.
Once in possession of such polynomial, by Theorem 1 the
code with generator polynomial lcm(d(x), p(x)) = d(x)p(x)
would have the desired attributes. As for candidates for d(x),
the class of BCH codes and close relatives immediately come
to mind.
For illustrative purposes, consider the Fire code given by
setting, in (3), b = 8, 16 and p(x) to be an irreducible
polynomial of degree m = 9 and m = 16, respectively so
that lcm(2b − 1, 2m − 1) is as large as one would hope. We
refer the reader to Table I. The column under b indicates the
burst length. The column under n is the code’s length. The
parameter t refers to the number of errors inside of the burst.
The redundancy column denoted by r, indicates the number
of check bits in the code, which is the sum of the number
of bits devoted to the binary error correcting code d(x) and
the number of bits devoted to the primitive polynomial p(x)
employed in the original Fire construction. For the binary
error correcting code, we employ BCH codes with a generator
polynomial of the form Π2t (x − ω i+δ ) with ω a primitive
i=1
element in the appropriate ﬁeld and δ = 0, with the exception
of the case b = 8 and t = 4 where we found it advantageous
to set δ = 10. It is easy to see that the expression

Let q(x) be such that

v(x)

b

TABLE I
PARAMETERS FOR SOME BURST ERROR CORRECTING CODES WITH
MAXIMUM H AMMING WEIGHT CONSTRAINT DERIVED FROM THE F IRE
CODE . T HE PARENT F IRE CODE ’ S PARAMETERS ARE LISTED IN GRAY.

Deﬁne r(x) = v(x) mod x −1. Since the code generated by
d(x) has length and also has w -minimum distance at least
2T + 1, we have
r(x)

deg
p(x)

8
10
13
15
10
15
20
25
31

has the same length n and can also correct the class En .
∆
Proof. Let e1 (x), e2 (x) ∈ En be such that v(x) = e1 (x) −
e2 (x) = 0. Then because the class En is correctable by
(2), v(x) mod lcm(g(x), x − 1) = 0. At least one of the
following must be true:
1) v(x) mod g(x) = 0
2) v(x) mod x − 1 = 0
because if two polynomials divide a third one, the least
common multiple of the two polynomials must also divide
the third one.
If the ﬁrst condition is true, then from basic fact 4 necessarily v(x) mod lcm(g(x), d(x)) = 0, and the theorem
is proved. If the second statement is true, then w (v(x)
mod x − 1) > 0 and since wn (v(x)) = wn (e1 (x) − e2 (x)) ≤
wn (e1 (x)) + wn (e2 (x)) ≤ 2T and x − 1 gives wn -weight
non increasing residues,

(3)

3

deg d(x)
10
12
15
20
21

lower bound, we have performed an exhaustive search over the
space of cyclic codes of degree less than the degree we give
and with the same length. Such a search was conducted for the
case b = 8 only as the code length in the case b = 16 is too
large; the results of this search are presented under the column
“cyclic lower bound”. From this, one can see that within the
class of cyclic codes, the example for b = 8 and t = 3 in
our table is exactly optimal, and the case b = 8 and t = 4 is
within 1 bit of optimality.
We provide now a comparison to a code construction of
Etzion and Yaakobi [3] found as part of the more general goal
of coding for multidimensional bursts. In this work, the authors
employ a certain type of code for a burst with limited weight
as an intermediate construction block for building codes for
multidimensional bursts.
This construction is based on the notion of a burst locator
code which in essence allows you to ﬁnd the start of a
burst error whose error magnitude is known up to a cyclic
permutation, regarding the burst error magnitude as a binary
vector of length b that has its ﬁrst bit set to 1. To learn the
burst error magnitude up to a cyclic permutation, the authors
employ a short binary code of length b that can correct t binary
errors by concatenating the corresponding parity check matrix
horizontally as many times as needed to cover the vector length
n.
The basic requirement in the Etzion and Yaakobi construction is the existence of the burst locator code. The theory
of such codes is based on the theory of of optimum cyclic
burst-correcting codes of Abdel-Ghaffar [5], [6]. Whenever
such optimum cyclic codes exist, Abdel-Ghaffar shows that
the corresponding generator polynomial can be written as the
product e(x)p(x) where e(x) satisﬁes a technical condition
named b-polynomial, and p(x) is an irreducible polynomial
that generates the desired burst locator code. In general, these
polynomials are not easy to ﬁnd (since they are tied to the
existence of optimum cyclic burst codes, which are themselves
rare) and one may have to search in the space of polynomials
p(x) with very large degree. Therefore this construction for
limited weight burst error correcting codes serves primarily
as a theoretical device for proving the existence of other
mathematical objects.
In the following, we will assume that binary BCH codes are
being employed as a component of either the construction we
propose or for the Etzion-Yaakobi construction. Disregarding
the possibility of the non-existence of burst locator codes with
a generator with a desired degree, the Etzion-Yaakobi codes
for bursts of length b (for b odd) and weight at most t have
length 2m − 1 and redundancy at most
t log2 (b) + m.
The codes induced by Theorem 1
lcm(2m − 1, 2b − 1) and redundancy at most
t log2 (2b − 1) + m

b
8
8
16
16
16

n
7665
7665
2031585
2031585
2031585

bm
2
3
2
3
4

r
19
21
31
36
37

d(x)
537
1249
8faf
10cb3b
23a171

TABLE II
PARAMETERS FOR BURST ERROR CORRECTING CODES WITH THE BURST
CONTAINING AT MOST 2 MINIBURSTS OF LENGTH AT MOST bm ( REFER TO
SUBSECTION V-B ). T HE COEFFICIENTS OF d(x) ARE ENCODED AS HEX
CHARACTERS .

the upper bound (6) has roughly t more bits of redundancy,
which could be spent in increasing the degree m of the burst
locator code, with the effect of increasing their length by a
factor of about 2t . Assuming that 2m − 1 and 2b − 1 in the
construction induced from Fire are relatively prime, one sees
that whenever 2t is small compared to 2b − 1 the codes we
offer will remain superior than those of Etzion-Yaakobi and
viceversa. This approximate analysis is reasonable in light of
the earlier discussion showing that for t = 3 we have an
example of a code produced using our construction that is
optimum within the class of cyclic codes.
B. Bursts with minibursts based on the Fire construction
In this subsection we discuss the problem of designing codes
for a single burst of errors that could contain “small bursts”
inside (see second example in Figure 1). As before, we shall
do so by substituting the term x2b−1 − 1 in the generator
polynomial for a Fire code (Equation 3) with a suitable divisor
d(x) of x2b−1 − 1. This can be done in light of Lemma 1,
which guarantees that we can use the burst weight function
also when constructing codes.
We shall focus on the problem of correcting a burst of
length b containing at most 2 minibursts of length bm each.
For our examples, we will focus on b = 8, 16 as before and
bm = 2, 3, 4. For the case b = 8 (resp b = 16) we will
need codes of length 15 (resp. 31) that can correct up to
2 bursts of length at most bm each. Good choices for such
codes (to be used as the divisor d(x)) have been derived using
computer search techniques. Table II gives the characteristics
of the codes for structured bursts derived this way, including
the sample divisors d(x) we found.
C. Codes induced from the Burton construction
We now turn our attention to the problem of correcting
a single phased burst (see later for an explanation) by by
modifying the Burton code, which is closely related to the
Fire code. If p(x) is a polynomial of degree b and exponent
e, and p(x) is relatively prime with xb − 1, then the Burton
code is generated by

(5)
have

deg p(x)
9
9
16
16
16

(xb − 1)p(x).

length

This code has length n = eb, and can correct any
burst of length b or less which is conﬁned to positions
xib , xib+1 , · · · , xib+b−1 , for 0 ≤ i < e.
Suppose as in subsection V-A before that we were interested
in correcting a single burst of errors where the burst has

(6)

which is a reasonable upper bound for small values of t. One
way to (very crudely) compare these codes is to note that

4

Hamming weight at most t. Choose p(x) to be a primitive
polynomial. Suppose that b = 2w − 1 for some w > 0,
and let d(x) denote the generator of a cyclic code with
minimum distance 2t + 1, with the property that d(x) is
coprime with p(x). Then d(x)p(x) is the generator of a code
with the desired property. If d(x) is chosen to be a BCH code,
then its redundancy is at most t log2 (b + 1) and then the
redundancy of the code for limited weight bursts is at most
t log2 (b + 1) + b. By comparing with (6) (where we would
set m = b), we can see that the main effect of the restriction
to phased bursts is to improve redundancy by approximately
t bits. It is worth noting that it is not immediately clear how
to specialize the results of [3] to the case of phased bursts.

VI. C ONCLUSIONS
In this article we gave a code modiﬁcation technique that
allows us to reduce the redundancy of existing codes whenever
the target error class has additional constraints one wants to
take advantage of. We applied this to the problem of correcting
bursts with limited Hamming weight, bursts with “mini-bursts”
inside and bursts with solid errors by modifying the Fire,
Burton and Gilbert codes. We showed signiﬁcant promise in
this direction as the redundancy of some of our examples is
either within 1 bit of optimality or strictly optimal within the
class of cyclic codes.
Future work should examine the gap between the codes
proposed and the optimum cyclic codes. We will also demonstrate how to build a class of codes related to the Fire
construction but which relaxes the constraint on the degree of
the polynomial p(x) so that it can be lower, thereby producing
codes with lower redundancy when a large length is not
necessary.

D. Codes induced from the Gilbert construction
The Gilbert codes are given by
g(x) = lcm(xn1 − 1, xn2 − 1)

(7)

where n1 and n2 are coprime and n = n1 n2 is the length
of the code. We include a discussion on this code because
this basic structure, together with extensions that include more
than 2 terms in the product (7) has been the subject of many
research articles [9], [10], [11], [12], [13], [15]. Suppose that
n1 and n2 , in addition to being coprime, are of the form n1 =
2j1 − 1, n2 = 2j2 − 1 for some j1 = j2 . This gives us great
ﬂexibility in choosing divisors d1 (x) and d2 (x) of xn1 −1 and
xn2 − 1, respectively, since the factorization of xni − 1 in its
splitting ﬁeld contains every term of the form x − ω where ω
is any nonzero element of the ﬁeld GF (2ji ).
Now let d1 (x)|xn1 −1 and d2 (x)|xn2 −1 generate codes with
Hamming distance t + 1. Through two sequential applications
of Theorem 1, we conclude that
lcm(d1 (x), d2 (x))

VII. ACKNOWLEDGEMENTS
The authors acknowledge discussions with M. Franceschini
which led to the realization that solid bursts were a common
pattern in channels with DFE receivers and discussions with
Eitan Yaakobi regarding his work on multidimensional error
bursts.
R EFERENCES
[1] S. G. S. Shiva, C. L. Sheng. Multiple solid burst-error-correcting binary
codes. IEEE Transactions on Information Theory, pages 188–189,
January 1969.
[2] A. D. Wyner. A note on a class of binary cyclic codes which correct
solid-burst errors. IBM Journal of Research and Development, pages
68–69, January 1964.
[3] T. Etzion, E. Yaakobi. Error-correction of multidimensional bursts. IEEE
Transactions on Information Theory, 55(3), March 2009.
[4] P. Fire. A class of multiple-error correcting binary codes for nonindependent errors. Sylvania Report RSL-E-2, Sylvania Reconnaissance
Systems Lab, Mountain View, CA, 1959.
[5] K.A.S. Abdel-Ghaffar. On the existence of optimum cyclic burstcorrecting codes over GF(q). IEEE Trans. on Information Theory,
32(2):329–332, 1988.
[6] K.A.S. Abdel-Ghaffar, R.J. McEliece, A.M. Odlyzko, H.C.A. van
Tilborg. On the existence of optimum cyclic burst-correcting codes.
IEEE Trans. on Information Theory, 32(6):768–775, 1986.
[7] H.O. Burton. A class of asymptotically optimal burst-correcting block
codes. International Communications Conference, Boulder, CO, 1969.
[8] E. N. Gilbert. A problem in binary encoding. Proceedings of the
Symposium on Applied Mathematics, 10, 1960.
[9] H.O. Burton, E.J. Weldon. Cyclic product codes. IEEE Transactions on
Information Theory, pages 433–439, July 1965.
[10] P. Neumann. A note on Gilbert burst-correcting codes. IEEE Transactions on Information Theory, pages 377–384, July 1965.
[11] L.R. Bahl, R.T. Chien. On gilbert burst-error-correcting codes. IEEE
Transactions on Information Theory, 5:431–433, 2005.
[12] W.M.C.J. Overveld. Multiple-burst error-correcting cyclic product codes.
IEEE Transactions on Information Theory, 33(6):919–923, December
1987.
[13] L. R. Bahl, R. T. Chien. Single- and multiple-burst-correcting properties
of a class of cyclic product codes. IEEE Transactions on Information
Theory, 17(5), September 1971.
[14] S. Wainberg, J. K. Wolf. Burst decoding of binary block codes on q-ary
output channels. IEEE Trans. on Information Theory, pages 684–686,
1972.
[15] W. Zhang, J.K. Wolf. A class of binary burst error-correcting quasicyclic codes. IEEE Transactions on Information Theory, 34(3):463–479,
May 1988.

(8)

generates a code of length n1 n2 that can correct a single burst
with weight t or less.
For example if n1 = 7, n2 = 15 we know from Table I of
[15] that the burst error correcting ability of the corresponding
Gilbert code is b = 6. Such code would have length 105.
Suppose we want to correct bursts of length at most 6 with
weight 2. By choosing the divisors d1 (x) and d2 (x) to be
BCH codes of distance 5 each, we obtain from (7) a code with
redundancy 14 that achieves this goal, in comparison with the
redundancy of the originating Gilbert code which is 21.
E. An extension to solid bursts
If one is interested in correcting solid bursts of errors with
a maximum length constraint, one can combine the ideas of
the discussion on codes for bursts with a maximum weight
constraint with the idea of Shiva et. al. [1]), who employ cyclic
linear codes for binary random errors together with the trick
of adding a received codeword with a 1-bit shifted version of
itself. The result is still a codeword due to the cyclic and linear
properties, but the solid error is transformed into 2 binary
errors. The performance of the resulting codes for structured
bursts is intimately related to that of the earlier discussion,
and thus omitted.

5

