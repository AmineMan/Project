Creator:        cairo 1.10.0 (http://cairographics.org)
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Tue Jun 19 12:55:32 2012
ModDate:        Tue Jun 19 12:55:32 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      545900 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569558325

A Transform Approach to Linear Network Coding
for Acyclic Networks with Delay
Teja D. Bavirisetti, Abhinav Ganesan, K. Prasad and B. Sundar Rajan
Email: dbaviris@broadcom.com, {abhig 88, prasadk5, bsrajan}@ece.iisc.ernet.in

across different generations, where Fq denotes the ﬁeld over
which the network operates. Using techniques similar to those
used in Multiple Input Multiple Output-Orthogonal Frequency
Division Multiplexing (MIMO-OFDM) [8], we convert the
output symbols at the sink nodes at any given time instant
into a Fq -linear combination of the input symbols generated
during the same generation. Since we use Discrete Fourier
Transform (DFT) over a ﬁnite-ﬁeld, we call this technique as
the transform technique. As a ﬁrst step towards guaranteeing
a minimum throughput when the zero-interference conditions
cannot be satisﬁed in an acyclic network with delay, we
consider a three-source three-destination multiple unicast (3-S
3-D MU) network with the source-destination pair denoted
by Si -Ti , i = 1, 2, 3. We also assume a min-cut of one
between source Si and destination Ti . Under this set-up,
we apply the transform techniques and network alignment
to ﬁnd conditions under which the network can guarantee a
throughput close to half for every source-destination pair Si Ti , i = 1, 2, 3. This method does not make use of memory
at the intermediate nodes. The case of three-source threedestination multiple unicast instantaneous networks required
the use of time varying local encoding kernels (LEKs) for
network alignment [6] while we show that there can exist
networks with delay where time invariant LEKs are sufﬁcient
for network alignment.
The organization and contributions of this paper are summarized as follows:

Abstract—The algebraic formulation for linear network coding
in acyclic networks with each link having an integer delay is well
known. Based on this formulation, for a given set of connections
over an arbitrary acyclic network with integer delay assumed for
the links, the output symbols at the sink nodes at any given time
instant is a Fq -linear combination of the input symbols across
different generations, where Fq denotes the ﬁeld over which the
network operates. We use ﬁnite-ﬁeld discrete Fourier transform
(DFT) to convert the output symbols at the sink nodes at any
given time instant into a Fq -linear combination of the input
symbols generated during the same generation. We call this as
transforming the acyclic network with delay into n-instantaneous
networks (n is sufﬁciently large). We show that under certain
conditions, there exists a network code satisfying sink demands
in the usual (non-transform) approach if and only if there exists a
network code satisfying sink demands in the transform approach.
Furthermore, assuming time invariant local encoding kernels, we
show that the transform method can be employed to achieve half
the rate corresponding to the individual source-destination mincut (which are assumed to be equal to 1) for some classes of threesource three-destination multiple unicast network with delays
using alignment strategies when the zero-interference condition
is not satisﬁed.

I. I NTRODUCTION
Network coding and its various aspects were studied in [1]–
[3] as a means to improve the rate of transmission in networks.
The case of acyclic networks with delays was abstracted in
[3] as acyclic networks where each link in the network has
an integer delay associated with it. The problem of network
coding for multiple unicast sessions was considered in [4], [5].
In [6], the concept of interference alignment from interference
channels [7] was extended to instantaneous multiple unicast
networks with three source-destination pairs for the case
where, each source-destination pair has a min-cut of 1. This
was called network alignment and it guarantees a minimum
throughput when the zero-interference conditions in Theorem
6 of [3] cannot be satisﬁed. Though for speciﬁc networks there
may exist schemes which achieve more throughput than that
achieved by network alignment, alignment identiﬁes a class of
networks where a minimum throughput can be guaranteed.
In the current work, we look at a technique similar to
[6] for providing throughput guarantees in (certain) acyclic
networks with delays where the zero-interference conditions
cannot be satisﬁed, while not making use of any memory at
the intermediate nodes (i.e., nodes other than the sources and
sinks). The set of all Fq -symbols generated by the sources
at any particular time instant are said to constitute the same
generation. The output symbols at the sink nodes at any given
time instant is a Fq -linear combination of the input symbols

•

•

•

After reviewing the system model for acyclic networks
in Section II, using DFT over a ﬁnite ﬁeld, we convert
the output symbols at the sink nodes at any given time
instant into a Fq -linear combination of the input symbols
generated during the same generation. We call this as
transforming the acyclic network with delay into ninstantaneous networks, n being sufﬁciently large (Section III).
We show that under certain conditions, there exists a
network code satisfying sink demands in the usual (nontransform) approach if and only if there exists a network
code satisfying sink demands in the transform approach
(Section III).
For some classes of three source-three destination multiple unicast network with delays which do not satisfy
the zero-interference conditions, we employ the transform
techniques to achieve the following.
– When the min-cut between Si -Tj is greater than or

1

equal to one for i, j = 1, 2, 3 and i �= j, we propose
a solution to achieve half the rate corresponding to
the individual source-destination min-cut, with timeinvariant Local Encoding Kernels (LEKs) (Section
IV).
Due to space constraints, the proofs of all the theorems
and other claims, along with illustrative examples are given
in [10].
Notations: The cardinality of a set E is denoted by |E|. A
superscript of t accompanying any variable (for example, �(t) )
or any matrix (for example, M (t) ) denotes that they are a function of time t. The ith row, j th column element of a matrix A
is denoted by [A]ij . The Kronecker product of matrices A and
B is denoted by A ⊗ B. The notation diag(A1 , A2 , · · · , An )
represents a block diagonal matrix whose diagonal matrices
are given by (A1 , A2 , · · · , An ). The determinant of a square
matrix A is denoted by det(A). An identity matrix of size
µ × µ is denoted by Iµ . For 3-S 3-D MU networks we shall
use the term destination to denote sink.

where, αj,e and βe� ,e belong to Fq and q = pm , for some
prime number p and positive integer m > 0. The output at
any sink node v � , is taken to be

Z (t+1) (e) =

j=1

αj,e X (t) (v, j) +

(1)

where, �e� ,j ∈ Fq . Note that in [3], the counterpart to (1)
involves linear combinations of the received processes and
output processes across current and previous time instants,
resulting in the decoding of the received processes at the sinks
to the demanded input processes. However, in (1), at every
sink, we only deﬁne a preprocessing of the received symbols
corresponding to the previous time instant alone. The outputs
Y (t+1) (v � , j) as t varies, will then be used by sink-j to decode
the demanded input processes using sufﬁcient delay elements
for feed-forward and feedback operations. The coefﬁcients,
αj,e , βe� ,e and �e� ,j are also called local encoding kernels
(LEKs). The LEKs are denoted by ε. These LEKs are assumed
to be time invariant.
We assume some ordering among the sources so that the
random process generated by the sources can be denoted, without loss of generality, as X1 (D), X2 (D), ..., Xs (D), where s
denotes the number of sources and Xi (D) is a µi × 1 column
vector given by Xi (D) = [Xi1 (D) Xi2 (D) . . . Xiµi (D)]T .
Similarly, we assume some ordering among the sinks so that
the output random process at the sinks can be denoted, without
loss of generality, as Y1 (D), Y2 (D), ..., Yr (D), where r
denotes the number of sinks and Yi (D) is a νi × 1 column
vector given by Yi (D) = [Yi1 (D) Yi2 (D) . . . Yiνi (D)]T . Let

First, we shall brieﬂy review the system model from [3]. We
consider a network represented by a Directed Acyclic Graph
(DAG) G = (V, E), where V is the set of nodes and E is
the set of directed links. We assume that every directed link
between a pair of nodes represents an error-free link and has a
capacity of one Fq symbol per link-use. Multiple links between
two nodes are allowed and the ith directed link from v1 ∈ V
to v2 ∈ V is denoted by (v1 , v2 , i). The head and tail of a link
e = (v1 , v2 , i) are denoted by v2 = head(e) and v1 = tail(e).
A link between a pair of nodes can have an arbitrary ﬁnite
integer delay. Let X (v) = {X(v, 1), X(v, 2), ..., X(v, µv )} be
the collection of discrete random processes that are generated
at the node v. Let Xv = [X(v, 1) X(v, 2) ... X(v, µv )]T .
The random process transmitted through link e is denoted by
Z(e). Communication is to be established between selected
nodes in the network, i.e., we are required to replicate a subset
of the random process in X (v) at some different node v � . A
connection c is deﬁned as a triple (v, v � , X (v, v � )) ∈ V ×
V × PX (v) , where PX (v) denotes the power-set of X (v). For
the connection c, v is called the source and v � is called the
sink of c, i.e., v = source(c) and v � = sink(c) (source(c)
�= sink(c)). The collection of νv� random processes Y(v � ) =
{Y (v � , 1), Y (v � , 2), ..., Y (v � , νv� )} denotes the output at sink
v � . Let Yv� = [Y (v � , 1) Y (v � , 2) ... Y (v � , νv� )]T .
The input random processes X(v, i), output random processes Y (u, j) and random processes Z(e) transmitted on
the link e are considered as a power series in a delay
�∞
parameter D, i.e., X(v, i) = � X (t) (v, i)D t , Y (u, j) =
t=0
�∞
∞
(t)
(u, j)D t and Z(e) = t=0 Z (t) (e)Dt .
t=0 Y
We say that G is a Fq -linear network, if for all links the
random process Z(e) on a link e = (v, u, i) ∈ E satisﬁes
�

�e� ,j Z (t) (e� )

e� :head(e� )=v �

II. S YSTEM M ODEL

µv
�

�

Y (t+1) (v � , j) =

Y (D) = [Y1 (D)T Y2 (D)T ... Yr (D)T ]T
ν×1
X(D) = [X1 (D)T X2 (D)T ... Xs (D)T ]T
µ×1

where µ =

�s

i=1

µi and ν =

�r

i=1

νi . We now have [3]
(2)

Y (D) = M (D)X(D)

where, M (D) denotes the ν × µ network transfer matrix.
Throughout the paper, we assume the elements of M (D) to
be polynomials in D and not rational functions in D. It is
understood that the elements of M (D) are also polynomial
functions of ε and are not explicitly indicated. Now, M (D)
can also be written as
M11 (D)
M12 (D)

M (D) = 
.
.

.
M1r (D)


M21 (D)
M22 (D)
.
.
.
M2r (D)

···
···
.
.
.
···


Ms1 (D)
Ms2 (D)


.
.

.
Msr (D)

(3)

where, Mij (D) denote the νj × µi network transfer matrix
�
from source-i to sink-j. Let d�
max and dmin denote the
maximum and the minimum of all path delays from source-i to
sink-j, ∀ (i, j), between which a path exists. Hence, the power
series of M (D), in the delay parameter D, can written as
be

d�
max

M (D) =

�

d� =d�
min

βe� ,e Z (t) (e� )

�

�

M (d ) D d = 

d�
max
d=0

�

M (d) D d  D dmin

where, the matrix-coefﬁcient M (d) of Dd is a ν × µ matrix.
�
Since Ddmin just adds a constant additional delay to all the

e� :head(e� )=tail(e)

2

outputs, without loss of generality, we can take M (D) and
Mij (D) to be
M (D) =

d�
max

M (d) D d and Mij (D) =

d=0

d�
max

(d)

Mij D d .

Note that F −1 exists [9], [10]. Let Qµ = F ⊗ Iµ and Qν =
F ⊗ Iν . The inverse of Qµ is given by Q−1 = F −1 ⊗ Iµ
µ
(∵ Qµ Q−1 = (F ⊗ Iµ )(F −1 ⊗ Iµ ) = (F F −1 ) ⊗ Iµ = Inµ ).
µ
ˆ
Deﬁne the matrices Aj (0 ≤ j ≤ n − 1) of size ν × µ by
�L
ˆ
Aj = i=0 α(n−1−j)i Ai .
The following theorem will be useful in establishing the
results subsequently.
Theorem 1: The matrix A can be block diagonalized as
ˆ µ
ˆ
ˆ
ˆ
ˆ
A = Qν AQ−1 where, A = diag(An−1 , An−2 , . . . , A0 ).
Now, consider an arbitrary acyclic network with delay. From
�
(2) and (3), Yj (D) = s Mij (D)Xi (D).
i=1
Now, consider a transmission scheme, where we take n (>>
dmax ) generations of input symbols at each source and ﬁrst
transmit the last dmax generations (which we call the cyclic
preﬁx) followed by the n generations of input symbols. Hence,
n + dmax time slots at each source are used for transmitting
n generations. Then, Yj (D) can be written as (7) using (4).
Now, after discarding the ﬁrst dmax outputs at sink j, (7) can
be re-written as (8). Using Theorem 1, (8) can be re-written
as

(4)

d=0

For each sink-j, we also deﬁne Mj (D) to be the νj × µ
submatrix of M (D) that captures the transfer function between
all the sources and the sink-j, i.e.,
Mj (D) = [M1j (D) M2j (D) ... Msj (D)] .

(5)

In the network G, let Cj denote the set of all connections to
sink-j. Let C = ∪r Cj . The following lemma from [3] states
j=1
the conditions for solvability of acyclic networks with delay.
Lemma 1 ( [3]): An acyclic network with delay is solvable
iff there exists an assignment to the LEKs ε such that the
following conditions are satisﬁed.
(d)
1) Zero-Interference: Mij (li ) = 0, for all pairs (source-i,
sink-j) of nodes such that (source-i, sink-j, Xi (li ) (D))
(d)
�∈ Cj for all 0 ≤ d ≤ dmax , where Mij (li ) denotes
(d)
th
th
the li column of Mij and Xi (li ) (D) denotes the li
element of Xi (D).
2) Invertibility: For every sink-j, the square submatrix
�
Mj (D) of Mj (D) formed by juxtaposition of the
columns of Mij (D), ∀ i, except those involved in the
zero-interference conditions, is invertible over Fq (D),
the ﬁeld of rationals over Fq .
A network code for (G, C) is deﬁned to be a feasible network
code if it achieves the given set of demands at the sinks i.e.,
if the above zero-interference and the invertibility conditions
are satisﬁed.

Yj n =

where,

A1
A0
.
.
.
A2

···
···
.
.
.
···

AL−1
AL−2
.
.
.
AL

AL
AL−1
.
.
.
0

0
AL
.
.
.
0

0
0
.
.
.
0

···
···
.
.
.
···

1
1

1
F =
.
.
.
1

1
α
α2
.
.
.
n−1
α

1
α2
α4
.
.
.
α2(n−1)

···
···
···
.
.
.
···

1
αn−1
α2(n−1)
.
.
.

n

Yj� =

α(n−1)(n−1)

s
�

�n
ˆ
Qνj Mij Q−1 Xi
µi

i=1

Yj n = Q−1
νj

s
�

ˆ
Qνj Mij Q−1 Qµi Xi n =
µi

s
�

ˆ
Mij Xi n

(10)

i=1

i=1

Now, for 0 ≤ t ≤ n − 1, (10) can be re-written as
Yj (t) =

s
�

ˆ (t)
Mij Xi (t) .

(11)

i=1

Hence, each element of Yj (t) is a Fq -linear combination of
the input symbols across the same generation. We now say
that we have transformed the acyclic network with delay into
n-instantaneous networks. Note that the linear processing of
multiplying by matrices Qµi at source-i and Q−1 at sink-j are
νj
done in a distributed fashion which is necessary because the
sources and sinks are distributed in the actual network.
n
Remark 1: One can observe that transmitting Xi�
=
n
Qµi Xi implies taking DFT across n generations of each
of the µi random-processes generated at source-i. Similarly,
the pre-multiplication by Q−1 at sink-j simply implies taking
νj
IDFT across n generations of each of the νj random-processes
received. The entire processing, including the addition of
cyclic preﬁx at source-i and removal of cyclic preﬁx at sink-j
is shown in a block diagram in Fig. 1.
=
Now,
let
us
re-write
(11)
as
Yj (t)
�s �µi
(t)
(t)
ˆ
ˆ
Mij (li )Xi (t) (li ). where, Mij (li ) denotes the
i=1
li =1


0
0

. 
. 
.
A0









�
�T
Yj n = Yj (n−1) Yj (n−2) · · · Yj (0)
� (n−1)
�T
Xi n = Xi
and
Xi (n−2) · · · Xi (0)
�
�
ˆ
ˆ
ˆ
ˆ ij = diag M (n−1) , M (n−2) , · · · , M (0) .
M
ij
ij
ij
n

where, Ai (0 ≤ i ≤ L) are matrices of size ν × µ, whose
elements belong to Fq and n >> L. Note that the (i + 1)th
row of matrices is a circular shift of the ith row of matrices in
A. We assume that n divides q − 1. The choice of n is such
that there exists an α ∈ Fq so that n is the smallest integer
for which αn = 1. This is indeed possible [9]. The ﬁnite-ﬁeld
DFT matrix F is given by


(9)

Now, at each source-i, transmit Xi� = Qµi Xi n instead
of Xi n . Then, at each sink-j, we receive Yj� n . Let Yj n =
n
Q−1 Yj� . From (9) we have,
νj

In this section, we show that the output symbols at all the
sinks which was originally a Fq -linear combination of the
input symbols across the different generations, at any given
time instant, can be transformed into a Fq -linear combination
of the input symbols across the same generation.
Consider a matrix A of size nν × nµ given by
A0
0

 .
 .
.
A1

ˆ
Qνj Mij Q−1 Xi n
µi

i=1

III. T RANSFORM T ECHNIQUES FOR ACYCLIC N ETWORKS
WITH D ELAY



s
�

(6)

3


 (0)
(1)
(d
)
Mij
···
Mij max
0
0
···
0
Mij
Yj (n−1)
(0)
(d
−1)
(d
)
 Y (n−2) 
 0
Mij
· · · Mij max
Mij max
0
···
0
 j







 .
.
.
.
.
.
..
..
..


 .
.
.
.
.
.
.
.
.
.
.
.
.


.
s
� .



(0)
(1)
(dmax −1)
(0)
 Yj
=
 0
Mij
· · · Mij
0
···
0
Mij





(−1)
(0)
(d
−2)
i=1 
 Yj

 0
0
···
0
0
Mij
· · · Mij max





 .
.
.
.
.
.
.
.
.


 .
.
.
.
.
.
.
.
.


 .
.
.
.
.
.
.
.
.
(−dmax )
Yj
0
0
···
0
0
0
0
0
 (0)
 (n−1) 
(1)
(d
−1)
(d
)
Yj
Mij
· · · Mij max
Mij max
0
··· 0
Mij

Y (n−2) 
(0)
(dmax −2)
(dmax −1)
(d
)
s
· · · Mij
Mij
Mij max
··· 0
Mij

 j
� 0



=
 .

.
.
.
.
.
.
.
.

 .

.
.
.
.
.
.
.
.
i=1 


.
.
.
.
.
.
.
.
.
(0)
(1)
(2)
(dmax )
Yj
Mij
Mij
···
Mij
0
0
··· 0
�
��


Mij

(n−1)

Xi1

(n−1)

Xi2

(k−1)

· · · Xi1

(k−1)

· · · Xi2

(1)

(0)

n point
DFT

Xi1

(1)

(0)

n point
DFT

Xi2

· · · Xi1 Xi1
· · · Xi2 Xi2

(n−1)

(k−1)

· · · Xiµi

(1)

n point
DFT

(0)

· · · Xiµi Xiµi

�(0)

Add
CP

Xi1

�(1)

�(0)

Add
CP

Xi2

· · · Xi1 Xi1

�(n−1)

· · · Xi2 Xi2

.
.
.

.
.
.
Xiµi

�(1)

�(n−1)

.
.
.
�(n−1)

Xiµi

�(1)

�(0)

DFT
Block

k th generation


Xi (n−1)

  Xi (n−2) 




.


.


.

(dmax )  

(0)

Mij
Xi



(dmax−1 )  
(n−1)

  Xi
Mij



.


.
.

.

.

.
(n−dmax )
(0)
Xi
Mij


0
0
Xi (n−1)

0
0  Xi (n−2) 



.
.
. 

.
.
. 

.

.
.
(0)
(0)
Xi
0 Mij
�
0
.
.
.

�(n−1)

· · · Xi1 Xi1 Xi1

�(n−1)

· · · Xi2 Xi2 Xi2

(7)

(8)

�(n−dmax )

�(1)

�(0)

�(n−1)

· · · Xi1

�(1)

�(0)

�(n−1)

· · · Xi2

�(1)

�(0)

�(n−1)

· · · Xiµi

�(n−dmax )

.
.
.

.
.
.

· · · Xiµi Xiµi



0

Add
CP
Cyclic
Preﬁx(CP)

�(n−1)

Xiµi

· · · Xiµi Xiµi Xiµi

�(n−dmax )

(a) Linear Processing at Source-i
�(n−1)

· · · Yj1 Yj1 Yj1

�(n−1)

· · · Yj2 Yj2 Yj2

Yj1
Yj2

�(−dmax )

Remove
CP

Yj1

�(−dmax )

Remove
CP

Yj2

�(1)

�(0)

�(−1)

· · · Yj1

�(1)

�(0)

�(−1)

· · · Yj2

�(n−1)

Yjνj

�(1)

�(0)

�(−1)

· · · Yjνj Yjνj Yjνj

�(−dmax )

· · · Yjνj

Remove
CP

�(0)

n point
IDFT

Yj1

�(1)

�(0)

n point
IDFT

Yj2

· · · Yj1 Yj1

�(n−1)

· · · Yj2 Yj2

.
.
.

.
.
.

�(1)

�(n−1)

�(n−1)

(n−1)

.
.
.

.
.
.
Yjνj

(n−1)

�(1)

�(0)

· · · Yjνj Yjνj

n point
IDFT

(1)

(0)

(1)

(0)

(1)

(0)

· · · Yj1 Yj1
· · · Yj2 Yj2

.
.
.
(n−1)

Yjνj

· · · Yjνj Yjνj

IDFT
Block

(b) Linear Processing at Sink-j
Fig. 1.

Block Diagram to illustrate linear processing at Source-i and Sink-j.

(t)

th
th
ˆ
li column of Mij and Xi (t) (li ) denotes the li element of
Xi (t) .
Similar to the zero-interference and invertibility conditions
in Lemma 1, we have the following theorem for solvability of
(11).
Theorem 2: An acyclic network (G, C) with delay, incorporating the transform techniques, is solvable iff there exists an
assignment to the LEKs ε such that the following conditions
are satisﬁed.
ˆ (t)
1) Zero-Interference: Mij (li ) = 0 for all pairs (source-i,
sink-j) of nodes such that (source-i, sink-j, Xi (t) (li ))
�∈ Cj for 0 ≤ t ≤ n − 1.
2) Invertibility: If Cj contains the connections (source-i1,
sink-j, Xi1 (t) (li1 )), (source-i2, sink-j, Xi2 (k) (li2 )), · · · ,
(source-is� , sink-j, Xis� (t) (lis� )), then, the sub-matrix
ˆ (t)
ˆ (t)
ˆ (t)
[Mi1 j (li1 ) Mi2 j (li2 ) · · · Mis� j (lis� )] is a nonsingular
νj × νj matrix for 0 ≤ t ≤ n − 1.
The zero-interference condition of Lemma 1 and Theorem
2 are equivalent [10]. The network code which satisﬁes the
invertibility and the zero-interference conditions for (G, C)
in the transform approach using a suitable choice of α for
the DFT operations is deﬁned as feasible transform network

code for (G, C). The following theorem concerns with the
relationship between the existence of a feasible network code
and a feasible transform network code for (G, C).
Theorem 3: Let (G, C) be the given acyclic delay network.
There exists a feasible transform network code for (G, C) if
and only if there exists a feasible network code for (G, C)
such that � − 1)�� f (D) where, f (D) is given by f (D) =
(D
�r
�
det Mj (D) .
j=1
In the next section we shall apply these transform techniques
to 3-S 3-D MU network with delays.
IV. 3-S 3-D MU

WITH

D ELAYS

In [6], the concept of interference alignment from interference channels was extended to instantaneous acyclic multiple
unicast networks with three source-destination pairs for the
case where, each source-destination pair has a min-cut of 1
and where, the zero-interference conditions in Theorem 6 of
[3] cannot be satisﬁed. This was called network alignment.
It was shown in [6] that, for a class of such networks, it is
possible to achieve a throughput close to 1/2 for every sourcedestination pair via network alignment.
In this section, we deal with acyclic 3-S 3-D MU network
with delays where each source-destination pair Si − Ti has a

4

(n+1)
n
n
of (2n+1) , (2n+1) , and (2n+1) are achieved for the sourcedestination pairs S1 − T1 , S2 − T2 , and S3 − T3 respectively.
Hence, as n → ∞, a throughput of 1/2 is achieved for every
source-destination pair.
Remark 2: Note that, for 3-S 3-D MU network without
delay [6], it was not possible to achieve network alignment
without changing the LEKs with time. When there is no delay,
the matrices T , R, and S, given in (12) would simply be equal
to f (ε)I2n+1 (where, f (ε) is some polynomial in ε) and hence,
the matrices V1 , V2 and V3 as given in (13)-(15) are themselves
not full-rank matrices. Hence, ε was varied with time in [6].
However, in the case of delay, the matrices T , R, and S are
not necessarily scaled identity matrices and network alignment
can be feasible even with time-invariant LEKs (see [10] for
example).
The choice of the matrices V1 , V2 and V3 and the conditions for
feasibility of network alignment have been generalized with
time-varying LEKs in [10].

min-cut of 1 and the min-cut between Si −Tj is greater than or
equal to 1, for all i �= j. We use the results from the previous
section and show that, using network alignment, even when the
zero-interference conditions of Lemma 1 or Theorem 2 cannot
be satisﬁed, for a class of 3-S 3-D MU networks with arbitrary
integer delays on its links we can achieve a throughput close
to 1/2 for every source-destination pair.
Let the random process injected into the network by source
Si , i = 1, 2, 3, be Xi (D). Source Si needs to communicate
only with destination Ti . Here, µi = 1 and νj = 1, i, j =
1, 2, 3.
Consider a transmission scheme, where we take 2n + 1
(>> dmax ) generations of input symbols at each source and
ﬁrst transmit last dmax generations (i.e., the cyclic preﬁx)
followed by the 2n + 1 generations of input symbols. Let
2n+1
Q1 Xi
be the input symbols transmitted by source-i where,
(0)
(2n−1)
(2n)
2n+1
2n+1
=
· · · Xi ]T . Also, let X1
Xi
Xi
= [Xi
2n+1
2n+1
� n+1
�n
�n
= V2 X2 , and X3
= V3 X3 , where V1 is
V1 X1
, X2
a (2n + 1) × (n + 1) matrix, V2 is a (2n + 1) × n matrix, V3
is a (2n + 1) × n matrix, and
�
X1

(0)

�
X1

(0)

�
Xi

n+1

�
= [X1

n

�
= [Xi

�
Xi

(1)

�
· · · X1

(1)

�
· · · Xi

V. D ISCUSSION
Transformation of an acyclic network with delay into ninstantaneous networks enabled us to apply the network alignment solution of [6] to 3-S 3-D MU networks with delays
and it was shown that there can exist networks where network
alignment is feasible even by using time-invariant LEKs which
is not possible in the delay-free counterpart. Optimality of
network alignment, when feasible, for the class of 3-S 3-D
MU networks with delays remains to be investigated.

(n) T

]

(n−1) T

]

(i ∈ {2, 3})

�
�
�
where, X1 n+1 , X2 n , and X3 n denote the (n + 1), n, and n
independent input symbols generated by sources-1, 2, and 3
respectively. Now, from (10), for j ∈ {1, 2, 3}
� n+1
�n
�n
ˆ
ˆ
ˆ
Yj 2n+1 = M1j V1 X1
+ M2j V2 X2 + M3j V3 X3

where, Yj 2n+1 denotes the (2n + 1) output symbols at
destination-j. The objective is to recover the independent
�
�
�
input symbols X1 n+1 , X2 n , and X3 n at the destinations-1, 2,
and 3, from the output symbols Y12n+1 , Y22n+1 , and Y32n+1
respectively.
ˆ
Note that the elements of Mij s are functions of ε.
ˆ
Lemma 2: Determinant of the matrix Mij ∀ (i, j) ∈
{1, 2, 3} is a non-zero polynomial in ε.
ˆ
A direct consequence of the above lemma is that Mij is
invertible. Deﬁne the matrices

R EFERENCES
[1] R. Ahlswede, N. Cai, R. Li and R. Yeung, “Network Information
Flow”, IEEE Transactions on Information Theory, Vol. 46, No. 4, pp.
1204-1216, July 2000.
[2] N. Cai, R. Li and R. Yeung, “Linear Network Coding”, IEEE Transactions on Information Theory, Vol. 49, No. 2, pp. 371-381, Feb. 2003.
[3] R. Koetter, M. Medard, “An Algebraic Approach to Network Coding”,
IEEE/ACM Transactions on Networking, Vol. 11, No. 5, pp. 782-795,
Oct. 2003.
[4] D. Traskov, N. Ratnakar, D. S. Lun, R. Koetter, and M. Medard,
“Network coding for multiple unicasts: An approach based on linear
optimization”, ISIT 2006, Seattle, Washington, Jul. 9-14, 2006, pp.
1758-1762
[5] T. Ho, Y. H. Chang, and K. J. Han, “On constructive network coding
for multiple unicasts,” Allerton Conference on Communication, Control
and Computing, Illinois, USA, Sept 27-29, 2006, pp. 779-788.
[6] A. Ramakrishnan, A. Das, H. Maleki, A. Markopoulou, S. Jafar, S.
Vishwanath,“Network coding for three unicast sessions: Interference
alignment approaches”, Allerton Conference on Communication, Control, and Computing, Illinois, USA, Sept. 29 - Oct. 1, 2010, pp. 10541061.
[7] V. R. Cadambe and S. A. Jafar, “Interference alignment and the degrees
of freedom for the K-user interference channel”, IEEE Transactions
on Information Theory, Vol. 54, No. 8, pp. 3425-3441, Aug. 2008.
[8] G. G. Raleigh, J. M. Ciofﬁ, “Spatio-Temporal Coding for Wireless
Communication”, IEEE Transactions on Communications, Vol. 46, No.
3, pp. 357-366, Mar. 1998.
[9] Richard. E. Blahut, “Algebraic Codes on Lines, Planes, and Curves”,
Cambridge University Press, 2008.
[10] T. D. Bavirisetti, G. Abhinav, K. Prasad and B. Sundar Rajan, “A
Transform Approach to Linear Network Coding for Acyclic Networks
with Delay”, arXiv:1103.3882v4 [cs.IT].

ˆ ˆ −1
ˆ ˆ −1
ˆ ˆ ˆ ˆ −1 ˆ −1 ˆ −1
T = M21 M32 M13 M31 M23 M12 , R = M13 M23 ; S = M12 M32 .
(12)
Now, choose
V1 = [W T W T 2 W · · · T n W ]

(13)

V2 = [RW RT W RT 2 W · · · RT n−1 W ]

(14)

V3 = [ST W ST 2 W · · · ST n W ]

(15)

where, W = [1 1 · · · 1]T (all ones vector of size (2n+1)×1).
�
�
�
Theorem 4: The input symbols X1 n+1 , X2 n ,and X3 n can
be exactly recovered at T1 , T2 , and T3 from the output symbols
Y12n+1 , Y22n+1 , and Y32n+1 respectively subject to p � 2n + 1,
if the following conditions hold.
ˆ −1 ˆ
ˆ −1 ˆ
Rank[V1 M11 M21 V2 ] = 2n + 1, Rank[M12 M22 V2 V1 ] = 2n + 1
−1 ˆ
ˆ
Rank[M13 M33 V3 V1 ] = 2n + 1.

The condition p � 2n+1 arises because of the constraint that
2n + 1|q − 1 (where, q = pm ) [10]. When the conditions of
the above theorem are satisﬁed, we say that network alignment
is feasible. When network alignment is feasible, throughputs

5

