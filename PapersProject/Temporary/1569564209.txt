Title:          isit08_short.pdf
Author:         Michal_L
Creator:        Adobe Acrobat 8.0
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 08:54:54 2012
ModDate:        Tue Jun 19 12:54:28 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      340402 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569564209

A characterization of the number of subsequences
obtained via the deletion channel
Y. Liron

M. Langberg

The Open University of Israel
yuvalal@gmail.com

The Open University of Israel
mikel@openu.ac.il

Abstract— Motivated by the study of deletion channels, this
work presents improved bounds on the number of subsequences
obtained from a binary sting X of length n under t deletions. It is
known that the number of subsequences in this setting strongly
depends on the number of runs in the string X; where a run
is a maximal sequence of the same character. Our improved
bounds are obtained by a structural analysis of the family of r-run
strings X, an analysis in which we identify the extremal strings
with respect to the number of subsequences. Speciﬁcally, for
every r, we present r-run strings with the minimum (respectively
maximum) number of subsequences under any t deletions; and
perform an exact analysis of the number of subsequences of these
extremal strings.

log
70

60

50

40

L lower
L upper
HR lower
HR upper
2n t

30

20

10

0
0.0

0.2

0.4

0.6

0.8

1.0

tn

I. I NTRODUCTION
Figure 1. Previous bounds on | Dt ( X )|. [L] marks the bounds proven by
Levenstein [4], and [HR] marks the bounds by Hirschberg et. al [2]. Also
plotted is the naive bound 2n−t which is the possible number of binary strings
of length n − t. This graph shows an example for the case n = 120, and
r = 24. All graphs are shown on a logarithmic scale.

{0, 1}n

Let X ∈
be a binary string of length n, and let
t ≤ n be a parameter. In this work, we study the size of the
set Dt ( X ) of subsequences of X that can be obtained from X
via t deletions. The set Dt ( X ) and its size play a major role
in the design and analysis of communication schemes over
deletion channels, i.e., channels in which characters of the
transmitted codeword may be deleted, [3]–[5], [7], [8], [10].
The analysis of Dt ( X ) is challenging as the number of
subsequences of a string X obtained by deletions does not
depend only on its length n and the number t of deletions, but
also strongly depends on its structure. For example, Dt (0n ) is
of size 1 and equals the single string 0n−t , while there exist
strings X for which Dt ( X ) is of size exp(Ω(n − t)). Clearly,
| Dt ( X )| is at most 2n−t (as after t deletions we remain with
a binary string of length n − t).
In his work from 1966, Levenshtein [4] shows (as described
in [5]) that the number of subsequences | Dt ( X )| strongly
depends on the number of runs in the string. Here, a run is a
maximal sequence of the same character, and the number of
runs in a given string is denoted r (·). For example r (0n ) = 1
while r (0101 . . . 01) = n. Speciﬁcally, Levenshtein [4] proves
that
r(X ) − t + 1
t

≤ | Dt ( X )| ≤

Relatively recently, Hirschberg and Regnier [2] revisit the
analysis of [1] and obtain an explicit upper bound together
with an improved lower bound of the form
t

∑
i =0

t

≤ | Dt ( X )| ≤

∑
i =0

n−t
.
i

Mercier et al. [9] study the setting of small values for t, and
present explicit formulas for Dt ( X ) for t ≤ 5. However for
general values of t the problem remains open. Several of the
results above generalize also to arbitrary alphabets.
The bounds of [1], [2], [4] are depicted in Figure 1 for the
case n = 120 and r = r ( X ) = 24 as a function of t. The
lower bounds of both [2] and [4] depend on the number of
runs r ( X ); and it holds that the lower bound of [2] is superior
(i.e., larger) to that of [4]. The upper bound of [4] depends
on r ( X ), while that of [1], [2] does not. Thus each bound is
stronger (i.e., smaller) for certain settings of parameters r and
t. Roughly speaking, the upper bounds of [1], [2] are stronger
than those of [4] for large values of r and t; while the opposite
is true for small r and t.

r(X ) + t − 1
.
t

Bounding | Dt ( X )| is addressed by Calabi and Hartnett [1],
which show that the maximal number of subsequences is
obtained from certain strings X, denoted cyclic strings Cn ,
in which r ( X ) = | X |. [1] devise a recursive expression for
| Dt (Cn )|, to obtain the bound
r(X ) − t + 1
t

r(X ) − t
i

A. Our results and proof techniques
In this work, we continue the study of Dt ( X ) and present
improved upper and lower bounds to those described above.
Our analysis is two fold. We start by studying the family of
strings X for which r = r ( X ), and identify the extremal strings

≤ | Dt ( X )| ≤ | Dt (Cn )|.

* Work supported in part by ISF grant 480/08.

1

log

log

100

60

L
80

50

HR lower
Our lower

60

40
30

40

L upper
HR upper
Our upper

20
20

0
0.0

10

0.2

0.4

0.6

0.8

1.0

tn

0.2

Figure 2.
Comparision of lower bounds. Our lower bound based on
unbalanced strings [Theorem VI.2], compared to the previous known bounds.
[L] marks the lower bound proven by Levenstein [4]. [HR] marks the lower
bound proven by Hirschberg et. al [2]. This graph shows an example for the
case n = 300, and r = 200. The logarithmic presentation emphasizes that we
obtain an exponential multiplicative improvement.

0.6

0.8

1.0

tn

Figure 3. Comparison of upper bounds. Our upper bounds based on balanced
strings [Theorem IV.1], compared to the previous best known bounds. [L]
marks the upper bound proven by Levenstein [4]. [HR] marks the upper bound
proven by Hirschberg et. al [2]. This graph shows an example for the case
n = 120 and r = 24 as a function of t (in logarithmic scale).

bound improves on those previously known by an exponential
multiplicative factor of roughly 2t−r/3 .
To address our improved upper bounds, we ﬁrst present
a recursive formula for the computation of | Dt ( Br )|. We
then extract a closed form solution to our recursive deﬁnition
which yields an exact expression for | Dt ( Br )|. For example,
a numerical comparison of | Dt ( Br )| with the upper bounds
previously known is depicted in Figure 3 for the value of
n = 120 and r = 24 as a function of t. We note that the expression we obtain for | Dt ( Br )| involves several summations
of certain combinatorial expressions. An asymptotic analysis
of our expression is left open in this work and is subject to
future research.

in this family with respect to the number of subsequences.
Speciﬁcally, for every r, we identify two r-run strings, referred
to as the balanced r-run string Br and the unbalanced r-run
string Ur such that for every X it holds that

| Dt (U|r(X )| )| ≤ | Dt ( X )| ≤ | Dt ( B|r(X )| )|.

0.4

(1)

Loosely speaking, the string Ur = 0101 . . . 01n−r+1 is the rrun string in which each run is exactly of size 1, except the
last run which is of size n − t + 1, and is thus referred to as
‘unbalanced’ (in the run lengths). The balanced string Br =
0n/r 1n/r 0n/r 1n/r . . . 1n/r 0n/r is the r-run string in which each
and every run is of equal length n/r.
To obtain Equation (1), we show that any r-run string
X can be transformed into the string Ur (alternatively Br )
via a series of operations that are monotonic with respect
to the number of subsequences. The modiﬁcations we study
include a balancing operation, in which given X we shorten
the length of one of its runs while increasing the length of
another; a ﬂipping operation, in which a preﬁx or sufﬁx of X is
replaced by it complement; and an insertion operation in which
characters are added to X (see Figures 4(a), 4(b) and 4(c)). A
delicate combination of these (and other) operations enable us
to establish Equation (1). The modiﬁcations we study and their
analysis shed light on the properties of binary strings under
the deletion operation and may be of independent interest. We
note that for the extreme case of r = n, our unbalanced string
Un is exactly the cyclic string Cn ; thus we are consistent with
the result of [1].
We then turn to obtain analytic expressions for | Dt (Ur )|
and | Dt ( Br )| of Equation (1). Our expressions are at least as
good as previous bounds in [1], [2], [4] as they are based on
speciﬁc r-run strings (Ur and Br ), and for a large range of
parameters our bounds are strictly tighter. For our improved
lower bound, we devise a recursive expression for | Dt (Ur )|
and present a closed form formula for its evaluation. We then
perform an asymptotic evaluation of | Dt (Ur )| (assuming large
r). A comparison of our improved lower bound with that
previously known is depicted in Figure 2. Speciﬁcally, we
show that for values of t which are greater than r/3 our lower

B. Structure
The remainder of the paper is organized as follows. In
section II we present the set of structural operations and
tools we use for comparing and bounding the number of
subsequences obtained via deletion. This section includes our
balancing, ﬂipping, and insertion modiﬁcations. In Section III,
we study our ﬁrst family of balanced strings, and show that
(for any given number of runs r and deletions t) they have the
largest number of subsequences under deletion. In Section IV,
we analyze the number of subsequences of balanced strings
and in such obtain our upper bound. In Section V, we present
our second family of unbalanced strings, and prove that they
have the least number of subsequences under any t deletions.
Finally, we prove our lower bound by analyzing the number
of subsequences of unbalanced strings in Section VI. Due to
space limitation, full proofs of our claims are omitted and can
be found in the full version of our work [6].
II. T OOLS FOR ANALYZING THE NUMBER OF
SUBSEQUENCES

The number of subsequences of a string obtained by deletions highly depends on the string’s structure. In order to
determine the number of subsequences for a given number
of deletions, it is not enough to know the length of the
string, and not even the number of the string’s runs. Inspired
by previous works, we looked for tools that will enable us
to analyze the number of subsequences. In this section we

2

present these tools. In subsection II-A we present a method
of counting the number of subsequences by partitioning the
set of subsequences into subsets characterized by their preﬁx,
thus forming a recursive relation. In subsection II-B we
present basic operations on strings that always increase (or
decrease) the number of subsequences under deletion. Such
basic operations allow comparison between the number of
subsequences of strings, and are very useful for ﬁnding bounds
on the number of subsequences.
S( x1 , . . . , xr ) denotes a binary string with r runs, in which
the ith run is of length xi and the ﬁrst symbol is 0, E.g.
S(1, 2, 3) = 011000. We will use the notation n × a to
indicate n sequential runs of length a, E.g. S(2, 3 × 1, 2) =
S(2, 1, 1, 1, 2) = 0010100. Dt ( x1 , . . . , xr ) will be used as
short form for Dt (S( x1 , . . . , xr )). Cn denotes the binary
cyclic string S(n × 1). We assume the following conventions:
n
k
∑i= j ai = 0 when j > k. ( i ) = 0 when i < 0 or i > n.
| Dt ( X ) = 1| for t = | X | and t = 0, and | Dt ( X ) = 0| for
t > | X |.

1) Insertion operation [Figure 4(a)]: Hirschberg et al. [2]
showed that inserting a symbol anywhere in the middle of a
string always increases the number of subsequences.
Lemma II.4.[Insertion increases the number of subsequences]
[2] For any Σ-strings U, V and any σ ∈ Σ, | Dt (UV )| ≤
| Dt (UσV )|.
2) Deletion chain rule: The following lemma states a
simple useful chain rule.
Lemma II.5. For any Σ-string U, and any V ∈ Dt (U ),
Dt ′ ( V ) ⊆ Dt + t ′ (U ) .
3) Flipping operation: We now addresses a ﬂipping operation, depicted in Figure 4(b). Using our ﬂipping operation, it
is not hard to present an alternative proof for the maximality
of Cn w.r.t. the number of subsequences. Proofs appear in [6].
Lemma II.6.[Flipping increases number of subsequences] For
any binary strings U, V and for any bit σ, | Dt (UσσV )| ≤
| Dt (UσσV )|, where a denotes the string a in which 0’s are
ﬂipped to 1’s, and vice versa.

A. Partitioning the set of subsequences
We found the following lemma (from [2]) very useful. We
restate it here and derive a corollary for binary strings.

4) Balancing operation: [Figure 4(c)] Informally, we refer
to a string as balanced, if there is a low variability between
the length of the string’s runs. A balancing operation is one
that decreases that variability, E.g. shortening a long run and
increasing the length of a short run. The following lemma
states terms in which balancing a string increases the number
of its subsequences, and it is used later to prove maximality
of string families. Proof can be found in [6].

Lemma II.1. [2] For any Σ-string X:
( a)

(i) Dt ( X ) = ∑ a∈Σ Dt ( X ), where for a set G of strings
G ( a) denotes all members of G starting with a.
( a)
(ii) Dt ( X ) = aDt+1− f ( a) ( X [ f ( a) + 1 : n]), where f ( a)
denotes the index of the ﬁrst appearance of a in X, and
X [i : j] denotes the substring xi . . . x j of X.

Lemma II.7.[Balancing increases the number of subsequences] For X = S( x1 , . . . , xr ), and for any t > 0, 1 ≤
i < j ≤ r s.t. xi − x j > 1, and { xi+1 , . . . , x j−1 } is symmetric (i.e. x2 = xr−1 , x3 = xr−2 ,. . . ), | Dt ( x1 , . . . , xr )| ≤
| Dt ( x1 , . . . , xi−1 , xi − 1, xi+1 , . . . , x j−1 , x j + 1, x j+1 , . . . , xr )|.
In other words, decreasing the i-th run by 1, and increasing the
j-th run by 1 can only increase the number of subsequences.

Using Lemma II.1 we derive the following lemma for binary
strings. Proof can be found in full version [6].
Lemma II.2.
(i) For any binary string X, s.t. X = σi ǫ j Y for some
i, j > 0 and Y ∈ {σ, ǫ}∗ , | Dt ( X )| = | Dt (σi−1 ǫ j Y )| +
| Dt−i (ǫ j−1 Y )| for any t < | X |.
(ii) Symmetrically, | Dt (Yǫ j σi )|
=
| Dt (Yǫ j σi−1 | +
j−1 )|.
| Dt−i (Yǫ
Applying Lemma II.2 repeatedly, we get:

Lemma II.3. For any binary string S( x1 , . . . , xr ), s.t. n =
∑r=1 xi :
i
x1
(i) | Dt ( x1 , . . . , xr )| = | Dt ( x2 , . . . , xr )| + ∑i=1 | Dt−i ( x2 −
1, x3 , . . . , xr )| + 1|t>n− x1 .
(ii) Symmetrically, | Dt ( x1 , . . . , xr )| = | Dt ( x1 , . . . , xr−1 )| +
xr
∑i=1 | Dt−i ( x1 , . . . , xr−2 , xr−1 − 1)| + 1|t>n− xr .

(a) Insertion

(b) Flip

B. Basic operations on strings
In the following sections we will present families of strings,
for which the number of subsequences can be explicitly
calculated. In order to use these families of strings to devise
bounds on the number of subsequences for general strings, we
use basic operations on strings, which allows us to transform
one string into another, while monotonically increasing (or
decreasing) the number of their subsequences. In this section
we list such basic operations.

(c) Balance
Figure 4. Basic operations on strings. In all diagrams the lower string has
more subsequences under any number of deletions.

3

TABLE I
E XAMPLE OF A BALANCING PROCESS AS DEFINED IN THE PROOF OF
T HEOREM III.1
i
0
1
2
3
4
5
6

Xi
000111111100100
000111111000100
000111110000100
000111110001100
000111100001100
000111100011100
000111000111000

runs
3,7,2,1,2
3,6,3,1,2
3,5,4,1,2
3,5,3,2,2
3,4,4,2,2
3,4,3,3,2
3,3,3,3,3

2
∑ xi
67
59
55
51
49
47
45

TABLE II
E XAMPLE OF A BALANCING PROCESS AS DEFINED IN THE PROOF OF
T HEOREM V.1
i
0
1
2
3
4
5

D6 ( Xi )
43
56
63
85
92
102
105

Xi
0011100111100
0011101111100
0011101111110
0011011111110
0010111111110
0101111111110
1111111110101

runs
2,3,2,4,2
2,3,1,5,2
2,3,1,6,1
2,2,1,7,1
2,1,1,8,1
1,1,1,9,1
9,1,1,1,1

D5 ( Xi )
60
38
26
20
14
10
8

Lemma IV.1.[Recursive expression for b′ ]

0
if t < 0 or t ≥ kr



1 + ∑k−1 b′ (r − 1, t − i ) if k(r − 1) ≤ t < kr

i =1




b′ (r, t) =
 b′ (r − 2, t − k)+




k −1

otherwise




∑ b′ (r − 1, t − i)

III. BALANCED STRINGS
In this section we deﬁne the family of strings named
Balanced strings. We call a string balanced, if all the runs of
symbols in the string are of equal length. Formally, we denote
by Br,k the binary string of length rk, with r runs, each of
length k. E.g. B3,4 = S(4, 4, 4) = 000011110000. We prove
that of all strings with length rk and r runs, the balanced string
has the maximal number of subsequences, under any number
of deletions. The main idea of the proof is that any such
string X can be transformed into Br,k by repeatably applying
the Balancing Lemma II.7. Each such step can only increase
the number of subsequences, so if such a series of balance
operations can be found, the assertion is proved. An example
of the balancing process we use is displayed in Table I.

i =0

B. Solving the recursion

When calculating b′ (r, t) we expand the recursive expression iteratively, until all b′ expressions reach their boundary
condition, and get zero value. The only positive contribution
k −1
in this sum is from the 1 in the second case: 1 + ∑i=1 b′ (r −
1, t − i ). By counting how many times this value is added,
we can get the explicit value of b′ (r, t). Our expression for
b′ (r, t) involves several nested summations, and due to space
limitations full details of our proof appear in [6].
a
For integers ∆r and ∆t, setting b = ( a+b−1), let
b

Theorem III.1. Let X = S( x1 , . . . , xr ), n = ∑r=1 xi , and k =
i
n/r. If k is an integer, then | Dt ( X )| ≤ | Dt ( Br,k )|.
We derive the following corollary for the case where n is
not divisible by r.

#P0 (∆r, ∆t) =

⌊ ∆t ⌋
k

∑ (−1)i

i =0

Corollary III.1. Let X = S( x1 , . . . , xr ), n = ∑r=1 xi , and
i
¯
k = n/r. Dt ( X ) ≤ | Dt ( Br,⌈k⌉ )|.
¯

∆r
i

∆r
∆t − ik

.

Theorem IV.1. | Dt ( Br,k )| = b′ (r, t) + b′ (r − 1, t − k), where
t
i
(i) b′ (r, t) = ∑i=0 #P(r − ⌊ k ⌋ − 1, t − i ), and
⌊ ∆t ⌋

k
(ii) #P(∆r, ∆t) = ∑ j=0 (∆rj− j)#P0 (∆r − 2j, ∆t − jk).

IV. O UR U PPER BOUND

Using balanced strings we achieve upper bounds on the
number of subsequences of r-run strings. Our bound of Theorem IV.1 is depicted in Figure 3.

In this section we present an upper bound for the number
of subsequences of a string obtained by deletions. We develop
a recursive expression for the exact number of subsequences
of a balanced string. We then ﬁnd an explicit form for this
expression, and use it to obtain a tight upper bound on the
number of subsequences of a general string.

V. U NBALANCED STRINGS
In the section we deﬁne a second family of strings, named
unbalanced strings. We call a string unbalanced, if all of the
runs of symbols in the string are of length 1, except for one
(i )
run. Let Un,r be a binary string of length n with r runs, in
which all runs are of length 1, except for the ith run which is of
(1)
length n − r + 1. We notice via symmetry that | Dt (Un,r )| =
(r )
(1)
(r )
| Dt (Un,r )|, and deﬁne u(n, r, t) = | Dt (Un,r )| = | Dt (Un,r )|.
We will show that these extreme cases have the least number
of subsequences among all r-run strings X. First we prove
( j)
that there exists j s.t. | Dt ( X )| ≥ | Dt (Un,r )|, for all t. This is
obtained by noticing that the balancing operation of Lemma

A. Recursive expression
′
For all r, k , Let Br,k be the string obtained from Br,k
′
by removing the ﬁrst symbol. E.g. B3,5 = S(4, 5, 5) =
00001111100000. Fix k, and let b(r, t) = | Dt ( Br,k )| and
′
b′ (r, t) = | Dt ( Br,k )|. From Lemma II.2 we have that
′
′
| Dt ( Br,k )| = | Dt ( Br,k )| + | Dt−k ( Br−1,k )|. Using Lemma II.3
carefully we get

4

II.7 can be used in the other direction, as an unbalancing
operation. To complete the proof we show that for any j,
( j)
| Dt (Un,r )| ≥ u(n, r, t). Details in [6]. An example of the
unbalancing process is displayed in Table II.

VII. C ONCLUDING REMARKS
In this work we present several operations on binary
strings which are monotone with respect to the number of
subsequences under deletion. We show, using the operations
studied, that the balanced r-run string Br,k and the unbalanced
one Un,r obtain the maximum and respectively minimum
number of subsequences under deletion. By devising recursive
expressions, we present a precise analysis of the number of
subsequences of both Br,k and Un,r under t deletions. For our
lower bound, we quantify our expression asymptotically. A
direct asymptotic analysis of our expression for | Dt ( Br,k )| is
left open in this work and is subject to future research.
To better express our improved upper bound one may use
the connection between the problem of computing the number
of subsequences of the balanced string Br,k to the closely
related combinatorial problem of determining its number of
deletion patters. Assuming k = n/r is integral, the deletion
patterns Pt ( Br,k ) of Br,k are exactly the set of integer solutions
to the equation ∑r=1 yi when yi ∈ [0, k]. Notice the restriction
i
that each of the yi ’s are bounded by k. Deletion patters
in general, and those of Br,k , have been studied in [9],
[11], in which certain inclusion exclusion type summations
are presented to characterize their size, along side certain
asymptotic estimations. It is immediate that one can bound
the size of Dt ( Br,k ) by its analog Pt ( Br,k ) and in such
quantify our improvement over previous bounds. Speciﬁcally,
this implies for values t which are close to n/2 (an intriguing
setting for t in the context of deletion channels [3]) and for
sufﬁciently large r and k; that | Pt ( Br,k )|, and thus our bound
of | Dt ( Br,k )|, improves on those previously known [1], [2],
[4] by an exponential multiplicative factor of 2Ω(r) . Details
appear in [6].

Theorem V.1. [Unbalanced strings have the least subsequences] For X = S( x1 , . . . , xr ), n = ∑r=1 xi , and any
i
1 ≤ t ≤ n, | Dt ( X )| ≥ u(n, r, t).
VI. O UR LOWER BOUND
In this section we develop a recursive expression for the
number of subsequences of an unbalanced string by deletions.
We ﬁnd an explicit form for this expression, and use it to
obtain a lower bound on the number of subsequences of a
general string. In addition, we show the improvement that our
lower bound provides. Proof of all claims appear in [6].
A. Recursive expression
Using Lemma II.2 (and other observations) we obtain
Lemma VI.1. For all 0 < r ≤ n, 0 < t < n,

r

2




d(n, t)
u(n, r, t) =





 u(n − 1, r, t)+


d(r − 2, t + r − n − 1)

if r = 1, 2
if r > 1 and t = n − 1
if n = r

otherwise

t
Where d(r, t) = | Dt (Cr )| = ∑i=0 (r−t), as proved in [2].
i
We assume d(n, 0) = 1, and for t < 0, d(n, t) = 0.

B. Solving the recursion
Sequentially expanding u(n, r, t) using Lemma VI.1, until
reaching one of the boundary conditions, we have:

R EFERENCES

Theorem VI.1. [Closed form formula for u(n, r, t)] For t < n
and 2 < r ≤ n:
t −2
(i) when r > t: u(n, r, t) = d(r, t) + ∑i=t+r−n−1 d(r − 2, i );
r −3
(ii) when r ≤ t: u(n, r, t) = 2 + ∑i=t+r−n−1 d(r − 2, i ).

[1] L. Calabi and W.E. Hartnett. Some general results of coding theory with
applications to the study of codes for the correction of synchronization
errors. Information and Control, 15(3):235 – 249, 1969.
[2] D. S. Hirschberg and M. Regnier. Tight bounds on the number of string
subsequences. Journal of Discrete Algorithms, 1(1):123–132, 2000.
[3] I. A. Kash, M. Mitzenmacher, J. Thaler, and J. Ullman. On the zeroerror capacity threshold for deletion channels. CoRR, abs/1102.0040,
2011.
[4] V. I. Levenshtein. Binary codes capable of correcting deletions, insertions, and reversals. Soviet Physics Doklady, 10(8):707–710, 1966.
[5] V. I. Levenshtein. Efﬁcient reconstruction of sequences from their
subsequences or supersequences. Journal of Combinatorial Theory,
Series A, 93(2):310–332, 2001.
[6] Y. Liron and M. Langberg. A characterization of the number of
subsequences obtained via the deletion channel. Manuscript, available
on arXiv.org.
[7] H. Mercier. Communication over Channels with Symbol Synchronization
Errors. PhD thesis, The University of British Columbia, 2008.
[8] H. Mercier, V.K. Bhargava, and V. Tarokh. A survey of error-correcting
codes for channels with symbol synchronization errors. IEEE Communications Surveys and Tutorials, 12(1):87–96, 2010.
[9] H. Mercier, M. Khabbazian, and V. K. Bhargava. On the number of
subsequences when deleting symbols from a string. IEEE Transactions
on Information Theory, 54(7):3279–3285, 2008.
[10] M. Mitzenmacher. A survey of results for deletion channels and related
synchronization channels. Probability Surveys, 6:1–33, 2009.
[11] J. Ratsaby. Estimate of the number of restricted integer-partitions. Appl.
Anal. Discrete Math., 2:222–233, 2008.

The results of Theorem V.1 together with Theorem VI.1
lead to the following:
Theorem VI.2.[Lower bound on the number of subsequences]
For all t < n, 2 < r ≤ n and any r-run string X

| Dt ( X )| ≥ d(r, t) +

min(t−2,r −3)

∑

i = t +r − n −1

d(r − 2, i )

We compare our result to the previous result by Hirschberg
t
et al. | Dt ( X )| ≥ d(r, t) = ∑i=0 (r−t) [2]. We limit the
i
comparison to t ≤ r as for t > r the previous bound gives 0.

1
Lemma VI.2. Let α = t/r. for α ∈ [ 3 + 1 , 1) and for t ≤
r
√

n − r + 1,

u(n,r,t)
d(n,t)

=Ω

1
1− α r ( α − 3 )
rα 2

.

For large n satisfying n > t + r, the improvement that the
bound in Theorem VI.2 gives over the result in [2] depends
on the ratio between r and t. We depict our improved results
in Figure 2.

5

