Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Thu May 10 15:40:28 2012
ModDate:        Tue Jun 19 12:56:17 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      419863 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569565667

An Analytic Upper Bound on T-Complexity
Ulrich Speidel

T. Aaron Gulliver

Department of Computer Science
The University of Auckland
Private Bag 92019
Auckland, New Zealand
Email: ulrich@cs.auckland.ac.nz

Department of Electrical and Computer Engineering
University of Victoria
P.O. Box 3055, STN CSC
Victoria, BC, V8W 3P6 Canada
Email: a.gulliver@ieee.org

T-codes have the special property that their T-preﬁxes and
T-expansion parameters can be recovered from any of their
longest codewords xa. These longest codewords are unique
ˆ
for each code and have the form

Abstract—The Titchener T-complexity CT of a string has applications in, e.g., randomness testing, event detection and similarity
comparison. Like the Lempel-Ziv production complexity, the
upper bound of CT is demonstrably not a linear function of
the string length. Knowledge of the bound for a given length is
however required in order to convert CT into a measure with
linear upper bound such as Titchener’s T-information. For this
reason, the upper bound of CT has been investigated before by
several authors, with various asymptotic solutions proposed. We
present a new analytic closed-form asymptotic upper bound for
CT based on the Hurwitz-Lerch zeta function.

xa = pi ki pi−1 ki−1 . . . p2 k2 p1 k1 a, a ∈ A,
ˆ

such that x uniquely identiﬁes the set. Moreover, for each ﬁnite
ˆ
string x, there exists a unique T-code whose codewords are xa
ˆ
ˆ
for a ∈ A, i.e., the mapping between T-codes and ﬁnite strings
is bijective. An algorithm that derives the pi and ki for any
given x is referred to as T-decomposition. An O(|x| log |x|)
ˆ
version of the algorithm exists and has been implemented [8].
(k1 ,k2 ,...,kn )
Titchener [5] deﬁned the T-complexity CT of A(p1 ,p2 ,...,pn )
(and, by inference, that of x) as
ˆ

I. I NTRODUCTION
Let A be a ﬁnite alphabet and let A∗ denote the set of
all ﬁnite strings over A. For x, y ∈ A∗ , let xy denote the
concatenation of x and y. For α ∈ IN and the empty string λ,
let xα denote the concatenation of α copies of x, with x0 = λ.
Titchener’s T-codes [3], [4] are variable length codes constructed from A in i ∈ IN via a recursive copy and append
process called T-augmentation. Starting with A as a trivial Tcode, T-augmentation is deﬁned by the following recurrence
()
(k1 ,k2 ,...,ki )
relation for A() = A, pi+1 ∈ A(p1 ,p2 ,...,pi ) , and ki+1 ∈ IN+ :

n
(k ,k ,...,k )

1 2
n
x
CT A(p1 ,p2 ,...,pn ) = CT (ˆa) =

)

(k ,k ,...,k )

(k ,k ,...,k )

j=0
k

i+1
∪{pi+1

+1

}

(3)

1 2
n
using the ki used in the construction of A(p1 ,p2 ,...,pn ) (or
recovered by T-decomposition of x). CT represents the number
ˆ
of bits required to address the state space of a T-code decoder,
i.e., the log of the number of internal nodes in the decoding
(k1 ,k2 ,...,kn )
tree for A(p1 ,p2 ,...,pn ) . Titchener showed that the upper bound
for CT is not linear in |ˆ|. He also conjectured on the basis
x
of empirical evidence that the logarithmic integral [1] was
asymptotically equivalent to the upper bound of CT .
This has since been revisited by Titchener et al. [9], Speidel [10], Hamano and Yamamoto [12], Hamano [13], and
Clark and Teutsch [14].
In this paper, we discuss the background of some of their
results and present a new analytic asymptotic bound based on
the expansion of the Hurwitz-Lerch zeta function [7].

1 2
i
{pj s|s ∈ A(p1 ,p2 ,...,pi ) \{pi+1 }}
i+1

=

log2 (ki + 1),
i=1

ki+1
(k ,k ,...,k

1 2
i+1
A(p1 ,p2 ,...,pi+1 )

(2)

(1)

(k ,k ,...,k )

1 2
i
where A(p1 ,p2 ,...,pi ) denotes the T-code (set) after i Taugmentation (TA) steps. pi+1 is called the (i + 1)th Tpreﬁx and ki+1 is referred to as the (i + 1)th T-expansion
parameter. T-augmentation may also be visualised graphically
(k1 ,k2 ,...,ki )
as copying the decoding tree of A(p1 ,p2 ,...,pi ) a total of
ki+1 + 1 times and connecting the copies to each other via
the codeword (leaf node) pi+1 . The resulting tree is then that
(k1 ,k2 ,...,ki+1 )
of A(p1 ,p2 ,...,pi+1 ) . The number of T-augmentation steps i is

II. A PPROACHING THE U PPER B OUND

(k1 ,k2 ,...,ki+1 )
A(p1 ,p2 ,...,pi+1 )

The upper bound may be approached in two ways: as the
shortest |ˆa| for a given CT , or as the largest CT for a given
x
|ˆa|. The former route was chosen by all authors above, and
x
also the one chosen for deriving our result here (although,
strictly speaking, one ought to refer to the problem as the
lower bound on string length for a given T-complexity). This
route is assisted by a number of conjectures which have at
times been supported by informal arguments, but may also be
formalised by the following theorems.

called the T-augmentation level;
is thus a code
at T-augmentation level i + 1.
If all ki+1 = 1 in a series of TAs, we write the code as
A(p1 ,p2 ,...,pi ) and refer to the code and the TA sequence as
simple. If x ∈ A(p1 ,p2 ,...,pi ) =⇒ |x| ≥ |pi+1 |, the code and
the sequence are said to be minimal, and strictly minimal if
|pi+1 | ≥ |pi | for all i. If they are both simple and minimal,
they are said to be systematic if x ∈ A(p1 ,p2 ,...,pi ) =⇒ |x| ≥
|pi+1 |.

1

(k ,k ,...,k

)

1 2
i−1
Theorem 2.1: Consider a T-code A(p1 ,p2 ,...,pi−1 ) and two

the T-preﬁxes are applied in increasing order of length. We
(k1 ,k2 ,...,kn )
thus obtain an A(p1 ,p2 ,...,pn ) with the desired property.
Theorem 2.4: A T-code C whose longest codewords xa are
ˆ
the shortest for a given CT does not contain codewords shorter
than the longest T-preﬁx, i.e., C is minimal.
Proof: Presume that C is not minimal. Then there exists a
codeword w ∈ C that is shorter than at least one of the Tpreﬁxes in the construction of C. The proof of Theorem 2.3
(k1 ,k2 ,...,kn )
implies that there exists a T-code A(p1 ,p2 ,...,pn ) with the same
codeword and T-preﬁx length distribution as C such that pn is
the longest T-preﬁx and that contains a word w with |w | =
(k1 ,k2 ,...,kn−1 )
|w| < |pn |. This means that w ∈ A(p1 ,p2 ,...,pn−1 ) as a TA
cannot generate new codewords that are shorter than the Tpreﬁx. Thus, we could use w in place of pn for the last TA,
and by (2) obtain longest codewords shorter than xa. Thus, C
ˆ
must be minimal.
The published literature to date also generally assumes that
the shortest |ˆa| for a given CT is achieved when the associx
ated T-code is systematic or concentrates on this case [9], [10],
[12], [13]. This assumption is naturally restricted, as ki = 1
in (3) implies that CT will be an integer.
In [11] the authors and Makwakwa derived a number of
results which are not based on this assumption. The following
theorem is a partial summary of these results and is given here
without proof:
Theorem 2.5:

(k1 ,k2 ,...,ki−1 )
distinct codewords w1 , w2 ∈ A(p1 ,p2 ,...,pi−1 ) . Consider now
(k1 ,k2 ,...,ki−1 )
two successive TAs of A(p1 ,p2 ,...,pi−1 ) with two T-expansion
parameters κ1 and κ2 such that the T-preﬁxes pi and pi+1

are chosen from {w1 , w2 }, respectively, and the T-expansion
parameter associated with w1 is κ1 and that associated with
w2 is κ2 . Then
(k ,k ,...,k

,κ ,κ )

(k ,k ,...,k

,κ ,κ )

1 2
i−1
1 2
i−1
CT A(p1 ,p2 ,...,pi−1 ,w1 ,w22 ) = CT A(p1 ,p2 ,...,pi−1 ,w2 ,w11 )
2
1

(k ,k ,...,k

,κ ,κ )

1 2
i−1
and the codeword length distributions of A(p1 ,p2 ,...,pi−1 ,w1 ,w22 )
1

(k ,k ,...,k

,κ ,κ )

1 2
i−1
and A(p1 ,p2 ,...,pi−1 ,w2 ,w11 ) are the same.
2
Proof: CT depends on the T-expansion parameters only, and
all we do here is swap two terms in the sum in (3). The
codeword length distributions in both cases are based on the
(k1 ,k2 ,...,ki−1 )
same set A(p1 ,p2 ,...,pi−1 ) . The ﬁnal sets in each case result from

(k ,k ,...,k

,κ ,κ )

1 2
i−1
applying (1) twice. In the ﬁrst case, A(p1 ,p2 ,...,pi−1 ,w1 ,w22 ) , we
1
get the following subsets of codewords for 0 ≤ κ ≤ κ1 and
0 ≤ κ ≤ κ2 unless stated otherwise.
κ
1) Codewords from the ﬁrst TA of the form w1 s|s ∈
(k1 ,k2 ,...,ki )
A(p1 ,p2 ,...,pi ) \{w1 , w2 }. In the second TA, these turn

(k ,k ,...,k

)

1 2
i−1
κ
κ
into w2 w1 s with s ∈ A(p1 ,p2 ,...,pi−1 ) \{w1 , w2 }. Note
that the codeword distribution of this subset would be
the same if we ﬁrst T-augmented with w2 and κ2 and
then with w1 and κ1 .
κ
2) Codewords from the ﬁrst TA of the form w1 w2 . In
the second TA, these turn into codewords of the form
κ
κ
w2 w1 w2 with κ > 0. This subset has the same
codeword length distribution as the set of codewords of
κ
κ
the form w2 +1 w1 with κ > 0.
κ
3) The codeword w1 1 +1 from the ﬁrst TA, which gives rise
κ
κ
to the codewords w2 w1 1 +1 in the second TA.
κ2 +1
4) The codeword w2
from the second TA.
The union of the last three of these subsets with the string
k
k
κ
κ
w2 2 +1 w1 1 +1 and the empty string can be written as w2 2 w1 1
with 0 ≤ k1 ≤ κ1 + 1 and 0 ≤ k2 ≤ κ2 + 1, respectively. Note
that the codeword distribution of this union would also be the
same if we ﬁrst T-augmented with w2 and κ2 and then with w1
κ
κ
κ
κ
and κ1 and used w2 1 +1 w1 2 +1 instead of w2 2 +1 w1 1 +1 . Thus,
the codeword length distribution is invariant under a change
in the order of the T-augmentations.
Corollary 2.2: The length of the longest codewords and the
T-complexity of the code / longest codewords are invariant
under a change in the order of the T-augmentations.
N.B.: This follows immediately from the fact that any change
in the order of the TAs can be reduced to a series of pair-wise
swaps of TAs, to each of which the previous theorem can be
applied.
Theorem 2.3: For any T-code C, there exists a T-code
(k1 ,k2 ,...,kn )
A(p1 ,p2 ,...,pn ) with the same T-complexity and codeword
length distribution as that of C, such that |pi | ≤ |pj | for all
i < j.
Proof: by construction. Given C, we can apply a series of
pair-wise swaps in accordance with Theorem 2.1 such that

•
•

•

No two distinct codewords in a T-code belong to the same
cyclic equivalence class (CEC)1 .
For any given non-periodic CEC, any T-code C either
has a T-preﬁx or a codeword from this CEC, or contains
codewords that in combination yield a string from that
CEC (i.e., such a string can become a codeword as a
result of further TAs).
Any codewords from periodic CECs are generated by the
last term in (1).

Theorem 2.6: For any positive integer c, a systematic Tcode C with longest codewords of the form xa exists such
ˆ
ˆ
that CT (C) = c and |ˆa| ≤ |x a| for any other T-code C
x
ˆ
with CT (C ) = c and longest codewords of the form x a.
Proof: Theorem 2.4 ensures that the minimality criterion for
C can be met. For a minimal C, there exists a minimal
length such that |pi | ≤ for all i and all codewords are of
length or longer. Equation (1) then implies that any further
codewords we can generate by T-augmenting C must be of
length 2 or longer, i.e., all possible codewords up to length
2 − 1 have already been created by the TA sequence that
generated C. By Theorem 2.5, all non-periodic codewords of
these lengths have already been generated, one for each nonperiodic cyclic equivalence class, and any such codeword up
1 The cyclic equivalence class of a string x is the set of all cyclic
permutations of the string, i.e., the set containing the string itself and all strings
that can be constructed by (repeatedly) removing the last symbol and attaching
it to the front of the string, e.g., as in {0011, 1001, 1100, 0110}. The cyclic
equivalence class of x is called periodic/non-periodic if its cardinality is less
than/exactly |x|.

2

to length − 1 would have been used as a T-preﬁx. If a nonˆ
systematic C were to yield shorter x a for CT (C ) = c, this
could conceivably happen in one of two ways:

would negate the gain we just made. For u = 3, we have
6|pi | < 2 , which means we now lose both p2 and p4 .
i
i
Following the same argument as before, two substitutes
of length at least are required, and again any gains are
lost. A similar argument can be given for larger u.
ˆ
Thus, a non-systematic C cannot yield |x a| < |ˆa|, which
x
2
proves the theorem .
Systematic codes thus achieve the shortest |ˆa| for intex
ger CT . This result is not unexpected: It is much easier
to show that a T-expansion parameter of 1 and the choice
of one of the shortest codewords in the code as T-preﬁx

1) By using ki > 1, we might be able to create at least
one additional codeword w with |w| < in our TA
sequence. If we were to T-augment with w as part of
a minimal code C , we could “save” one codeword of
length , thereby shortening the longest codewords of
C by |w| − . By our argument above, the additional
w cannot be non-periodic because the number of nonperiodic codewords up to length 2 − 1 is limited by
the number of CECs for each length, and minimal TA
already guarantees a codeword for each non-periodic
CEC for all lengths less than , meaning that all possible
non-periodic codewords are already created in other
ways. So w would have to be periodic. As every Taugmentation creates exactly one periodic codeword, the
only difference that this could make is to the number
of periodic codewords that are smaller than and thus
eligible to be used as T-preﬁxes in place of a T-preﬁx of
length . The baseline ki = 1 case creates the codeword
p2 , which is part of x and always shorter than any
ˆ
i
conceivable w = pki +1 that we could create with a
i
ki > 1. If we were to use pki +1 with ki > 1 in such
i
a minimal TA sequence, p2 would not be created and
i
thus would not be available as a T-preﬁx, i.e., we would
have to substitute p2 in x by the longer string w – the
ˆ
i
opposite of what we are trying to achieve. Similarly,
any periodic codewords subsequently created as a result
of having pki +1 in the set would have lengths that
i
are multiples of |pki +1 |, which would each be longer
i
than the corresponding multiples of |p2 | that they might
i
replace. u|p2 | ≤ and v|pki +1 | ≤ also imply that
i
i
v ≤ u, i.e., such an attempt cannot increase the number
of codewords less than or equal to .
2) By having a ki = 2u −1 for some u > 1, and thus having
a single T-preﬁx contributing more than 1 to CT (C ) as
a simple TA would. However, this means an additional
ˆ
contribution of |pki −1 | = (ki − 1)|pi | to x a over the
i
systematic case. To “compensate” for this extra length,
we could drop u−1 T-preﬁxes of at most length that we
would need in the systematic case. This would require
ˆ
(2u −2)|pi | < (u−1) to yield a shorter x a. For u = 2,
we would need to drop one T-preﬁx of length , which
gives the condition 2|pi | < . This implies |p2 | < ,
i
i.e., p2 would have been a T-preﬁx in the simple case.
i
With ki = 3, we now lose this codeword. In order to
restore CT , we would have to substitute p2 by either
i
p4 or a codeword of length , whichever is shorter. If
i
|p4 | < , then p4 would have to be substituted by p8
i
i
i
or a codeword of length , and so on, i.e., we would
have to keep doubling the length of the substituting Tpreﬁx each time until it reaches or exceeds . At this
point, another codeword of at least length would have
to be substituted as a T-preﬁx to restore CT (C ). This

k

result in the maximal possible

n+1
CT (pn+1 x)−CT (ˆ)
ˆ
x
k

in a single

n+1
|pn+1 |
(k1 ,k2 ,...,kn )
T-code A(p1 ,p2 ,...,pn ) .

T-augmentation of an arbitrary
This
weaker result motivated many previous authors [9], [10], [12],
[13] to restrict their treatment to the systematic case. The proof
given here however means that this result applies to all TA
sequences as long as we restrict CT to integer values, which
lends further weight to the motivation for their work.
For integer CT , the systematic construction of the bound of
CT as a function of |ˆa| implies that it is piecewise linear,
x
with gradients from 1 to 1/ . This reﬂects the fact that each
additional simple T-augmentation with a T-preﬁx of length
adds to |ˆa| and 1 to CT . The width of the intervals over
x
which the bound is linear with gradient 1/j, for 1 ≤ j ≤ , is
given by jmj , where mj is the number of T-preﬁxes of length
j ≤ that can occur in a systematic TA sequence.
Theorem 2.5 implies that mj is related to the number Nc (j)
of cyclic equivalence classes (CECs) for j: As systematic TA
always generates one permutation of each non-periodic ﬁnite
string but not of every periodic string, mj is bounded below
by the number of non-periodic CECs for strings of length [6]
M (#A, j) =

1
j

µ(j/i)#Ai

(4)

i|j

where µ(m) is the M¨ bius function, which is 0 if m is not the
o
product of distinct primes, +1 if it is the product of an even
number of distinct primes, and −1 otherwise, with µ(1) = 1.
Similarly, mj is bounded above by the total number of CECs
for j [6]
1
N (#A, j) =
φ(j/i)#Ai
(5)
j
i|j

where φ(m) is Euler’s totient function, the number of integers
less than m and relatively prime to m. As M (#A, j) ≤
#Aj /j ≤ N (#A, j), asymptotically we have
mj ≈ #Aj /j.

(6)

Titchener et al. [9] arrived at (6) via a different path not
involving cyclic equivalence. The ﬁrst author of this paper
observed the relationship to cyclic equivalence in [10], however still requiring that the bounds for mj be computed
2 Note that this result has also been proven independently by Clark and
Teutsch [14].

3

xa. However, as we have seen above, the effect of nonˆ
systematic TA is restricted to producing different periodic Tpreﬁxes only. As their number is asymptotically negligible
compared to the available non-periodic codewords, the bound
should remain asymptotically tight.
Experimentally, the true convergence may be assessed
by comparison with the actual systematic bound, the
|ˆa|/ log2 |ˆa| bound, and Titchener’s empirical bound [5], up
x
x
to string lengths where computing the actual systematic bound
is feasible. For CT = 1, 000 under systematic TA of a binary
alphabet, we obtain |ˆa| = 11, 200. The |ˆa|/ log2 |ˆa| bound
x
x
x
yields 11, 200/ log2 11, 200 ≈ 833 here, i.e., just over 83% of
the actual value. Our bound for this length suggests ≈ 956
TAs, i.e., 95.6% of the actual value. Titchener’s empirical
bound formula using the logarithmic integral comes within
less than 0.1% of the actual value. For CT = 5, 000, we have
|ˆa| = 69, 439, and the values for the respective analytical
x
bounds reach 86.3% and 97.1%, with Titchener’s bound again
at more than 99.9% of the actual value. For CT = 10, 000,
we have |ˆa| = 150, 555, and 87.5% / 97.7% respectively.
x
Titchener’s bound predicts CT ≈ 10, 007.5 for this length.

numerically. Equation (6) is also used by Hamano and Yamamoto in [12] (see also Hamano [13]), who also note the
relationship to CECs but do not make use of it, instead deriving
their bound for binary strings through a differential equation
method. Asymptotically, the bounds or conjectured bounds
for CT derived in these papers are compatible and mirror
the fundamental form x/ log x of the Lempel-Ziv production
ˆ
ˆ
complexity [2]. Clark and Teutsch [14] on the other hand do
not consider asymptotics. They present a “big-O” bound for
CT and arbitrary alphabets as O(|ˆ| log2 log#A |ˆ|/ log2 |ˆ|.
x
x
#A x
III. A N A NALYTIC B OUND ON CT
From the interval widths jmj and (6), we can approximate
|ˆa| at the end of the th interval by a simple geometric series
x
sum
#A +1 − 1
.
(7)
|ˆa| ≈
x
#Aj =
#A − 1
j=0
Solving for + 1 and writing r = #A, we obtain
+ 1 = logr [(r − 1)|ˆa| + 1] ≈ logr [(r − 1)|ˆa|] .
x
x

(8)

CT (ˆa) is just the corresponding TA level, thus
x
mj ≈

CT (ˆa) =
x
j=1

j=1

rj
.
j

IV. C ONCLUSIONS
An analytic bound on the T-complexity was derived based
on the number of codewords available for use as T-preﬁxes.
It is asymptotically tight and applies to ﬁnite alphabets of
arbitrary cardinality. Both the bound and our considerations
regarding the choice of T-preﬁxes and T-expansion parameters
for minimizing the length of the longest codewords vindicate
the approach taken and the results obtained in previous publications by various authors. Numerically, the bound presented
here converges much faster than the |ˆa|/ log2 |ˆa| bound and
x
x
is easier / faster to compute numerically than the logarithmic
integral. Improvements to our bound leading to faster convergence are conceivable, e.g., through less coarse approximation
and the use of additional terms in the series expansion of Φ.

(9)

This can be written in terms of the Hurwitz-Lerch zeta function
Φ as [7]
CT (ˆa) ≈
x
≈

−r

+1

Φ(r, 1, + 1)
( + 2)r − ( + 1)
,
r +1
(1 − r)2 ( + 1)2

(10)

where the last line uses the ﬁrst two terms of the series
expansion of Φ. Substituting (8) for + 1 yields
(logr [(r − 1)|ˆa|] + 1)r
x
2 log2 [(r − 1)|ˆa|]
x
(1 − r)
r
logr [(r − 1)|ˆa|]
x
x
(1 − r)2 log2 [(r − 1)|ˆa|]
r
|ˆa|
x
logr [(r − 1)|ˆa|]
x
r|ˆa|
x
.
(11)
(r − 1) log2 [(r − 1)|ˆa|]
x
r

CT (ˆa) ≈ (r − 1)|ˆa|
x
x
−
=
+

R EFERENCES
[1] M. Abramowitz and I. A. Stegun, Eds., Handbook of Mathematical
Functions (Applied Mathematics Series 55), Washington, DC: National
Bureau of Standards, 1972.
[2] A. Lempel and J. Ziv, “On the complexity of ﬁnite sequences,” IEEE
Trans. Inf. Theory, vol. 22, no. 1, pp. 75–81, 1976.
[3] M. R. Titchener, “Digital encoding by means of new T-codes to provide
improved data synchronisation and message integrity,” IEE Proc.–
Computers and Digital Tech., vol. 131, no. 4, pp. 151–153, 1984.
[4] M. R. Titchener, “Generalized T-codes: Extended construction algorithm
for self-synchronizing variable-length codes,” IEE Proc.–Commun., vol.
143, no. 3, pp. 122–128, 1996.
[5] M. R. Titchener, “Deterministic computation of string complexity,
information and entropy,” in Proc. IEEE Int. Symp. on Inf. Theory,
Cambridge, MA, 1996, p. 326.
[6] K. Cattell, F. Ruskey, J. Sawada, M. Serra, and C. R. Miers, “Fast
algorithms to generate necklaces, unlabeled necklaces, and irreducible
polynomials over GF(2),” J. Algorithms, vol. 37, pp. 267–282, 2000.
[7] C. Ferreira and J. L. L´ pez, “Asymptotic expansions of the Hurwitzo
Lerch zeta function,” J. Math. Anal. Appl., vol. 298, no. 1, pp. 210–224,
2004.
[8] J. Yang and U. Speidel, “A T-decomposition algorithm with O(n log n)
time and space complexity,” in Proc. IEEE Int. Symp. on Inf. Theory,
Adelaide, Australia, 2005, pp. 23–27.

Note that the ﬁrst term dominates (11) for large |ˆa|. This
x
expression then has the form |ˆa|/ log |ˆa|, which conﬁrms
x
x
the earlier results.
We now consider the tightness of the bound. For j where
the number of words exceeds rj /j, we can use these “excess”
periodic words as substitutes for longer T-preﬁxes. However,
as Nn (j) and Nc (j) are asymptotically equivalent for large j,
the bound is asymptotically still tight. Some of these excess
words are also needed to “compensate” for j where there are
fewer than rj /j codewords.
Non-systematic TA is known to yield non-integer CT (ˆa)
x
above the piecewise linear bound for systematic TA for some

4

[9] M. R. Titchener, A. Gulliver, R. Nicolescu, U. Speidel and L. Staiger,
“Deterministic complexity and entropy,” Fundamenta Informaticae, vol.
64, no. 1-4, pp. 443–461, 2005.
[10] U. Speidel, “On the bounds of the Titchener T-complexity,” in Proc.
Int. Symp. on Commun. Systems, Networks and Digital Signal Process.,
Graz, Austria, 2008, pp. 321–325.
[11] T. A. Gulliver, I. Makwakwa and U. Speidel, “On the generation
of aperiodic and periodic necklaces via T-augmentation,” Fundamenta
Informaticae, vol. 83, pp. 91–107, 2008.
[12] K. Hamano and H. Yamamoto, “A differential equation method to derive
the formulas of the T-complexity and the LZ-complexity,” in Proc. IEEE
Int. Symp. on Inf. Theory, Seoul, Korea, 2009, pp. 625–629.
[13] K. Hamano, “Analysis and applications of the T-complexity,” PhD
disseration, The University of Tokyo, Tokyo, Japan, 2009.
[14] G. Clark and J. Teutsch, “Maximizing T-complexity,” submitted to
Discrete Appl. Math., 2010.

5

