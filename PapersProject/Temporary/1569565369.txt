Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 22:31:21 2012
ModDate:        Tue Jun 19 12:56:17 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      446168 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569565369

On the Query Computation and Veriﬁcation of
Functions
Hirakendu Das

Ashkan Jafarpour

Alon Orlitsky

Shengjun Pan

Ananda Theertha Suresh

University of California San Diego
{hdas,ashkan,alon,s1pan,asuresh}@ucsd.edu

value of the function. For example, consider the OR function
X1 ∨ . . . ∨ Xn , where each Xi ∼ Ber(pi ) independently of
each other. To verify that the OR is 1, it sufﬁces to show that
one of the Xi ’s is 1, hence for moderate values of the pi ’s,
the expected number of variables that need to be revealed is
small, whereas verifying that the OR is 0, requires checking
that all variables are 0, hence all n variables must always
be queried. Note that veriﬁcation complexity differs from
certiﬁcate complexity [5, 2], where all input values are known
in advance and can be used to determine the optimal query
order.
Veriﬁcation complexity was used in [1] to provide a simpler
proof that the query order for computing threshold functions
presented in [7] is optimal, to derive an optimal query order
for computing delta functions, and, observing that the value
of all binary-input symmetric functions depends only on the
number of ones or weight of the input, to ﬁnd an optimal
query order for symmetric functions that vary over any three
consecutive input weights.
In this paper, we extend the results in [1] and show that
for all symmetric functions of independent binary inputs,
optimal expected veriﬁcation and computation complexity are
equal. The symmetry, independence, and binary conditions are
necessary in the sense that if any of them is relaxed then there
are functions whose expected veriﬁcation complexity is strictly
lower than their expected computation complexity.
The rest of the paper is organized as follows. In Section II,
we formally deﬁne the problem of computation and veriﬁcation. In Section IV, we show the equality of veriﬁcation and
computation for general symmetric functions of independent
binary inputs. In Section V, we give an example of a nonsymmetric function of independent binary inputs where the
veriﬁcation and computation complexities differ. Similar examples showing that the independence and binary assumptions
are necessary will be provided in the paper’s full version.

Abstract—In the query model of multi-variate function computation, the values of the variables are queried sequentially, in an
order that may depend on previously revealed values, until the
function’s value can be determined. The function’s computation
query complexity is the lowest expected number of queries
required by any query order. Instead of computation, it is often
easier to consider veriﬁcation, where the value of the function
is given and the queries aim to verify it. The lowest expected
number of queries necessary is the function’s veriﬁcation query
complexity. We show that for all symmetric functions of independent binary random variables, the computation and veriﬁcation
complexities coincide. This provides a simple method for ﬁnding
the query complexity and the optimal query order for computing
many functions. We also show that if the symmetry condition is
removed, there are functions whose veriﬁcation complexity is
strictly lower than their computation complexity, and mention
that the same holds when the independence or binary conditions
are removed.

I. I NTRODUCTION
The worst-case query complexity or decision-tree complexity [2, 3, 4, 5, 8] of a multi-variate function is the number
of function inputs that must be queried in the worst case to
determine the function’s value. For example, the worst-case
query complexity of xy ∨ xz is 2, as the value of x determines
which of y or z needs to be queried to determine the function’s
value.
A multi-variate function is symmetric if its output remains
unchanged under all input permutations. Many functions encountered in engineering and science are symmetric, including
parity, threshold, and delta, as well as most statistical measures such as median, mode, max, and order statistics. Essentially all results in this paper concern symmetric functions.
It is easy to see, e.g. [6], that the worst-case query complexity of all non-constant symmetric functions is n. Kowshik and
Kumar [7] recently considered the expected query complexity
of computing symmetric functions. For expected complexity,
the optimal query order depends not only on the function, but
also on the underlying distribution. They found an optimal
query order for threshold functions of independent Ber(pi )
random variables. In particular, they showed that for these
functions the optimal query order does not depend on the
precise probabilities pi , but only on which is largest, second
largest, etc.
To simplify and extend arguments for ﬁnding the optimal
query order, [1] deﬁned the expected veriﬁcation query complexity of a function to be the lowest expected number of
inputs that need to be revealed to convince an observer of the

II. N OTATION AND F ORMULATION
Throughout the paper, we assume that f is a symmetric
function of n independent binary random variables
X1 , X2 , . . . , Xn , where Xi ∼ Ber(pi ) and the pi ’s
are known in advance, and without loss of generality,
def
1 > p1 ≥ p2 ≥ . . . ≥ pn > 0. We also let pi = 1 − pi and
¯
def
X j = X1 , . . . , Xj .
To compute f (xn ), we query the inputs sequentially. A
policy P is a rule that at any given time, based on prior

1

query outcomes, determines whether querying should stop or
continue, and in the latter case, which input should be queried
next. Once an input is queried, its full value is revealed. P
computes f , if for all xn , when P stops querying, f can be
determined.
Let N (xn ) be the number of inputs a policy P queries for
input xn . The expected query complexity of P is
def

C(P) = E[N (X n )] =

It is easy to see that for computation we need to query
the n variables till we ﬁnd one whose value is 1, hence the
expected computation complexity is (n+1)/2. By contrast, for
veriﬁcation, we are told the value j of f (xn ) and just need to
verify that Xj = 1, hence the expected veriﬁcation complexity
is 1.
Note f is not symmetric, and the Xi ’s are dependent,
we have relaxed the symmetry and independence conditions
as the point of the paper is to show that with them, the
computation and veriﬁcation complexities coincide.

P (xn )N (xn ),
xn ∈{0,1}n

For a more precise deﬁnition, the expected query complexity
of policy P when f (X n ) = j is

and the computation complexity of f is
def

C(f ) = min C(P),

def

P

C(P|f = j) = E[N (X n )|f (X n ) = j]
n
n
xn :f (xn )=j P (x )N (x )
,
=
P (f (X n ) = j)

where the minimum is taken over all policies computing f .
Any policy for f with complexity C(f ) is called optimal. In
general, there might be several optimal policies.
Example 1: Consider the threshold function
Πθ (x) =

1
0

and the veriﬁcation complexity of f when f (X n ) = j is the
smallest expected number of bits that need to be queried to
verify the value of f when f (X n ) = j.

if x ≥ θ,
otherwise,

def

Vj (f ) = min C(P|f = j),
P

and let f (X1 , X2 ) = Π1 (X1 + X2 ). If Xi is queried ﬁrst, the
expected number of queries is 1 · pi + 2 · (1 − pi ) = 2 − pi .
Since we assume p1 ≥ p2 , the policy querying X1 ﬁrst is
always optimal.

where the minimum is taken over all policies that verify the
value j of f . It is easy to see that the minimum can be
equivalently taken over all policies computing f .
The minimum expected veriﬁcation query complexity or
simply veriﬁcation complexity of f is therefore

For general functions, it is possible to express the computation complexity in terms of the input probabilities and optimize
the query order. But since the possible number of policies is
exponential in n, the problem may not be easy to solve for all
functions.
An alternative approach for this problem was proposed
in [1]. Instead of ﬁnding the optimal policy for computing a
function, the simpler problem of ﬁnding an optimal policy for
verifying the function’s value was considered. It was shown
that for a class of functions, the two policies coincide.
In the veriﬁcation of a function f , we are given the value of
f (xn ), and are asked to query the inputs to verify that this is
indeed the function’s value. As with computation, we apply a
policy that determines which input variable to query and when
to stop, the value of the function can be determined. But the
difference is that now we can use different policies based on
the value of f (xn ). It is therefore easy to see that a veriﬁcation
policy is just a collection of computation policies, one for each
value of f (xn ), and the advantage of veriﬁcation is that for
each value of f we can choose a policy that minimizes the
expected number of queries for the given value of f (xn ).
The difference between veriﬁcation and computation complexity is perhaps easiest to demonstrate via a non-symmetric
function of dependent random variables.
Example 2: Let f : {0, 1}n → {1, ..., n} be such that
f (xn ) = i iff xi = 1 and all other xj ’s are 0. And let X n
be distributed such that for all 1 ≤ i ≤ n, Xi = 1 and
all other Xj ’s are 0 with probability 1/n. For example, for
n = 3, P (100) = P (010) = P (001) = 1/3, and f (100) = 1,
f (010) = 2, and f (001) = 3.

def

Vj (f )P (f (X n ) = j).

V (f ) =

j

An optimal veriﬁcation policy is one whose expected query
complexity is V (f ). As with its computation counterpart, f
may have several optimal veriﬁcation policies.
Since computation is one way of veriﬁcation, or equivalently, since a veriﬁcation policy is a set of computation
policies, one for each value of f , we see that the veriﬁcation
complexity is at most the computation complexity.
Observation 3: For all f , V (f ) ≤ C(f ).
In Section IV we show that for all symmetric functions of
independent binary inputs, V (f ) = C(f ).
III. P RELIMINARY OBSERVATIONS
Recall that symmetric functions of binary variables are
def
n
determined by the input weight w(xn ) =
i=1 xi . Divide
the range [0, n] of possible weights into contiguous intervals
over which the function is constant. The following observation
shows that when a policy computing a function stops, the value
of the function is constant in a possible interval.
Observation 4: If for an input xn a policy stops after
querying n0 zeros and n1 ones, then w(xn ) can take any
value in the contiguous interval [n1 , n − n0 ]. Furthermore, if
the policy computes f , then f (xn ) is constant for all xn with
weight in this interval.
Proof: After querying n0 0’s and n1 1’s,
i xi can
take any value in the range [n1 , n − n0 ], depending on the

2

values of the unknown inputs. Since when the policy stops,
the value of the function is determined, regardless of the
unknown inputs, f (xn ) must be the same for all inputs with
w(xn ) ∈ [n1 , n − n0 ].

IV. E QUALITY OF V ERIFICATION AND C OMPUTATION
Q UERY C OMPLEXITY FOR S YMMETRIC F UNCTIONS OF
I NDEPENDENT B INARY I NPUTS
We now prove the equality of veriﬁcation and computation
complexities of symmetric functions of independent binary
inputs. Based on the size of the intervals, we ﬁnd the inputs
which can be queried ﬁrst. We then show that no matter what
the value of the function is, there are some inputs that can be
queried ﬁrst in an optimal veriﬁcation policy.
To achieve this goal, in Lemma 12 we consider optimal
veriﬁcation policy when the weight of the inputs belongs
to large interval and we ﬁnd some inputs that one of them
can be queried ﬁrst in an optimal veriﬁcation policy. In
compare, when the weight of the inputs belongs to small
interval, Lemma 13 ﬁnds some inputs that any of them can
be queried ﬁrst in an optimal veriﬁcation policy. Combination
of these two lemmas help us to ﬁnd an input that can be
queried ﬁrst in an optimal veriﬁcation policy for all values of
function. Lemmas 9 and 10 are the main parts of the proof of
Lemmas 13 and 12 which will be stated later. We begin with
an observation.
def
Let Ij = {x|g(x) = j} be the j th interval of the function
g. Then Ij can be written as [sj , ej ] where sj and ej are the
interval’s start and end points. Deﬁne,

 1 if x < sj ,
2 if sj ≤ x ≤ ej ,
gj (x) =

3 if x > ej .

The interval indicator function of f is the function g :
def
[0, n] → [1, n + 1], deﬁned by g(0) = 1 and
if f (i + 1) = f (i),
if f (i + 1) = f (i).

g(x) indicates which f -interval x belongs to. We divide
intervals into two types. An interval is large if its length is at
least n+1 and it is small otherwise.
2
Next observe that f and g have the same computation
complexity.
Observation 5: For every symmetric function f of independent binary variables,
C(f ) = C(g).
Proof: For any function f , the value of g determines the
value of f , hence any policy computing g also computes f ,
and C(f ) ≤ C(g). Conversely, while the value of f may
not determine the value of g, e.g., for the parity function, by
Observation 4, when the value of f is determined, the weight
xn lies in a known interval over which f is constant, and
hence g is determined as well, and C(g) ≤ C(f ).
Following observation compares the veriﬁcation complexities of f and g.
Observation 6: For any symmetric function f of independent binary variables,

The following observation shows equality of veriﬁcation of
gj (X n ) = j and veriﬁcation of g(X n ) = j.
Observation 8: A policy veriﬁes g(X n ) = j iff it veriﬁes
gj (X n ) = 2.
Every policy starts by querying a ﬁxed input Xi and the next
query is a function of the value of Xi . An optimal policy is
called second-input-ﬁxed if the second input queried is some
ﬁxed Xj independent of the value of Xi . Suppose there is
a function for which there exists a second-input-ﬁxed policy,
that queries some two inputs Xi and Xj . Using the fact that
the pi ’s are sorted and the function is symmetric, we show
in the following lemma that for any index k between i and j
there exists an optimal policy that queries Xk ﬁrst.
Lemma 9: Let Popt be a second-input-ﬁxed optimal policy
that queries Xi and Xj as the ﬁrst two inputs. Then for any
k between i and j (inclusive), there exists an optimal policy
that queries Xk ﬁrst.
Proof: Figure 1 describes Popt to compute the value of g or
to verify a speciﬁc value of g. Let Popt,1 , Popt,2 , and Popt,3
be policies followed after querying of Xi and Xj , depending
on the values observed. Since the function is symmetric, in
the case when Xi + Xj = 1, the same policy works.

Proof: Recall that veriﬁcation policy for f is a collection
of computation policies one for each value of f (X n ). Since
g determines f , the number of computation policies in g
is larger, and hence a veriﬁcation policy for f is also a
veriﬁcation policy for g.
Combining the above results, we obtain
Corollary 7: For all symmetric functions f of independent
binary random variables,
V (g) = V (f ) = C(f ) = C(g).
Proof: From Observations 3, 5, and 6,
V (g) ≤ V (f ) ≤ C(f ) = C(g).
Our main result, Theorem 14, shows that for all symmetric
functions f of independent binary random variables,
V (g) = C(g), and the corollary follows.
In general, veriﬁcation complexity appears to be easier
to determine than computation complexity, and veriﬁcation
complexity of the interval indicator functions seems easier
to determine than the veriﬁcation complexity of symmetric
functions. Hence in the rest of the paper we consider only the
veriﬁcation complexity of interval indicator functions.

0

...

0 Xj 1
Popt,1

3

Xi

1
0 Xj 1

Popt,2
Figure 1

...

V (g) ≤ V (f ).

...

0
1

...

def

g(i + 1) − g(i) =

Popt,3

Without loss of generality we assume that i < j. For any
k ∈ [i, j], consider four policies that query Xk ﬁrst. They are
shown in Figure 2.

After simplifying, we have
C(P1 )−C(Popt ) = pi (pj −pk )(b00 −a01 )+pi (pj −pk )(b01 −a11 ),
¯
C(P2 )−C(Popt ) = pi (pj −pk )(b00 −a01 )+pj (pi −pk )(b01 −a11 ),
¯

Popt,2

Xk → Xj

Xk → Xj

1

Popt,1

X
Xk → Xi Xk → Xi k → Xj Xk → Xj Xk → Xi

P3

...

Popt,3

0 Xj 1
...

0 Xj 1
...

...

Popt,2 Popt,2

Xk

0

1

...

Popt,1

P2

0 Xi 1

...

...

0 Xj 1

By assumption, p’s are sorted in decreasing order and so
pi ≥ pk ≥ pj . If any of the pi , pj , and pk are equal, the
lemma is trivial. So we assume that they are all different.
Using these assumptions, one can see that either all of the
above four quantities should be zero or at least one of them
is negative. Therefore, at least one of these four policies
performs as well as the optimal policy.

Popt,3

Xk → Xj Xk → Xj Xk → Xj k → Xi Xk → Xi
X

...

Xk

C(P4 )−C(Popt ) = pj (pi −pk )(b00 −a01 )+pj (pi −pk )(b01 −a11 ).
¯

Popt,2 Popt,2

P1
0

0 Xj 1
...

Popt,1

C(P3 )−C(Popt ) = pj (pi −pk )(b00 −a01 )+pi (pj −pk )(b01 −a11 ),
¯

...

...

Popt,3

...

Popt,1

1

0 Xi 1

...

0 Xi 1

...

...

0 Xi 1

Xk

0

1

...

Xk

0

Popt,2
Xk → Xi

Now consider an optimal policy that queries Xi ﬁrst and
then queries Xj or Xk depending on whether Xi = 0 or
Xi = 1. Such a policy is deﬁned as second-input-varies. For
given Xi , Xj , Xk the middle index is the median of i, j, k.
The corresponding X is called the middle input.
Lemma 10: For the second-input-varies policy deﬁned
above, there exists an optimal policy that queries the middle
input of {Xi , Xj , Xk } ﬁrst.
Proof: The proof is omitted due to lack of space.

Popt,3
Xk → Xi

P4
Figure 2

We brieﬂy explain the four policies above. The ﬁrst policy
queries Xk and then Xi . It then follows Popt and queries Xj
when Popt requires querying Xk . In the second policy Xk is
queried ﬁrst, and depending on its value we query Xi or Xj
and follow Popt . When Popt requires querying Xk , we query
one of Xi and Xj that has not been queried. The remaining
two policies are similarly described.
We now describe the expected query complexities of the
various policies described above and then show that at least
one of the four policies deﬁned performs as well as Popt .
Using the linearity of expectation we have

Let nmin be the minimum number of inputs that need to
j
be queried in order to compute g, when
i Xi ∈ Ij . The
following lemma relates nmin to g.
j
Lemma 11: nmin = n − |Ij | + 1.
j
Proof: From Observation 4, we conclude that g(x) = j for
j ∈ [n1 , n − n0 ], where n0 is the number of queried 0’s and
n1 is the number of queried 1’s. Hence, [n1 , n − n0 ] ⊂ Ij .
Therefore, n − n0 − n1 + 1 ≤ |Ij |. Equality is achieved, when
[n1 , n − n0 ] = Ij .
Recall that we divided intervals into two typed of small and
large intervals. We prove two following lemmas regarding the
ﬁrst queried input in an optimal policy when the input weight
lies in a small or large interval.
Lemma 12: Suppose i Xi belongs to a large interval with
size L. There exists an optimal policy to verify the value of
g that queries some Xi ﬁrst, i ∈ [n − L + 1, L].
Proof: Let j be the index of the interval such that x ∈ Ij .
By Lemma 8, we can consider the function gj (x) instead of
g(x). The proof is based on induction on n. Let Ln,L =
[Xn−L+1 , XL ]. We use threshold functions as the base for
induction. Depending on the position of the interval, we
consider two cases. In the ﬁrst case, we use a threshold
function which has a jump at L as the base for induction.
The goal is to show that i Xi ∈ [0, L − 1]. In [1], it has
been shown that any one of [XL , Xn ] can be queried ﬁrst in
an optimal policy. Hence, XL ∈ Ln,L . In the second case, we
use a threshold function with jump at n − L + 1 as the base.
The goal is to show that i Xi ∈ [n − L + 1, n]. In [1] it
has been shown that there exists an optimal veriﬁcation policy,
which queries Xn−L+1 ﬁrst.
For induction, suppose the lemma is true for any function,
g with n = n − 1 inputs. Further, suppose that gj is not a

C(Popt ) =¯i pj (a00 pk + b00 pk ) + pi pj (a01 pk + b01 pk )+
p ¯
¯
¯
¯
pi pj (a01 pk + b01 pk ) + pi pj (a11 pk + b11 pk ),
¯
¯
¯
where ar,t and br,t are non-negative numbers depending on
the structure of Popt , for r, t ∈ {0, 1}, independent of pi , pj
and pk . The complexity of the four policies deﬁned can be
written as,
C(P1 ) =¯k pi (a00 pj + b00 pj ) + pk pi (a01 pj + b01 pj )+
p ¯
¯
¯
¯
pk pi (a01 pj + b01 pj ) + pk pi (a11 pj + b11 pj ),
¯
¯
¯
C(P2 ) =¯k pi (a00 pj + b00 pj ) + pk pi (a01 pj + b01 pj )+
p ¯
¯
¯
¯
pk pj (a01 pi + b01 pi ) + pk pj (a11 pi + b11 pi ),
¯
¯
¯
C(P3 ) =¯k pj (a00 pi + b00 pi ) + pk pj (a01 pi + b01 pi )+
p ¯
¯
¯
¯
pk pi (a01 pj + b01 pj ) + pk pi (a11 pj + b11 pj ),
¯
¯
¯
C(P4 ) =¯k pj (a00 pi + b00 pi ) + pk pj (a01 pi + b01 pi )+
p ¯
¯
¯
¯
pk pj (a01 pi + b01 pi ) + pk pj (a11 pi + b11 pi ).
¯
¯
¯
Now we compare the complexity of the new four policies with
the original optimal policy by subtracting C(Popt ) out of them.

4

threshold function. By using Lemma 11 at least n − L + 1
inputs need to be queried. Since it is not a threshold function,
L < n and at least two inputs need to be queried.
Let Popt be an optimal policy, which queries Xi ﬁrst. If
Xi ∈ Ln,L then the induction is complete. If Xi ∈ Ln,L , then
/
either i > L or i < n − L + 1. We ﬁrst consider the case,
when i > L. By induction, there is an optimal policy Popt ,
that chooses one of Ln−1,L as the second input. Either the
policy Popt is second-input-ﬁxed or second-input-varies. We
consider them separately.
If the policy is second-input-ﬁxed, then Xj ∈ Ln−1,L . By
Lemma 9, any one of [Xj , Xi ] can be queried ﬁrst in an
optimal policy and [Xj , Xi ]∩Ln,L = ∅. If the policy is secondinput-varies and suppose it queries Xj if Xi = 0, and Xk if
Xi = 1, such that Xj , Xk ∈ Ln−1,L . Then, by Lemma 10,
there exist an optimal policy which queries the middle input
of {Xi , Xj , Xk } ﬁrst. That input belongs to the set Ln,L .
The proof for the case i < n − L + 1 is very similar.

of the value of g. This result by itself can be used to ﬁnd
an optimal policy for several functions, whose their longest
interval is small interval.
V. N ON - SYMMETRIC F UNCTIONS
In the previous section we showed that all symmetric functions of independent binary variables have the same computation and veriﬁcation complexity. The symmetry, independence,
and binary conditions are necessary in that if any of the
conditions is relaxed, there are functions whose veriﬁcation
complexity is strictly lower than their computation complexity.
We show the result for the symmetry condition and leave the
other two conditions for the full version of the paper.
Example 15: Let X1 , X2 , and X3 be independent
1
Ber( 2 ), and consider the following non-symmetric function
f (X1 , X2 , X3 ),
X1 X2 X3
f (X 3 )

000
1

001
1

100
2

110
2

011
3

111
3

010
4

101
4

The computation complexity is,

Lemma 13: Suppose
i Xi belongs to a small interval
with size l, then querying any one of [Xl , Xn−l+1 ] ﬁrst, is
optimal.
Proof: Proof is by induction and it is similar to the proof
of Lemma 12.

Vj (f )P (f (X n ) = j) =

V (f ) =
j

9
2 2 2 3
+ + + = .
4 4 4 4
4

The ﬁrst three terms correspond to function values 1, 2, and
3, each occurs with probability 1/4. In each of these cases,
the function value can be veriﬁed by querying exactly two
inputs. The fourth term corresponds to function value 4. In
that case, querying all the three inputs is necessary to verify
the value of the function. On the other hand, it can be shown
that the computation complexity is 10 .
4

The following theorem is the main result of the paper. It
states that there exists an optimal veriﬁcation policy that is
also an optimal computation policy for all symmetric functions
of independent binary inputs.
Theorem 14: C(g) = V (g).
Proof: Let Aj denote the set of inputs that can be queried
ﬁrst in some optimal veriﬁcation policy, when i Xi ∈ Ij .
Except Π n+1 (x) for odd n, all other symmetric functions
2
have at most one large interval. The above theorem is proved
for these exceptions in [1]. So in the rest of the proof we
assume that there is at most one large interval. Let L and
M be the size and index of one of the longest intervals
(and observe that such an interval may not be large by our
deﬁnition). Let l and i denote the size and index of an interval
other than IM . We consider the following two cases, based
on the size of the longest interval.
Case 1: L ≥ n+1
2
By Lemma 13, we have,
l < n+1 =⇒ [Xl,Xn−l+1 ] ⊂ Ai =⇒ [Xn−L+1,XL ] ⊂ Ai .
2
In addition, by Lemma 12, [Xn−L+1 , XL ] ∩ AM = ∅. As a
result, j Aj = ∅, which implies that there is an input that
can be queried ﬁrst in all optimal policies for different values
of g. After the ﬁrst query, the similar argument can be used
for the rest of the inputs. Hence, one can track one of the
optimal veriﬁcation policies without the knowledge of the
function value. As a result, C(g) = V (g).
Case 2: L < n+1
2
AM = [XL , Xn−L+1 ] and AM ⊂ Ai . So AM ⊂ j Aj . The
rest of the proof is similar to that of case 1.

R EFERENCES
[1] J. Acharya, A. Jafarpour, and A. Orlitsky, “Expected
Query Complexity of Symmetric Boolean Functions,”
Allerton Conference, 2011, pp. 26-29.
[2] S. Arora and B. Barak, “Computational Complexity: A
Modern Ap- proach,” 1st ed. New York, NY, USA: Cambridge University Press, 2009.
[3] K. J. Arrow, L. Pesotchinsky, and M. Sobel, “On partitioning of a sample with binary-type questions in lieu
of collecting observations,” Journal of the American
Statistical Association, vol. 76, pp. 402-409, 1981.
[4] Y. Ben-Asher and I. Newman, “Decision trees with
boolean threshold queries,” Journal of Computer and
System Sciences, vol. 51, pp. -, 1995.
[5] H. Buhrman and R. de Wolf, “Complexity measures and
decision tree complexity: A survey,” Theoretical Computer
Science, vol. 288, p. 2002, 1999.
[6] A. K. Dhulipala, C. Fragouli, and A. Orlitsky, “Silencebased com- munication,” IEEE Transactions on Information Theory, vol. 56, pp. 350-366, January 2010.
[7] H. Kowshik and P. R. Kumar, “Optimal ordering of transmissions for computing boolean threshold functions,” in
Proceedings of IEEE Symposium on Information Theory,
2010, pp. 1863-1867.
[8] I. Wegener, “The complexity of Boolean functions,” New
York, NY, USA: John Wiley & Sons, Inc., 1987.

From the proof of the theorem, it is clear that, when all
the intervals are at most n+1 , the set of inputs which can be
2
queried ﬁrst in an optimal veriﬁcation policy is independent

5

