Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 11:28:41 2012
ModDate:        Tue Jun 19 12:56:10 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      777612 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569565493

Graph Cover Ensembles of Non-binary Protograph
LDPC Codes
Dariush Divsalar

Lara Dolecek

Jet Propulsion Laboratory
California Institute of Technology
Pasadena, CA, 91109
Email: Dariush.Divsalar@jpl.nasa.gov

Department of Electrical Engineering
University of California, Los Angeles
Los Angeles, California 90095
Email: dolecek@ee.ucla.edu

non-zero element of the underlying ﬁeld. In designing irregular
non-binary LDPC codes, Davey and MacKay [2], Declercq et
al. [3], and Poulliat et al. [8], Liva et al. [9] suggested that
instead of randomly assigning the non-zero elements of the
ﬁeld to the edges in the Tanner graph, it is in fact better to
carefully select the scaling to ensure good minimum distance
properties. These observations motivate us to introduce, for the
ﬁrst time, a novel class of protograph-based non-binary LDPC
codes constructed from a graph cover, and having ﬁxed edge
scalings. This new class of codes called the graph cover nonbinary protograph based (GC-NBP) codes. These codes are a
natural extension of the binary protograph-based codes [10]
to the non-binary case. Due to ﬁxed edge scalings, this code
family is more practical and easier to implement than a code
where the scalings are randomly selected.
The goal of this paper is to ﬁrst present a novel class
of structured non-binary LDPC codes, where in contrast to
existing works (see e.g., [4], [5]), the edges are selectively
rather than randomly scaled. We then establish various weight
enumerators of this code family. In Section II we describe
the construction of non-binary LDPC codes based on graph
covers of protographs, and quickly summarize background
concepts. In Section III we provide the exact codeword weight
enumeration and the codeword pairwise enumeration of GCNBP codes using combinatorial arguments. The latter result
is novel and is important for high-order modulations where
the assumption on the all-zero transmitted codeword does not
hold, e.g., in pulse amplitude modulation (PAM). In Section IV
the growth rate of the enumerator in the asymptotic regime
is derived. Equipped with novel combinatorial deﬁnitions,
Section V then discusses the enumerators of trapping, stopping sets and pseudocodewords. In Section VI an example
is provided. Section VII concludes the paper. Some of the
enumeration machinery used in deriving the presented results
is built upon the previous works [1], [4]; yet it is important
to note that the end results of the simpliﬁed constructions are
considerably different than in the random edge scaling case,
since no weight averaging takes place.

Abstract—This paper introduces a novel class of non-binary
graph-based codes, built upon graph covers of non-binary protograph LDPC codes. This new ensemble is more restrictive than
previously considered constructions, but in turn is much simpler
to design and implement. The simpliﬁcations in design allow for
the enumeration of codeword weight, trapping set size, stopping
set size, and pseudo codeword weights, both as exact quantities
in the ﬁnite-length regime and as corresponding growth rates
in the asymptotic setting. The presented construction and the
accompanying enumerations enhance the analytical toolbox of
non-binary LDPC codes.

I. I NTRODUCTION AND MOTIVATION
Graph-based codes can be divided into two categories:
codes where each coded symbol is represented by a single
bit (binary codes), and codes where each coded symbol is
represented by , > 1 bits (non-binary codes). While Davey
and MacKay [2] recognized early on that non-binary low
density parity check (LDPC) codes can outperform binary
LDPC codes, a considerable amount of subsequent research
effort was devoted to studying binary LPDC codes. With these
early promising results, the interest in non-binary LDPC codes
is being renewed.
Weight enumerator (WE) of a given linear code succinctly
captures the number of codewords of a given weight. Since
it is usually impractical to compute the WE of a given
code, ensemble-wide properties are commonly established. In
addition to characterizing codeword WE of a given ensemble,
it is also of interest to evaluate the WE of non-codeword
objects known to dominate the performance of iteratively
decoded LDPC codes. Recent work [6], for example, has
already considered weight distributions of certain unstructured
non-binary LDPC codes. In our recent work [4], [5], we
studied a class of structured non-binary LDPC codes built out
of protographs with random edge scaling and derived various
enumerators of this code family.
In contrast to the binary setting, there is a considerable
freedom in generalizing a code construction to the non-binary
domain. For example, each edge in the Tanner graph of a given
non-binary LDPC code can, in principle, be weighted by any

II. P RELIMINARIES

This research in part was carried out at the Jet Propulsion Laboratory,
California Institute of Technology, under a contract with NASA, and at UCLA
under the grants CCF-1029030 and CCF-1161798 from NSF and funding from
ASTC. Authors acknowledge Ben-Yue Chang for help with simulations.

The goal of this section is to describe graph cover nonbinary protograph (GC-NBP) LDPC codes (simply referred by

1

d1
Variable
nodes

V V V
1
2
3

s2

s2 s4

Edges
Check
nodes

s1

s3

V V V V V V V V V
11 12 13
21 22 23
31 32 33

s5

s2

s2

s4

C1 C2

s1

s1

s3

s1

s3

s5

s1

s2

s2

C21 C22 C23

s4

s1 s1
s3 s3

Copy 3 times

Fig. 1.

s5

s3

C11 C12C13

protograph

s5

d3

V V V V V V V V V
11 12 13
21 22 23
31 32 33
s2

s4 s4

d2

s4

s4
s5

s5 s5

s3

C11 C12C13
[ d1 , d1 ]
1 2

C21 C22 C23

[ d2 , d2 , d2 ]
1 2
3
Permute the edges

An illustration of the steps in a GC-NBP code construction.

Deﬁnition 2 (GC-NBP code ensemble): The (G, N, q) GCNBP ensemble is the collection of all (G, N, {πi }i ) GC-NBP
codes with the given choices of si ∈ S as non-zero elements
of GF (q) (for 1 ≤ i ≤ |E|) and {πi }’s as all possible N permutations (for 1 ≤ i ≤ |E|).

GC-NB-P codes) and associated relevant enumeration objects.
A. GC-NBP Codes, Their Ensembles, and Relevant Combinatorial Objects
GC-NBP codes are built from a constituent small bipartite
graph, known as the protograph. We extend the original deﬁnition of a protograph [10] and associated code ensembles to
include the edge weightings. Let us assume that a protograph
G = (V,C,E,S) consists of the set V = {v1 ,v2 ,. . . ,vnv }
of variable nodes (VNs), the set C = {c1 ,c2 ,. . . ,cnc } of
constraint nodes (CNs), the set E = e1 ,e2 ,. . . ,e|E| of edges
connecting VNs and CNs, and the set S = s1 ,s2 ,. . . ,s|S|
of scales (weights) with one-to-one association with the edges
namely si ∈ S is associated with ei ∈ E, |S| = |E|, and
si = 0 ∈ GF (q). Parallel edges between a VN and a CN are
allowed.
When a graph G = (V, C, E, S) is copied N times, each
variable node vi ∈ V (each constraint node ci ∈ C) expands
into the set Vi of variable nodes {vi,1 , . . . , vi,N } (the set Ci
of constraint nodes {ci,1 , . . . , ci,N }) in the resultant graph
GN . Likewise, each edge ei ∈ E with its associated scale
si expands into the set Ei of edges in GN . Note that the
elements of Ei , Ei = {ei,1 , . . . , ei,N }, each have the same
scale si ∈ S as ei ∈ E, and the edge ei,j for 1 ≤ j ≤ N
connects the variable node vk,j and the constraint node cl,j if
the edge ei connects the variable node vk and the constraint
node cl with the same scale si ∈ S in the original protograph
G. We let GN = (V N , C N , E N , S N ) denote the resultant
daughter graph.
Deﬁnition 1 (GC-NBP code): Given the mother protograph G = (V, C, E, S), a (G, N, {sk }k , {πi }i ) GC-NBP
code is constructed from the daughter graph GN =
(V N , C N , E N , S N ) by N times copying G = (V, C, E, S)
and then permuting the edges in the set Ei according to πi
for each 1 ≤ i ≤ |E|.
This process is illustrated in Figure 1 for the construction of
a GC-NBP code based on the mother protograph with nv = 3,
nc = 2, and N = 3.
We call this code a graph cover (GC)-NBP code since
the construction is reminiscent of the graph cover analysis
of graph-based codes [7].
The deﬁnition of the GC-NBP ensemble then follows in the
usual sense.

B. Frequency weight matrix of a non-binary protograph code
In this section we describe the frequency weight matrix
arising from N replications of the underlying protograph G.
Recall that a degree-N graph cover of G is a Tanner graph
G(N ) that results from replicating N times each node of
G, followed by introducing edges in a way that the local
adjacency is preserved among the replicated nodes [7]. This
operation is in fact reminiscent of our GC-NBP construction.
Note that in the GC-NBP case, the edge weights of the
underlying graph are preserved in its graph cover, whereas
the edge weights range over all possible non-zero values when
constructing the PB NB ensemble in [4].
With
the
graph-cover
viewpoint,
it
is
convenient
to
consider
a
codeword
xN
ˆ
=
(x1,1 · · · x1,N , x2,1 · · · x2,N , · · · , xnv ,1 · · · xnv ,N ) as
an N -cover codeword of C (N ) , the code generated by G(N ) .
We tabulate the number of occurrences of non-zero symbols
from GF (q) in xN via the (q − 1) × nv matrix d = d(ˆN ),
ˆ
x
called the degree-N frequency weight matrix. In this matrix,
the entry d( , i) is the number of occurrences of symbol
in positions xi,k , 1 ≤ k ≤ N , in xN , computed for each
ˆ
between 1 and q − 1, and each i between 1 and nv . Note
that the number of occurrences of zero-symbol in GF (q) need
not be listed explicitly as it follows by subtracting the total
count of non-zero elements of GF (q) from N for each i. The
frequency weight matrix d can be viewed as a concatenation
of column vectors ∂i = [di,1 di,2 . . . di,(q−1) ]T , each of length
(q − 1) that indicate the number of times each non-zero
symbol occurs in a particular code coordinate corresponding
to the variable node vi in the non-binary protograph. We call
these (q − 1) dimensional vectors the protograph variable
node frequency weight vectors. As a shorthand, we write
d = [∂1 , ∂2 , · · · , ∂nv ].
Analogous to the deﬁnition of ∂i for the variable node
vi , it is also useful to introduce the protograph constraint
node frequency weight matrix dj = [∂j1 ∂j2 . . . ∂jmj ] for the
constraint node cj in G with degree mj . This frequency weight
matrix is a (q − 1) × mj submatrix of d = [∂1 , ∂2 , · · · , ∂nv ]

2

previously deﬁned for nv variable nodes in G, whose columns
are now precisely the mj columns of d corresponding to
j1 , · · · , jmj variable nodes that are the neighbors of the
constraint node cj .
The relative effect that each codeword has on the overall
performance is a function of its frequency weight matrix,
that itself depends on the channel/modulation choice. The
Hamming weight of a non-binary code is

(sj,1 , sj,2 , . . . sj,mj ), where sj,i ’s are non-zero elements of
GF (q) for i = 1, 2, . . . , mj . Since the edge weights are
a priori chosen by construction, we view the node cj with
speciﬁed sj as a (mj , mj − 1) single parity check, linear code
Cj over GF (q).
For convenience, we partially borrow the following notation
from [4]: We let Kj = q (mj −1) be the total number of
codewords in Cj . Further, we let MCj be the Kj × mj matrix
with the codewords of Cj as its rows.
Consider a 1 × mj codeword x ∈ Cj . Let the mapping ϕ(x) be deﬁned as the symbol indicator, ϕ(x) =
[x1,1 . . . x1,(q−1) , x2,1 . . . x2,(q−1) , . . . , xmj ,1 . . . xmj ,(q−1) ],
where xi = 1, if the i-th component of x is equal to a nonbinary symbol with index , otherwise xi = 0, for ranging
over all (q − 1) non-zero symbols in GF (q). We collect the
indicators ϕ(x) for all x as matrix rows of a Kj × mj (q − 1)
C
binary matrix. This matrix is referred to as Mb j .
We now consider the N copies of the constraint node cj in
GN . Let the resultant (N mj , N (mj − 1)) linear block code
N
be denoted as Cj .
N
N
Let ACj (dj ) denote the weight-vector enumerator of Cj
where the constraint frequency weight matrix dj is deﬁned
with respect to the constraint node cj . This enumerator is
computed according to the following Theorem.
Theorem 1: The frequency weight matrix enumerator
N
N
ACj (dj ) of Cj is given by,
N
Cj
A (dj ) =
C N ; n1 , n2 , . . . , nKj ,
(3)

nv q−1

dH (d(ˆ N )) =
x

di, .

(1)

di, (l − l0 )2

(2)

i=1 =1

For example, for q-ary PAM,
nv q−1

d2 (d(ˆ N ))
x
E

=
i=1 =1

represents the square Euclidean distance of non-binary codeword with respect to the all zero codeword where l0 is a PAM
level assigned to the zero symbol.
C. Frequency uniform interleaver
We round up the section with the following deﬁnition of
the frequency uniform interleaver. The frequency uniform
interleaver decouples the frequency weight enumeration of
component codes. Note that the symbol interleaver based on
Hamming weight [4] does not represent a frequency uniform
interleaver since the edge weights are a priori ﬁxed. Let
N!
C (N ; n1 , n2 , . . . , nK ) = n1 !n2 !...nK ! denote the multinomial
coefﬁcient.
Deﬁnition 3 (Frequency uniform interleaver): A length-N
frequency uniform interleaver is a probabilistic device that
maps each input of length N with entries as non-zero
symbols of GF (q) and with the frequency weight vector [d1 , d2 , · · · , dq−1 ] (each dt denotes the number of
occurrences of the t-th symbol in the input) into the
C(N ; d0 , d1 , . . . , d(q−1) ) distinct output sequences of length
N . Here d0 = N − i>0 di . These outputs have the same
frequency weight vector as the input, and they are chosen
equiprobably.
When q = 2, the frequency uniform interleaver is the same
as the binary uniform interleaver.

{n}

where C N ; n1 , n2 , . . . , nKj is the multinomial coefﬁcient and {n} is the set of integer-vector solutions to dj =
C
Kj
n · Mb j , with n1 , n2 , . . . , nKj ≥ 0, and k=1 nk = N , and
th
nk the number of occurrences of the k codeword among
these N copies of cj .
Proof: The proof is based on constructing a multiN
dimensional generating function {AC (dj )} and extracting
appropriate coefﬁcients from this generating function using
a multinomial theorem. The function itself is derived from the
generating function of the underlying code Cj (induced by the
constraint node cj , and associated scale vector sj ), multiplied
N times. Since the proof uses known techniques previously
discussed in [1], details are omitted.
Note that the result in Theorem 1 for a GC-NBP code is
different from the previously derived result for the PB NB
codes [4], since the proposed construction treats the edge
scalings as ﬁxed rather than random.

III. GC-NBP E NSEMBLE C ODEWORD W EIGHT
E NUMERATOR
In this section we derive the codeword weight enumerator
of the GC-NBP ensemble. In Subsection III-A we ﬁrst derive
the weight enumerator of a code induced by N replications of
a given constraint node. In Subsection III-B we leverage the
result from Subsection III-A to derive the GC-NBP ensemble
codeword WE. We also provide pairwise weight enumerators
in Section III-C.

B. Weight enumerator of the GC-NBP ensemble
Suppose that the original protograph G has nv variable
nodes and nc constraint nodes. Let mj denotes the degree
of the constraint node cj . Let ti denote the degree of the
variable node vi . By construction, the GC-NBP ensemble
consists of all codes obtained by performing all possible
edge permutations in the derived graph GN . It is convenient
to collect the frequency column vectors {∂j1 , ∂j2 , ..., ∂jmj }
of the N non-binary elements on the edges connected to

A. Weight enumerator of a constraint node and of its replicas
Consider a degree-mj constraint node cj in protograph
G deﬁned over GF (q), and suppose that the scalings on
the edges incident to cj are given by the vector sj =

3

N

where ACP,j (dj ) is the frequency weight matrix enumerator
N
of the code CP,j induced by the N copies of the constraint
node cP,j with the associated scaling sj . Here, the elements of
dj comprise a subset of the elements of d = [∂1 , ∂2 , ..., ∂nv ],
and this subset (corresponds to neighbors of cP,j ) is obtained
from the edge connections in the mother protograph GP . The
variable node index i is added to the subscript of the entry
dj,k to yield di,j,k .
Proof: The proof follows from applying frequency uniform interleaver to concatenations of codes induced by single
variable and single constraint node in GP . Details are omitted
for the lack of space.
For any two dimensional modulation with constellation
points a( ), we can deﬁne the pairwise Euclidean distance
between two codewords as

CN cj , arising from the incident VNs {vj1 , vj2 , ..., vjmj },
into the protograph constraint node frequency weight matrix
dj = ∂j1 , ∂j2 , ..., ∂jmj .
N

Theorem 2: Let ACj (dj ) be the frequency weight matrix
N
enumerator of the code Cj induced by the N copies of the
constraint node cj with the associated scaling sj . Then, the
frequency weight matrix enumerator of the GC-NBP ensemble
is
N
nc
Cj
(dj )
j=1 A
. (4)
A(d) =
nv
ti −1
i=1 C(N ; di,0 , di,1 , . . . , di,(q−1) )
Proof: Consider a concatenation of two codes, one induced by a variable node and another induced by a constraint
node, connected via a frequency uniform interleaver. By
collecting all the nodes, the result follows.
Note that the result in (4) is not merely a consequence
of the weight enumerator computed in [4] for the PB NB
ensemble: the former assumes ﬁxed edge scalings while the
latter considers all possible non-zero weightings in the edge
permutations, thus incurring different combinatorial terms (in
the denominator) in the expression for the weight enumerator.
For the given Hamming weight dH , the average number
of codewords of weight dH in the GC-NBP ensemble, AdH ,
is then simply the sum of A(d) over all d for which
{di, :vi ∈V } di, = dH .
A similar calculation can be done under the squared Euclidean distance with respect to the all zero codeword as
deﬁned previously for PAM in (2).

nv q−1 q−1

d2 =
E

di,
i=1 =0

,

|a( ) − a( )|2 .

(5)

=0

˜
Then Ad2 = d A(d) is the pairwise weight enumerator
E
where the sum ranges over all frequency weight matrix d that
produce channel dependent parameter d2 . The computation of
E
the enumerator can be simpliﬁed since d2 is invariant to the
E
order of ( , ) and further reduced when = . Note that this
result is particularly useful when the assumption on all-zeros
transmission does not hold, as is the case with PAM.
IV. A SYMPTOTIC ENSEMBLE WEIGHT ENUMERATORS
Equipped with the new weight enumerator, the asymptotic
growth rate can now be derived in the usual sense (cf. [1]),
either in terms of the number of protograph copies, N ,

C. Pairwise weight enumerators
A method for determining pairwise weight enumerators for
a GC-NBP LDPC code ensemble is to create a modiﬁed
protograph GP from the original protograph. Each variable
(constraint) node in GP can be viewed as a duplicated version
of a variable (constraint) node in the original protograph G.
The local adjacency is preserved among the replicated nodes.
Each variable node in GP takes a pair of elements of the ﬁeld.
This pair is interpreted as a new symbol in the current set up.
List all possible pairs of codewords of the original check
Cj
node matrix MCj as the matrix MList . The (i, k) component
P
of the constraint matrix MCj of the new check node in GP is
Cj
the (i, k) and the (i, k+mj ) component of MList representing
a new symbol ( , ) for k = 1, . . . , mj . The binary marix

rH (δ) = lim sup
N →∞

ln AδN
ln AdH
= lim sup
,
N
N
N →∞

(6)

or in terms of the codeword lenght n (where n = nv · N )
ln AdH
˜
r˜ (δ) = lim sup
H
n
n→∞
1
˜
˜
where r˜ (δ) = nv rH (δnv ). From (4), it follows that,
H
nc

N

nv

ln ACj (dj )−

ln A(d) =
j=1

(7)

(ti −1) ln C(N ; di,0 , . . . , di,(q−1) ),
i=1

(8)

and, with N tending to inﬁnity,
∞
nc
Cj
rH (δ) = max{δ}
(δ j )
j=1 a

CP

Mb j is constructed by applying the indicator mapping ϕ to
P
the matrix MCj . The frequency weight vectors are deﬁned as
∂ = [d0,0 , . . . , d(q−1),(q−1) ]T where d , counts the number
of occurrences (frequency) of the symbol ( , ) within N
symbols. The deﬁnition of the frequency weight matrix for
protograph GP is the same as previously discussed except
that now the number of symbols is q 2 rather than q.
Theorem 3: The pairwise frequency weight matrix enumerator of the GC-NBP code averaged over the entire ensemble
is
N
nc
CP,j
(dj )
j=1 A
˜
,
A(d) =
nv
C(N ; di,0,0 , di,0,1 , . . . , di,(q−1),(q−1) )ti −1
i=1

4

−

nv
i=1 (ti

− 1)H [δi,0 , δi,1 , . . . , δi,(q−1) ]

.
(9)
Here, (with the standard substitution, see e.g., [1]) δ =
d/N , δ j = dj /N , δi = di /N , and H(·, · · · , ·) is the
∞
multi-dimensional entropy function. The term aCj (δ j ) stands
for the asymptotic frequency weight matrix enumerator of
∞
the constraint node cj , and it is computed as aCj (δ j ) =
max{Pδ } H(Pδj ) . The collection {Pδj } represents the set
j

C

of solutions to δ j = Pδj · Mb j , with Pδj = [p1 , p2 , . . . , pK ],
K
p1 , p2 , . . . , pK ≥ 0 and k=1 pk = 1.
The WEs of GC-NBP codes in terms of the relevant
codeword objects now readily follow.

!"#,%%'

V. N ON - CODEWORD SET ENUMERATORS
Let Gq = (Vq , Cq , Eq , Sq ) be the Tanner graph of an
LDPC code deﬁned over GF (q), with Vq and Cq denoting the
variable node set, and the constraint node set, respectively, and
Eq and Sq denoting the edge set and the associated scalings,
respectively. Let us consider a Ta,b trapping set (see [4] for
deﬁnition). As observed in [1], [4], the trapping set enumerator
can be computed by enlarging the original graph Gq with
an additional set Wq of b variable nodes, each attached to
one of the b constraint nodes in Ta,b . The values of the a
variable nodes constituting this Ta,b trapping set are assigned
non-zero values from GF (q), and all other variable nodes in
Gq are assigned a zero value. The values in the set Wq are
determined so that the overall graph Rq = Gq ∪ Wq has all
constraint nodes satisﬁed. The trapping set enumerator for Gq
then reduces to the codeword weight enumerator for Rq .
Based on the results from the previous section, it follows
that the trapping set enumerator Aa,b can be computed as
Aa,b =
A(d),
(10)

!"#$%&##"#%'#"()(*+*,-%

!"#$%!'

the

constraints
di = b, where
{di :vi ∈Wq }
nc
j=1

A(d) =

nv
i=1

{di :vi ∈Vq }

di

=

a

C(N ; di,0 , di,1 , . . . , di,(q−1) )ti −1

(11)

j=1

(ti − 1)H [δi,0 , δi,1 , . . . , δi,(q−1) ] }}, (13)
i=1

constraints
=
α, and
{δi :vi ∈Vq } δi
= β. The asymptotic weight-vector
enumerator, a (δj ), can be evaluated as in [4]. Therefore,
1
˜
r(˜ , β) follows from r(α, β) = nv r(˜ nv , βnv ).
˜α ˜
˜ ˜ ˜
α
We quickly remark that the analysis of the stopping set enumeration follows the methodology in [4] for protograph-based
non-binary (PB NB) LDPC codes (with random scalings).
Also, the technique in [5] can be used for the pseudocodeword
analysis.
VI. A N EXAMPLE
under

"9

"0

!

!"#$%)'

01(!+'

!

0
"! !

!

!
!

01+(&'

!

+'

*'

)'

"0

" 80

"1

23'4'5627289:':;:7:0<'=>'?@A+(&B'
"! !

p(x) = x 8 + x 4 + x 3 + x 2 + 1
01!+.'
('

! &(./"0%$1%

!

!
&'

-'

.'

/'

[1] S. Abu-Surra et al., “Enumerators for protograph-based ensembles of
LDPC and generalized LDPC codes,” IEEE Trans. on Info. Theory, vol.
57. no. 2, pp. 8585 886, Feb. 2011.
[2] M. C. Davey and D. MacKay, “Low-density parity-check codes over
GF(q),” IEEE Commun. Lett., vol. 2, pp. 165167, June 1998.
[3] D. Declercq et al., “Performance comparison of NB-LDPC, NB-rootLDPC, and NB-DGLDPC”, http://www.ict-davinci-codes.eu, June 2010.
[4] D. Divsalar, and L. Dolecek,“Enumerators for protograph-based ensembles of non-binary LDPC codes,” Proc. of IEEE ISIT, Saint Petersburg
Russia, Aug. 2011.
[5] D. Divsalar and L. Dolecek, “Ensemble analysis of pseudocodewords of
non-binary protograph-based LDPC codes,” in Proc. IEEE ITW, Paraty,
Brazil, Oct. 2011.
[6] K. Kasai et al., “Weight distribution of non-binary LDPC codes,” Proc.
of IEEE ISITA, Auckland, New Zealand, Dec. 2008.
[7] R. Koetter and P. Vontobel, “Graph-covers and iterative decoding of ﬁnitelength codes,” Proc. of IEEE ISTC, Brest, France, Sep. 2003.
[8] C. Poulliat, M. Fossorier and D. Declercq, “Design of regular (2,dc )LDPC codes over GF(q) using their binary images,” IEEE Trans. on
Comm., vol. 56, no. 10, pp. 1626-1635, Oct. 2008.
[9] G. Liva, E. Paolini, S. Scalise and M. Chiani, “Turbo codes based on
time-variant memory-1 convolutional codes over Fq ,” Proc IEEE ICC,
Kyoto, Japan, June 2011.
[10] J. Thorpe, “Low-density parity-check (LDPC) codes constructed from
protographs,” IPN Progress Report, Tech. Rep. 42-154, Aug. 2003.
[11] P.O. Vontobel, ”Counting in graph covers: a combinatorial characterization of the Bethe entropy function,” submitted to IEEE Trans. on Info.
Theory, Nov. 2010. http://arxiv.org/abs/1012.0065

acj (δ j )

nv

−

88
"! !

0

in bits n = 128, 256, 512, respectively. The circulants for the
shortest block of n = 128 are also shown on the edges of
the base protograph. The binary image of these codes were
simulated over the BI-AWGN channel. The simulation performance using 100 iterations are shown in Fig. 2 in solid lines.
Performance of unconstrained PB NB codes (with random
scaling) is shown with squares. These codes outperform the
binary counterparts for short blocks by 1 dB. The example
clearly demonstrates that performance comparable to that of
unconstrained PB NB codes can be achieved by GC PBN
codes.
VII. C ONCLUSION
In this paper we introduced a novel class of structured
non-binary LDPC codes, based on graph covers. We derived
various enumerators of the proposed ensembles.
It is worth to mention that it may be possible to reformulate
our setup in terms of normal factor graphs. If so, then the
ensembles could be seen as special cases in [11] and some
partial results therein seem to be relevant.
R EFERENCES

˜
where α = a/n and β = b/n. The growth rate in terms of N ,
˜
r(α, β), is
nc
{δl :vl ∈V } {δk :vk ∈F }

"2

Fig. 2. An example of a GC-NBP code construction, and performance for
various block sizes.

N

max { max {

!"

!

Note that here C j refers to the weight-vector CN enumerators with respect to Rq . These weight-vector enumerators are
readily evaluated using (3). Let the growth rate r(˜ , β) (in
˜α ˜
terms of n) be expressed as
ln Aa,b
r(α, β) = lim sup
˜ ˜ ˜
,
(12)
n
n→∞

r(α, β) =

!

!"#$%*'

!'

and

.

"8

!"#$%+'

!"#$%&'

N

AC j (dj )

" 89

"3

!"#$%('

{di :vi ∈Vq } {dk :vk ∈Wq }

under

0
" 81 "

" 0 "0

the

{δi :vi ∈Wq } δi
cj

We constructed a GC PBN code with the ﬁxed non-zero set
of scalings over GF(256), as shown in Fig. 2. This protograph
is lifted (via copy-permute operations) using circulant permutation matrices σ i (the unit left circular shift of the identity
matrix represents σ) of size N × N , for N = 4, 8, 16 to
generate rate-1/2 GC PBN codes with equivalent block-lengths

5

