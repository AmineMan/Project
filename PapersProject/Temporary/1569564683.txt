Creator:         TeX output 2012.05.15:1933
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Tue May 15 19:33:50 2012
ModDate:        Tue Jun 19 12:54:53 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      291118 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569564683

On Fast and Memory-Efﬁcient Construction of an
Antidictionary Array
Hirotada Fukae

Takahiro Ota

Hiroyoshi Morita

Electronic Information Technology Dept.
Dept. of Computer & Systems
Grad. School of Information Systems
Nagano Prefectural Institute of Technology University of Electro-Communications
Shikoku Polytechnic College
Chofu, Tokyo 182-8585, Japan
Ueda, Nagano 386-1211, Japan
Konan, Kochi 781-5232, Japan
Email: morita@is.uec.ac.jp
Email: fukae@kochi-pc.ac.jp
Email: ota@pit-nagano.ac.jp

Abstract— An antidictionary, a set of words that never appear
in a given string, is a useful data structure for source coding as
well as other ﬁelds of computer sciences. A fast and memoryefﬁcient algorithm for constructing antidictionaries by means of
sufﬁx array is presented. We prove that the proposed algorithm
constructs an antidictionary array with linear time and space.

is denoted by |x|, and note that we also use | · | to represent a
cardinality of a set and array. For a given string x, by letting
n = |x|, a substring xj is deﬁned as
i
{
xi · · · xj (1 ≤ i ≤ j ≤ n),
xj =
(1)
i
λ
(i > j).

I. I NTRODUCTION
Crochemore et al. [1] originally introduced an antidictionary, which is a set of minimal forbidden words, for a
lossless data compression in 2000. A minimal forbidden word
is a string of minimal length which never appears on a given
input string. Various antidictionary codes have been proposed
so far [2]–[4]. Experimental results show that a version of
antidictionary codes by Ota and Morita [4] performs as well
as an efﬁcient off-line data compression algorithm using
the Burrows-Wheeler transformation [5]. Up to the present,
there have been proposed three efﬁcient algorithms [6]–[8]
for constructing antidictionaries as far as the authors know.
For their construction, a sufﬁx automaton and a sufﬁx tree
are utilized by Crochemore et al. [6] and Ota and Morita [7],
[8], respectively. Although their algorithms are guaranteed to
construct an antidictionary with time and space proportional
to length of a given string, their complexity often exceed the
machine power for 10∼100M byte data.
To resolve the issues on the complexities, Fiala and
Holub [3] proposed a new construction algorithm of antidictionary by means of a sufﬁx array in 2008 since it is
known that a sufﬁx array can be constructed with linear time
and space complexity [9] as well and it has a much smaller
proportional coefﬁcient of the time and space complexities
compared with a sufﬁx automaton and a sufﬁx tree. However,
their algorithm requires O(n log n) time and O(n) space with
respect to input string length n.
In this paper, we propose a variation of a construction
algorithm of antidictionary by means of a sufﬁx array. In
addition to the sufﬁx array, we also introduce a new data
structure, called L-array [10], which represents the length of
the longest common preﬁx between two consecutive sufﬁxes
in the sufﬁx array. Moreover, we show that the proposed
algorithm works in O(n) time and space.

Hereafter, without any notice, we assume that the length of x
is always given by n. Hence, the substring xn of x equals x.
1
Let P(x) and S(x) be the set of all preﬁxes and sufﬁxes
of x, respectively.
P(x) = {xi |1 ≤ i ≤ n} ∪ {λ},
1
S(x) = {xn |1 ≤ j ≤ n} ∪ {λ}.
j

(2)
(3)

For a given xn , let π(xn ) and σ(xn ) be xn−1 ∈ P(xn )
1
1
1
1
1
and xn ∈ S(xn ) For convenience, we deﬁne π(λ) = λ
1
2
and σ(λ) = λ. For a non-negative integer k, let π k (xn ) and
1
σ k (xn ) be the functions π(·) and σ(·) applied k times to a
1
string xn , respectively, where π 0 (xn ) = xn and σ 0 (xn ) = xn .
1
1
1
1
1
A dictionary D(x) is deﬁned as the set of all substrings of
x, that is,
D(x) = {xj |1 ≤ i ≤ j ≤ n} ∪ {λ}.
i
A string

vk
1

(4)

∗

(k ≥ 1) ∈ X with the following three properties
v k ∈ D(x)
1 /

(5)

∈ D(x)

(6)

∈ D(x)

(7)

v k−1
1
vk
2

is called a Minimal Forbidden Word (MFW) of x. An antidictionary A(x) is the set of all MFWs of x. For convenience,
we deﬁne D(λ) = {λ} and A(λ) = X . For example,
A(x) for x = 122132 and X = {1, 2, 3, 4} is given by
{4, 11, 23, 31, 33, 121, 212, 222, 321, 322}.
Let lcp(v, w) be the length of the longest common preﬁx
between v and w in X ∗ , that is,
lcp(v, w) = max{|u| | u ∈ P(v) ∩ P(w)}.

(8)

A. Sufﬁx Array and L-array
A sufﬁx xn of x can be represented by its starting index j.
j
A sufﬁx array S is an array consisting of n + 1 integers that
represents the starting indexes of all the sufﬁxes of x in the
following lexicographical order:
Firstly, we introduce the total order into X , that is, ξi < ξj
for 1 ≤ i < j ≤ m. For convenience, λ < ξ1 . Secondly, for

II. BASIC N OTATIONS AND D EFINITIONS
Let X be a ﬁnite source alphabet {ξ1 , ξ2 , . . . , ξm }. Let X ∗
be the set of all ﬁnite strings over X , including the empty
string of length zero, denoted by λ. The length of a string x

1

strings v and w ∈ X ∗ \{λ}, v is said to be smaller than w in
the lexicographical order, denoted by v ≺ w, if and only if
(v1 < w1 ) ∨ (σ(v) ≺ σ(w)).

case of u ̸= λ, a ∈ XH (π(u))\XH (u) since au ∈ D(x) and
/
aπ(u) ∈ D(x). Hence, A(x) ⊂ {au | a ∈ H(u), u ∈ D(x)}.
Next, we assume a ∈ H(u) and u ∈ D(x). In case of
u = λ, X \XH (λ) is the set of all symbols which never appear
in x. Hence, if a ∈ X \XH (λ), then a ∈ A(x). In case of
u ̸= λ, au ∈ A(x) since aπ(u) ∈ D(x) and au ∈ D(x)
/
from (12). Hence, {au | a ∈ H(u), u ∈ D(x)} ⊂ A(x).
If H(u) ̸= ϕ for u ∈ D(x), we call u MFW candidate. Let
GT (x) be a set of all MFW candidates of x, that is,

(9)

Then, S(x) can be written as S(x) = {s0 , . . . , sn } (si ≺
sj , 0 ≤ i < j ≤ n) where s0 = λ. For convenience, we deﬁne
s−1 = sn+1 =⊥ where ⊥ represents the sentinel such that
⊥∈ X ∗ . And set lcp(⊥, v) = lcp(v, ⊥) = −1 for v ∈ X ∗ .
/
Let the kth component of S, denoted by S[k], be deﬁned as
S[k] = n − |sk | + 1

(0 ≤ k ≤ n).

GT (x) = {u | H(u) ̸= ϕ, u ∈ D(x)}.

(10)

As described in the next section, we use GT (x) and H(u)
for u ∈ GT (x) to construct A(x).

In other words, σ S[k]−1 (x) = sk . For x = 22212, S
is represented as an array ⟨6, 4, 5, 3, 2, 1⟩ since S(x) =
{λ, 12, 2, 212,2212, 22212}.
Let L be an array of integers, called L-array, in which the ith
component is given by lcp(si , si+1 ) for two adjacent sufﬁxes
si and si+1 where the index i runs from −1 to n. The array L
is also called hight array [10]. Note that L[−1] = L[n] = −1
and |L| = n + 2. For example, L is ⟨ − 1, 0, 0, 1, 1, 2, −1⟩ for
x = 22212.

B. Properties of Cover Set
Proposition 1. If C(u) ⊂ C(v) and |v| ≤ |u| for u, v ∈ D(x),
then v ∈ P(u) and vice versa.
Proof: We ﬁrst assume that C(u) ⊂ C(v) and |v| ≤ |u|.
Then, there exists i ∈ C(u) such that u ∈ P(si ) and v ∈
P(si ), which implies that v ∈ P(u).
Next, we assume that v ∈ P(u). Clearly, |v| ≤ |u| holds.
Since u is written as u = vw where w ∈ D(x), there exists
a sufﬁx si such that vw ∈ P(si ). Moreover, since v ∈ P(si ),
i ∈ C(v). Therefore, C(u) ⊂ C(v).

B. Head Symbol and Cover Set
For u ∈ D(x) and a ∈ X , the set of head symbols XH (u)
of u is deﬁned as
XH (u) = {a | a ∈ X , au ∈ D(x)}

Proposition 2. For u ∈ D(x),

(11)

|u| > L[p − 1] and |u| > L[q]

where a is called head symbol. Note that XH (λ) is a set of
all symbols which appear in x, and XH (u) is the empty set
ϕ iff u appears in x only once and u ∈ P(x). For u ∈ D(x),
a difference set between XH (π(u)) and XH (u), denoted by
H(u), is deﬁned as
{
X \XH (λ)
(u = λ),
H(u) =
(12)
XH (π(u))\XH (u) (u ̸= λ).

Proof: From (13), 0 ≤ p ≤ q ≤ n. In case of p = 0,
L[p − 1] = L[−1] = −1. Since |u| ≥ 0, we have |u| > L[p − 1].
In case of 1 ≤ p ≤ n, u ∈ P(sp−1 ) from (13). Therefore,
/
|u| > lcp(sp−1 , u). Moreover, since sp = uv for v ∈ X ∗ ,
lcp(sp−1 , u) = lcp(sp−1 , sp ) = L[p − 1] < |u|.
In case of q = n, L[q] = L[n] = −1 holds. Since |u| ≥ 0,
|u| > L[q]. In case of 0 ≤ q ≤ n−1, u ∈ P(sq+1 ) from (13).
/
Therefore, |u| > lcp(u, sq+1 ). Moreover, since sq = uw for
w ∈ X ∗ , lcp(u, sq+1 ) = lcp(sq , sq+1 ) = L[q] < |u|. Thus, (17)
holds.
Next, if p < q, then u ∈ P(sk ) for p ≤ k ≤ q. Therefore,
|u| ≤ min{L[i] | p ≤ i ≤ q − 1} since |u| ≤ L[j] for p ≤ j ≤
q − 1.

(13)

where C(λ) = {0, 1, . . . , n}. Moreover, let C(u). min
and C(u). max be C(u). min = min{i | i ∈ C(u)} and
C(u). max = max{i | i ∈ C(u)}, respectively. For example,
for x = 22212 and u = 22, C(u) = {4, 5}. By using C(u),
XH (u) can be written by
XH (u) = {xk | k = S[i] − 1, i ∈ C(u), k ≥ 1}.

IV. C ONSTRUCTION OF A NTIDICTIONARY
A. Construction of MFW Candidates
Since |D(x)| in (15) is proportional to n2 in the worst case,
a na¨ve construction of A(x) requires O(n2 ) time. The next
ı
theorem gives a ground to construct an antidictionary with
O(n) computational time.

(14)

III. P ROPERTIES OF H EAD S YMBOLS AND C OVER S ET
A. Representation of Antidictionary with Head Symbols
An antidictionary A(x) can be represented by a ∈ H(u)
and u ∈ D(x) from Theorem 1.

Theorem 2. For x ∈ X ∗ , GT (x) ⊂ G(x) and |G(x)| ≤ 2n+1.
To prove Theorem 2, we ﬁrst give Lemmas 1 and 2
described below. Before showing the lemmas, we prepare a
few more notations. For i (0 ≤ i ≤ n), partition P(si ) into
two disjoint subsets F(i) and E(i) deﬁned by

Theorem 1. For a ∈ H(u) and u ∈ D(x),
A(x) = {au | a ∈ H(u), u ∈ D(x)}.

(17)

where p and q are C(u). min and C(u). max, respectively.
Moreover, if p < q, then |u| ≤ min{L[i] | p ≤ i ≤ q−1}.

For u ∈ D(x), there exists v ∈ S(x) having u as its preﬁx,
that is, v = uz for z ∈ X ∗ . A cover set C(u) is a set of
successive indexes i of si ’s such that u is a preﬁx of si ;
C(u) = {i | u ∈ P(si ), 0 ≤ i ≤ n}

(16)

(15)

Proof: We ﬁrst assume that au ∈ A(x). From (7), a ∈ X
and u ∈ D(x). In case of u = λ, a ∈ D(x). Since XH (λ) is
/
the set of all symbols which appear in x, a ∈ X \XH (λ). In

F(i) = {v∈P(si )||v| = lcp(si , sk )+1, −1 ≤ k ≤ n+1}, (18)
̸
E(i) = {v∈P(si )||v| = lcp(si , sk )+1, −1 ≤ k ≤ n+1}. (19)

2

∪n ¯
∪n
Let GU (x) and GD (x) be i=0 {¯ i } and i=0 {di }. We
u
construct G(x) from GU (x) and GD (x) by mean of the Merge
Sort [11] in linear time. Then, GU (x) and GD (x) can be
written as

¯
¯
Moreover, for si (0 ≤ i ≤ n), let ui ∈ P(si ) and di ∈ P(si )
be the strings such that
|¯ i | = L[i − 1] + 1,
u
¯
|di | = L[i] + 1≤|si |.

(20)
(21)

GU (x) = {u0 , . . . , un } (ui ≺ uj , 0 ≤ i < j ≤ n),
(25)
GD (x) = {d0 , . . . , dk } (di ≺ dj , 0 ≤ i < j ≤ k, k = |GD (x)|).
(26)

¯
¯
¯
Note that, for ui and di , both C(¯ i ). min and C(di ). max
u
¯
equal i and in case of L[i] = |si |, di does not exist.
Lemma 1. If v ∈ F (i), then H(v) = ϕ.

¯
¯
Since ui and di are also represented by (24), we will give
Propositions 3 and 4 to construct GU (x), GD (x), and G(x).

Proof: We assume that H(v) ̸= ϕ. Since λ ∈ E(i), we
consider the case that v ∈ P(si )\{λ}. From the assumption,
there exists a ∈ XH (π(v))\XH (v) = H(v). Therefore,
aπ(v) ∈ D(x) and av = aπ(v)b ∈ D(x) hold. Moreover,
/
there exists w ∈ X ∗ such that aπ(v)w ∈ D(x) and b ∈ P(w).
/
Since lcp(π(v)b, π(v)w) = |π(v)| and π(v)b is a preﬁx of
si , lcp(si , π(v)w) = |π(v)|.
On the other hand, since π(v)w ∈ D(x), there exists k
such that sk has π(v)w as its preﬁx. Therefore, lcp(si , sk ) =
|π(v)|. However, since |v| = |π(v)| + 1, it contradicts the
assumption |v| ̸= lcp(si , sk ) + 1. Therefore, H(v) = ϕ.

Proposition 3. For u, v ∈ D(x), if C(u). min < C(v). min,
then u ≺ v.
Proof: Let C(u). min and C(v). min be i and j, respectively. From (13), u ∈ P(si ), and v ∈ P(sj ). From (13) and
i < j, i ∈ C(v). Therefore, from (13), u ∈ P(sj ). Moreover,
/
/
since si ≺ sj , u ≺ v holds.
Since C(¯ i ). min = i, C(¯ i ). min < C(¯ j ). min holds for
u
u
u
j such that 0 ≤ i < j ≤ n. Therefore, Corollary 1 holds.
¯
¯
¯
¯
Corollary 1. For ui and uj such that 0 ≤ i < j ≤ n, ui ≺ uj .

¯
Lemma 2. If z ∈ E(i), then there exists k such that z = uk
¯
or z = dk .

¯
From Corollary 1, GU (x) can be written as ⟨¯ 0 , . . . , un ⟩.
u
¯
In other words, ui = ui (0 ≤ i ≤ n). To construct GD (x)
and G(x) in O(n) time, we give Proposition 4.

Proof: Let l and m be C(z). min and C(z). max, respectively. From (19) and since S(x) is an array of all sorted
sufﬁxes, |z| = lcp(sl−1 , si ) + 1 or |z| = lcp(si , sm+1 ) +
1. Moreover, from (13), lcp(sl−1 , si ) = lcp(sl−1 , sl ) and
lcp(si , sm+1 ) = lcp(sm , sm+1 ). Since lcp(sl−1 , sl ) + 1 =
L[l−1]+1 and lcp(sm , sm+1 )+1 = L[m]+1, |z| = L[l−1]+1
or |z| = L[m] + 1. Therefore, k is given by m or l − 1. It
completes the proof.
From Lemmas 1 and 2, a set of MFW candidates, denoted
by G(x), is given by
∪
¯
({¯ i } ∪ {di }).
u
(22)
G(x) =

Proposition 4. For u, v ∈ D(x), if C(u). min = C(v). min
and C(u). max > C(v). max, then u ≺ v.
Proof: From (13), C(v) ⊊ C(u). We assume that |u| ≥ |v|.
For p ∈ C(u) ∩ C(v), u ∈ P(sp ) and v ∈ P(sp ). Therefore,
from the assumption |u| ≥ |v|, C(u) ⊂ C(v). It contradicts
the assumption C(v) ⊊ C(u). Hence, |u| < |v| holds. Since
|u| < |v| and C(v) ⊂ C(u), from Proposition 1, u ≺ v.
¯
In a na¨ve construction of ui , we do obtain |¯ i | and
ı
u
C(¯ i ). min in (24) in a constant time while we may not
u
do C(¯ i ). max so. On the other hand, from Proposition 2,
u
C(¯ i ). max = min{j | |¯ i | > L[j], i ≤ j ≤ n}. In other
u
u
words, for a given i, C(¯ i ). max is the nearest small right
u
¯
neighborhood. Similarly, in a na¨ve construction of di , we
ı
¯
¯
obtain |di | and C(di ). max in (24) in a constant time while we
¯
may not C(di ). max. On the other hand, from Proposition 2,
¯ i ). max = max{k | |di | > L[k − 1], 0 ≤ k ≤ i}. Thus,
¯
C(d
¯ i ). max is the nearest small left neighborhood. The total
C(d
time of the nearest right and left small neighborhood is O(n)
and the details are described in this section. Note that a
ﬁnding nearest large (small) neighborhood algorithm in linear
complexity has been proposed [12].
We now present the algorithm to construct G(x) in linear
time. We will use a stack s to store integers as its elements.
Let s.push (·) and s.pop() be the functions to store and retrieve
elements from the stack, respectively, and let s.is empty()
be the function to check whether the stack is empty. If di
¯
does not exists for i, we denote di by ε. Moreover, for
g ∈ G(x), let g.len, g.min, and g.max be |g|, C(g). min,
and C(g). max, respectively. The algorithm uses the procedure
merge sort(GU (x), GD (x)) to construct G(x) using the Merge
Sort algorithm by means of Propositions 3 and 4. In the Merge
Sort, notice that if a string is already stored in G(x), then its

0≤i≤n

(Proof of Theorem 2): For u ∈ D(x)\G(x), there exists
k such that u ∈ F (k) since D(x) can be written by {v | v ∈
P(si ), 0 ≤ i ≤ n}. Therefore, from Lemma 1, |H(u)| = 0.
On the other hand, u ∈ D(x) and |H(u)| ≥ 0 for u ∈ G(x).
Therefore, from (16), GT (x) ⊂ G(x) holds. From (20) and
¯
(21), {¯ i } is a singleton set and {di } is a singleton set or
u
¯
ϕ. Since L[−1] = L[n] = −1, {¯ 0 } = {dn } = {λ}. If
u
¯
n∪ 1, then {d0 } = ϕ for s0 = λ and L[0] = 0. Therefore,
≥
n
¯
u
| i=0 ({¯ i } ∪ {di })| ≤ 2n + 1. Hence, |G(x)| ≤ 2n + 1.
From Theorem 2, the upper bound of the total number of
¯
MFW candidates is at most 2n+1. From (20) and (21), ui and
¯
di can be obtained in a constant time by means of S and L.
On the other hand, we need to sort all elements of G(x) to
calculate both XH (v) and XH (π(v)) for a given v ∈ G(x) in
a constant time. Here, G(x) can be written as
G(x) = {g 0 , . . . , g m } (g i ≺ g j , 0 ≤ i < j ≤ m)

(23)

where m = |G(x)|−1 and g 0 = λ. Moreover, from (14), both
C(v). min and C(v). max are required to calculate XH (v).
Therefore, g i is represented by a triplet
(|g i |, C(g i ). min, C(g i ). max).

(24)

3

duplicate is never added to G(x). The outline of the algorithm
is as follows.
Algorithm construct G
input : a sufﬁx array S and an L-array L
output : a set of all sorted MFW candidates G(x)
begin
/∗ Step 1: initialize ∗/
j ← n;
for i := 0 to n do begin
¯
ui ← (L[i − 1] + 1, i, −1); di ← (L[i] + 1, −1, i);
if (|si | ≤ L[i]) /∗ GD (i) = ϕ ∗/
¯
di ← ε; j ← j − 1;
end for;
/∗ Step 2: construction of GU (x) ∗/
for k := 0 to n do begin
s.push (k);
while (s.is empty() ̸= true) begin
i ← s.pop();
if (ui . len > L[k])
ui .max ← k;
else
s.push (i); break;
end while;
end for;
/∗ Step 3: construction of GD (x) ∗/
for k := n to 0 do begin
(
)
¯
if dk ̸= ε s.push (k);
while (s.is empty() ̸= true) begin
i ← s.pop();
(
)
¯
if di . len > L[k − 1]
¯
¯
di .min ← k; dj ← di ; j ← j − 1;
else
s.push (i); break;
end while;
end for;
/∗ Step 4: construction of G(x) ∗/
G(x) ← merge sort(GU (x), GD (x));
return G(x);
end.

C(π(g i )) ⊂ C(g l(i) ). In case of |π(g i )| = |g l(i) |, since π(g i ) =
g l(i) , XH (π(g i )) = XH (g l(i) ) holds.
Next, we consider the case that |g l(i) | < |π(g i )|. We assume
that C(g l(i) )\C(π(g i )) ̸= ϕ. For j ∈ C(g l(i) ) ∩ C(π(g i ))
and k ∈ C(g l(i) )\C(π(g i )), lcp(sj , sk ) = |g l(i) | since
g l(i) ∈ P(π(g i )). Hence, from (19), there exists w ∈ X ∗
such that w ∈ E(j) and |w| = |g l(i) | + 1 so that w ∈ G(x)
from Lemma 2. On the other hand, since g l(i) , w ∈ P(g i )
and |g l(i) | < |w| < |g i |, g l(i) ≺ w ≺ g i . However, it
contradicts the maximality of g l(i) since g l(i) ≺ w ≺ g i
and |g l(i) | < |w| < |g i |. Hence, C(g l(i) )\C(π(g i )) = ϕ.
Therefore, from (14), XH (π(g i )) = XH (g l(i) ).
From Proposition 5, Corollary 2 holds.

1
2
3
4
5
6
7
8
9

Corollary 2. For g i (̸= λ), H(g i ) = XH (g l(i) )\XH (g i ).

10

From Corollary 2, to obtain XH (π(g i )), we can utilize g l(i)
instead of π(g i ).
We now present the algorithm to construct H(g i ) in linear
time. Let XH (i) and H be XH (g i ) and an array of H(g i ), respectively. For a given a ∈ X , XH (i).add(a) and H(u).add(a)
add a symbol a to XH (i) and H(u), respectively.

11
12
13
14
15
16
17

Algorithm construct H
input : a 3-tuple (x, S, G(x))
output : H (an array of H(g i ) (0 ≤ i ≤ |G(x)| − 1))
begin
/∗ Step 1: initialize ∗/
k ← |G(x)| − 1; p ← 0;
for (∀a ∈ X )
Λ(a) ← n+1; /∗ last index that symbol a appeared ∗/
/∗ Step 2: construction of XH (g i ) ∗/
for i := n to 0 do begin
if (S[i] − 1 ≥ 1)
Λ(xS[i]−1 ) ← i; /∗ update last index ∗/
while (g k .min = i) begin
for (∀a ∈ X )
if (Λ(a) ≤ g k .max)
XH (k).add(a);
end for;
k ← k − 1;
end while;
end for;
/∗ Step 3: construction of H(g i ) ∗/
for (∀a ∈ X )
if (Λ(a) = n + 1)
H(g 0 ).add(a); /∗ set H(λ) ∗/
end for;
/∗ Step 3-1: set l(i) ∗/
for i := 1 to |G(x)| − 1 do begin
while (g p . len ≥ g i . len)
p ← s.pop();
l(i) ← p; s.push (p); p ← i;
end for;
/∗ Step 3-2: set H(g i ) (i ≥ 1) ∗/
for i := 1 to |G(x)| − 1 do
H(g i ) ← XH (l(i))\XH (i);
return H;
end.

18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34

In Step 2 and Step 3, ﬁnding the nearest right (resp.
left) small neighborhoods for ui . len and di . len are implemented, respectively. Moreover, in Step 3, GD (x) is built
¯ ¯
¯
¯
from {di | di ̸= ε, 0 ≤ i ≤ n}. For di and dj (i < j), since
¯
¯
¯ ¯
C(di ). max < C(dj ). max, {di | di ̸= ε, 0 ≤ i ≤ n} is a set
of sorted strings with respect to the maximum value of their
cover sets. From Propositions 3 and 4, GD (x) can be built from
¯ ¯
{di |di ̸= ε, 0 ≤ i ≤ n} by means of the nearest small left
neighborhood searching algorithm. Step 4 uses Propositions 3
and 4 to sort strings in GU (x) and GD (x) by the Merge Sort.
B. Construction of Sets of Head Symbols
For g i (̸= λ), let l(i) be an integer such that l(i) =
max{j | j < i, |g j | < |g i |}. For a given g i , to calculate
XH (π(g i )) in a constant time, we ﬁrst show Proposition 5.
Proposition 5. For a given g i (̸= λ), XH (π(g i )) = XH (g l(i) ).
Proof: Since G(x) is an array of sorted strings, g l(i) is
the longest string in P(g i ) ∩ {g 0 , . . . , g i−1 }. Moreover, since
|g l(i) | < |g i |, g l(i) ∈ P(π(g i )). Hence, from Proposition 1,

4

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33

For a given a and u, if Λ(a) ∈ C(u), then a ∈ XH (u).
Thus, Step 2 uses the fact whether g k .min ≤ Λ(a) ≤ g k .max
is satisﬁed or not. Step 3-1 calculates l(i) , and g l(i) is the
nearest left small neighborhood for g i with respect to string
length. Step3-2 utilizes Proposition 5.

As for T1 , T1 = O(1). In Step 2, since 0 ≤ i ≤ n and
from Theorem 2, the total number of times of operations in
lines 10-16 is upper bounded by 3n+1. Hence, T2 = O(n).
For T3 , T3 = T31 + T32 + c where c is a positive constant.
In Step 3-1, the number of times of s.push (·) and s.pop() is
upper bounded by 2n since g 0 has the strictly smallest length
0 among all the elements of the stack. Hence, T31 = O(n).
Since T32 = O(n), T3 = O(n). Therefore, TH (n) = O(n).

C. Construction of Antidictionary
From Theorem 1, A(x) can be constructed from G(x)
and H. We now present the algorithm to construct A(x) in
linear time. In the proposed algorithm, an MFW u (= av) is
represented by a triplet (a, i, l) where a ∈ H(u), i is the start
index of v in x, and l = |v|. In case of u = λ, l = 0.
The algorithm uses the procedure construct sufﬁx array(x)
and construct L array(x, S) to construct S and L using the
algorithm presented in [9] and [10], respectively. The outline
of the algorithm is as follows.
Algorithm SA2AD
input : a string x of length n
output : an antidictionary A(x)
begin
/∗ Step 1: construction of a sufﬁx array S ∗/
S ← construct sufﬁx array(x);
/∗ Step 2: construction of an L-array L ∗/
L ← construct L array(x, S);
/∗ Step 3: construction of a set of MFW candidates G(x) ∗/
G(x) ← construct G(S, L);
/∗ Step 4: construction of a set of head symbols H ∗/
H ← construct H(x, S, G(x));
/∗ Step 5: construction of an antidictionary A(x) ∗/
for i := 0 to |G(x)| − 1 do begin
for (∀a ∈ H(g i ))
A.add ((a, g i .min, g i . len));
return A(= A(x));
end.

(Sketch of Proof of Theorem 3): Let T1 , T2 , T3 , T4 , and
T5 be the execution time of Step 1, Step 2, Step 3, Step 4,
and Step 5, respectively. The time complexity T (n) of the
proposed algorithm can thus be expressed by T (n) = T1 +
T2 + T3 + T4 + T5 .
From [9], T1 = O(n), and from [10], T2 = O(n). Moreover,
from Theorem 4, T3 = O(n), and from Theorem 5, T4 =
O(n). From Theorem 2, since |G(x)| ≤ 2n + 1, T5 = O(n).
It follows that T (n) = O(n).
From Theorem 3, the proposed algorithm SA2AD works
in linear time. Moreover, the proposed algorithm works in
linear space. The proof with respect to computational space is
omitted here.

1
2
3
4

VI. C ONCLUSION
We presented a fast and memory-efﬁcient algorithm for the
construction of the antidictionary of a given string, and we
showed that the time and space complexity is linear with the
string length. This allows antidictionary codes to use extremely
longer string lengths and thus yield better compression.

5
6
7
8
9
10
11

R EFERENCES

12

[1] M. Crochemore, F. Mignosi, A. Restivo and S. Salemi, “Data Compression Using Antidictionaries,” Proc. of IEEE, vol.88, no.11, pp.1756–1768,
Nov. 2000.
[2] M. Crochemore, C. Epifanio, R. Grossi, and F. Mignosi, “A Trie-Based
Approach for Compacting Automata,” Proc. of Combinatorial Pattern
Matching 15th Annual Symp. (CPM’04), vol.3109, pp.145–158, Jul. 2004.
[3] M. Fiala and J. Holub, “DCA Using Sufﬁx Arrays,” Proc. of Data
Compression Conference (DCC2008), pp.516, May 2008.
[4] T. Ota and H. Morita, “On the Adaptive Antidictionary Code Using
Minimal Forbidden Words with Constant Lengths,” Proc. of 2010 Int’l
Symp. on Information Theory and its Applications (ISITA2010), pp.72-77,
Oct. 2010.
[5] M. Burrows and D.J. Wheeler, “A Block-Sorting Lossless Data Compression Algorithm,” SRC Research Report, May 1994.
[6] M. Crochemore, F. Mignosi and A. Restivo, “Automata and Forbidden
Words,” Information Processing Letters, vol.67, no.3, pp.111–117, Oct.
1998.
[7] T. Ota and H. Morita, “On the Construction of an Antidictionary with
Linear Complexity Using the Sufﬁx Tree,” IEICE Trans. on Fundamentals, vol.E90-A, no.11, pp.2533-2539, Nov. 2007.
[8] T. Ota, H. Morita, and H. Fukae, “On the Dynamic Construction of an
Antidictionary with Linear Complexity,” Proc. of 2011 IEEE Int’l Symp.
on Information Theory (ISIT2011), pp.2519–2523, Aug. 2011.
[9] J. K¨ rkk¨ inen and P. Sanders, “Simple Linear Work Sufﬁx Array Cona a
struction,” Proc. of 13th International Conference on Automata, Languages and Programming, 2003.
[10] T. Kasai, G. Lee, H. Arimura, S. Arikawa, and K. Park, “LinearTime Longest-Common-Preﬁx Computation in Sufﬁx Arrays and Its
Applications,” Text, vol. L, no. 1, Springer, pp. 181-192, 2001.
[11] R.Sedgewick, Algorithms in C, Addison-Wesley,1990.
[12] T. Asano, S. Bereg, and D. Kirkpatrick, “Finding Nearest Larger
Neighbors -A Case Study in Algorithm Design and Analysis-,” Lecture
Notes in Computer Science, vol. 5760, pp. 249-260, 2009.

13
14
15

V. M AIN R ESULTS
Let T (n) be time complexity of the SA2AD algorithm.
Theorem 3. For a given string x of length n, T (n) = O(n).
We ﬁrst prove Theorems 4 and 5 to prove Theorem 3.
For a given string x of length n, let TG (n) and TH (n) be
time complexity of the construct G and construct H algorithm,
respectively.
Theorem 4. For a given string x of length n, TG (n) = O(n).
Sketch of Proof: Let T1 , T2 , T3 , and T4 be the execution
time of Step 1, Step 2, Step 3 and Step 4, respectively. The
time complexity TG (n) of the proposed algorithm can thus be
expressed by TG (n) = T1 + T2 + T3 + T4 . From Theorem 2,
both T1 and T4 are O(n). In Step 2 and Step 3, the upper
bound on the number of times of s.push (·) is 2n+2. The
number of times of s.pop() is also upper bounded by 2n+2.
Therefore, T2 and T3 are O(n). Hence, TG (n) = O(n).
Theorem 5. For a given string x of length n, TH (n) = O(n).
Sketch of Proof: Let T1 , T2 , T3 , T31 , and T32 be the
execution time of Step 1, Step 2, Step 3, Step 3-1, and Step 32, respectively. The time complexity TH (n) of the proposed
algorithm can thus be expressed by TH (n) = T1 + T2 + T3 .

5

