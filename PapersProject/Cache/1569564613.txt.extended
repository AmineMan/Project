[[[ ID ]]]
1569564613
[[[ INDEX ]]]
161
[[[ TITLE ]]]
Jar Decoding: LDPC Coding Theorems for Binary Input Memoryless Channels
[[[ AUTHORS ]]]
E. Yang
J. Meng
[[[ ABSTR ]]]
Not saved
[[[ BODY ]]]
Not saved
[[[ REFS ]]]
T. J. Richardson
--
“The capacity of low-density paritycheck codes under message-passing decoding
----
G. Miller
--
“Bounds on the maximum-likelihood decoding error probability of low-density parity-check codes
----
I. Sason
--
“Parity-check density versus performance of
binary linear block codes over memoryless symmetric channels
----
T. Richardson
--
Modern Coding Theory
----
E.-H. Yang
--
“Jar decoding: Basic concepts and nonasymptotic capacity achieving coding theorems for channels with discrete
inputs
----
J. Meng
--
“Interactive encoding and decoding based on binary ldpc codes with syndrome accumulation
----
{xn : Hm×n xn = S m }
for use over our testing channel. Let X n denote the transmitted
codeword
--
the standard BP decoding algorithm was
used
[[[ META ]]]
xmlpapertitle -> Jar Decoding: LDPC Coding Theorems for Binary Input Memoryless Channels
pdf -> C:\Users\Amine\git\Project\PapersProject\PapersDataset\1569564613.pdf
parsed -> yes
xmlabstract -> Recently, a new coding rule called jar decoding was proposed, under which the decoder first forms a set of suitable size, called a jar, consisting of sequences from the channel input alphabet considered to be closely related to the received channel output sequence, and then takes any codeword from the jar as the estimate of the transmitted codeword. In this paper, we show that under jar decoding, the analysis of low density parity check (LDPC) codes is much easier compared to maximum a posteriori (MAP) or maximum likelihood (ML) and Belief Propagation (BP) decoding, and new LDPC coding theorems, which have not been proved under ML or BP decoding to our best knowledge, can be established. Specifically, it is proved that LDPC codes with any variable node degree distributions $L(z^k)$ and check node degree distributions $R(z^k)$ can approach the capacity, with diminishing bit error probability, of any binary input memoryless channel with uniform capacity-achieving distribution as $k$ increases. Moreover, simulation shows an interesting connection between jar decoding and BP decoding, i.e., BP decoding can be regarded as one of many ways to pick up a codeword from the jar for LDPC codes when it succeeds in outputting a codeword.
xmlsessionid -> S16.T5.1
xmlendtime -> 11:50
xmlpaperid -> 1569564613
linked -> yes
xmlsession -> S16.T5: Decoding Techniques for LDPC Codes
xmldate -> 1341567000000
file -> C:\Users\Amine\git\Project\PapersProject\PapersDataset\1569564613.txt
xmlstarttime -> 11:30
xmlauthors -> En-hui Yang, Jin Meng
xmlroom -> Kresge Little Theatre (035)
[[[ LINKS ]]]
0 2166.2923291718002
----
1 2331.2293961332552
----
2 2296.277407283922
----
3 1439.4698317833106
----
4 1510.5542602832024
----
5 587.9351484517388
----
6 851.7706294879623
----
7 1090.861744343418
----
8 4990.323475314051
----
9 1821.0647586756213
----
10 822.0276909707136
----
11 615.2099494710519
----
12 706.3625406907069
----
13 884.52881137047
----
14 895.3971329184976
----
15 1754.4780815384524
----
16 2264.344048375561
----
17 1787.7947049223678
----
18 2287.0556590007754
----
19 3105.444900392985
----
20 464.6569495096205
----
21 2971.9272342214736
----
22 1398.575675658827
----
23 778.1386618970926
----
24 3171.4956469303374
----
25 1277.0941100856458
----
26 1790.68905631283
----
27 4692.553272227741
----
28 3306.497942723573
----
29 1754.7310805388347
----
30 1263.537774485734
----
31 658.7899910577214
----
32 678.0655683918756
----
33 4726.920744425991
----
34 1258.2504218693584
----
35 5017.9975003436975
----
36 600.81247237182
----
37 1978.1337269477146
----
38 506.78648868928354
----
39 1492.2583874067632
----
40 2210.838911858111
----
41 2178.3863243099827
----
42 1131.9052514951916
----
43 2497.1406144281473
----
44 1130.3159122407221
----
45 1232.7116518210682
----
46 2997.654269841933
----
47 672.6232184355515
----
48 25557.527893909893
----
49 22250.35082933545
----
50 940.9140071138534
----
51 1627.1963088994985
----
52 3698.632078433196
----
53 2561.3031661701275
----
54 584.7325286907966
----
55 1140.0432222658071
----
56 1363.4171762815956
----
57 2996.7903549171438
----
58 930.020966562436
----
59 500.20715582722244
----
60 1804.3969169407062
----
61 922.6325870587231
----
62 954.0632440251204
----
63 3630.664409156452
----
64 1499.6806918047055
----
65 3915.4467769568623
----
66 5920.666369384211
----
67 1179.9601442779863
----
68 453.59348668865897
----
69 4498.529857719663
----
70 964.5157117466977
----
71 1281.5237610985603
----
72 1003.732817221665
----
73 1413.37908106164
----
74 2539.579958296791
----
75 2442.2392968616246
----
76 1460.4292162431
----
77 1074.9809310672995
----
78 858.5388445066427
----
79 2100.82577396185
----
80 2762.663222759641
----
81 3411.5258353929235
----
82 1317.283535637331
----
83 2248.4983297256945
----
84 1349.987470235224
----
85 3603.0062891011676
----
86 347.4161485855318
----
87 814.8976849565526
----
88 855.7987318668474
----
89 911.9614879284379
----
90 1124.7771434076005
----
91 1372.1301604691823
----
92 1821.2063923559747
----
93 1578.3163983945294
----
94 1174.8985748589816
----
95 2029.2514834657327
----
96 6013.790011577003
----
97 766.9467779533546
----
98 5950.419537169142
----
99 3404.0681799402364
----
100 2906.4661005268026
----
101 460.06822233893797
----
102 1618.431020541129
----
103 2843.3830408098825
----
104 861.2207443841417
----
105 1305.0087395734358
----
106 2472.5565739291446
----
107 2860.8934538195763
----
108 1367.5537088057229
----
109 1244.3158904683364
----
110 1624.339270590965
----
111 1300.5498504313773
----
112 1379.7519237882311
----
113 2016.9131212574455
----
114 888.7821992194054
----
115 2195.136228120438
----
116 981.267025136657
----
117 5263.996218001804
----
118 2385.124327430663
----
119 2330.188666332309
----
120 486.9500526360854
----
121 3187.565553633045
----
122 1007.894504252263
----
123 4451.250473421446
----
124 865.1850724016011
----
125 7771.309473912204
----
126 1134.458032972134
----
127 1055.6686156609778
----
128 2603.694843107224
----
129 1488.6859707429162
----
130 1986.8295870769223
----
131 648.0414376484131
----
132 1701.1144392503497
----
133 2080.1252116865835
----
134 1179.1242871670179
----
135 1848.8770209228846
----
136 36005.312395205234
----
137 1171.987867561918
----
138 1216.4343235541207
----
139 1710.5134209173166
----
140 1167.0374927213475
----
141 1903.2705158755587
----
142 15756.402985698634
----
143 3111.92645597973
----
144 3027.6359370943464
----
145 1341.5483672831915
----
146 1613.1909377435406
----
147 1850.8586964857254
----
148 1666.459250245009
----
149 3937.558547032882
----
150 1322.315660248125
----
151 1532.7403586863056
----
152 1862.2231829374296
----
153 483.004664937871
----
154 2963.50129407204
----
155 2377.2817284365806
----
156 3106.216033329044
----
157 2546.8850256584064
----
158 2631.801278843842
----
159 1183.0400854226211
----
160 827.3314071917092
----
162 2613.6753507557014
----
163 2273.626670507334
----
164 1196.6378467491259
----
165 651.6549856468507
----
166 2258.280089236263
----
167 507.30947611680733
----
168 1057.504718842385
----
169 1004.4792291646929
----
170 1595.386108530838
----
171 1131.5745408397993
----
172 519.2954022378343
