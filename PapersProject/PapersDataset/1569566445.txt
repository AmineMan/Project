Creator:        TeX
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 17:14:36 2012
ModDate:        Tue Jun 19 12:55:32 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      585255 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569566445

On the Feasibility of Precoding-Based Network
Alignment for Three Unicast Sessions
Chun Meng, Abinesh Ramakrishnan, Athina Markopoulou, Syed Ali Jafar
Department of Electrical Engineering and Computer Science
University of California, Irvine
Email: {cmeng1, abinesh.r, athina, syed}@uci.edu
However, an important difference from the wireless interference channel is that, in our problem, network topology
might introduce dependencies between elements of the transfer
matrix, which make PBNA infeasible in some networks [11].
As a ﬁrst step, [9] provided a set of feasibility conditions
for PBNA, and proved they are sufﬁcient for the feasibility
of PBNA with respect to a particular precoding matrix. One
important limitation is that the set consists of an inﬁnite
number of conditions, which makes it impossible to check
in practice. Another limitation is the lack of consideration
of graph structures, which is the reason for the signiﬁcant
redundancy in the set. Ramakrishnan et al. [11] conjectured
that the inﬁnite set of conditions can be reduced to just two
conditions. Han et al. [12] proved that the conjecture actually
holds for three symbol extensions; unfortunately, this result
cannot be generalized beyond three symbol extensions.
In this paper, we make the following contributions. First,
we prove that the set of conditions provided in [9] are also
necessary for the feasibility of PBNA with respect to any
valid precoding matrix. Then, using a simple degree-counting
technique and two graph-related properties, we greatly reduce
the set to just three conditions; two of them turn out to
have an intuitive interpretation in terms of graph structure.
Finally, we present an efﬁcient algorithm for checking the
three conditions.
The rest of this paper is organized as follows. In Section
II, we present the problem formulation. In Section III, we
summarize our main results. In Section IV, we discuss the
graph-related properties that are key to the simpliﬁcation of
the conditions. In Section V, we prove and discuss our main
results regarding the feasibility condition of PBNA. In Section
VI, we present an algorithm for checking the condition. In
Section VII, we conclude the paper.

Abstract—We consider the problem of network coding across
three unicast sessions over a directed acyclic graph, when each
session has min-cut one. Previous work by Das et al. adapted
a precoding-based interference alignment technique, originally
developed for the wireless interference channel, speciﬁcally to
this problem. We refer to this approach as precoding-based
network alignment (PBNA). Similar to the wireless setting, PBNA
asymptotically achieves half the minimum cut; different from the
wireless setting, its feasibility depends on the graph structure.
Das et al. provided a set of feasibility conditions for PBNA
with respect to a particular precoding matrix. However, the set
consisted of an inﬁnite number of conditions, which is impossible
to check in practice. Furthermore, the conditions were purely
algebraic, without interpretation with regards to the graph
structure. In this paper, we ﬁrst prove that the set of conditions
provided by Das. et al are also necessary for the feasibility of
PBNA with respect to any precoding matrix. Then, using two
graph-related properties and a degree-counting technique, we
reduce the set to just four conditions. This reduction enables
an efﬁcient algorithm for checking the feasibility of PBNA on a
given graph.

I. I NTRODUCTION
Network coding was originally introduced to maximize the
rate of a single multicast session over a network [1] [2]
[3]. However, network coding across different sessions, which
includes multiple unicasts as a special case, is a well-known
open problem. For example, ﬁnding linear network codes for
multiple unicasts is NP-hard [4]. Thus, suboptimal, heuristic
approaches, such as linear programming [5] and evolutionary
approaches [6], are typically used. Moreover, while it has been
shown that scalar or vector linear network codes might be
insufﬁcient to achieve the optimal rate [7], only approximation
methods [8] exist to characterize the rate region for this setting.
In this paper, we consider the simplest inter-session linear network coding scenario: three unicast sessions over a
directed acyclic graph, each session with min-cut one. Das
et al. [9] applied a precoding-based interference alignment
technique, originally developed by Cadambe and Jafar [10]
for wireless interference channel, to this problem; we refer to
this technique as precoding-based network alignment (PBNA).
In a nutshell, PBNA (i) simulates a wireless channel through
random network coding [3] in the middle of the network
and (ii) applies interference alignment at the edge, i.e., via
precoding at the sources and decoding at the receivers. This
way, it greatly simpliﬁes the network code design, while it
guarantees that each unicast session asymptotically achieves a
rate equal to half of its minimum cut [9].

II. P ROBLEM F ORMULATION
The network is a delay-free directed acyclic graph, denoted
by G = (V, E), where V is the set of nodes and E the set of
edges. Without loss of generality, each edge has capacity one,
i.e., can transmit one symbol of ﬁnite ﬁeld F2m in a unit time.
For the ith unicast session (i ∈ {1, 2, 3}), let si and di be its
sender and receiver respectively, and Ri its transmission rate.
Every edge e ∈ E represents an error free channel. We assume
that the minimum cut between si and di is one. Let Xi be the
source symbol transmitted at si and Zi be the symbol received
at di . We further extend G as follows: For the ith unicast
session (i ∈ {1, 2, 3}), we add a virtual sender si and a virtual
receiver di and two edges σi = (si , si ) and τi = (di , di ). The

This work was supported by the NSF CAREER award (0747110), AFOSR
MURI (FA9550-09-1-0643) and ONR (N00014-12-1-0067).

1

matrix. First, we reformulate A1 , A2 , A3 as:

extended graph is denoted by G = (V , E ). For e ∈ E , let
head(e) and tail(e) denote its head and tail respectively.

A1 : M12 V2 = M13 V3 A
A2 : M23 V3 = M21 V1 B
A3 : M32 V2 = M31 V1 C

In the middle of the network, we employ random network
coding [3] to mimic wireless channel. The symbol transmitted
along e ∈ E is a linear combination of incoming symbols
at tail(e). For e , e ∈ E such that head(e ) = tail(e), let
xe e be a random variable, which takes values from F2m and
represents the coding coefﬁcient used to combine the incoming
symbol along e into the symbol along e. We group all coding
coefﬁcients xe e ’s into a vector x, called the coding vector of
G . The network acts as a linear system: the output at di is
3
a mixture of source symbols, Zi = j=1 mij (x)Xj , where
mij (x) ∈ F2m [x] is the transfer function from sj to di and
can be written as follows [2]:
mij (x) =

P ∈Pij

t(P )

where A is an n × n invertible matrix, and B and C are both
(n + 1) × n matrices with rank n. A1 , A2 , A3 can be further
condensed into a single condition:
TV1 C = V1 BA

where T = M12 M−1 M23 M−1 M31 M−1 . Finally, conditions
21
32
13
B1 , B2 , B3 are reformulated as:
B1 :
B2 :

ψ1 (ξ) = det(V1
ψ2 (ξ) = det(V1

P1 V1 C) = 0
P2 V1 C) = 0

B3 :

(1)

where Pij is the set of paths from sj to di , and t(P ) is the
product of coding coefﬁcients along path P . We assume that
all mij (x)’s are non-zeros, which is the most challenging case.
Indeed, as shown in [13], when some mij (x) (i = j) is zero,
the feasibility condition of PBNA is signiﬁcantly simpliﬁed
due to reduced number of interferences.

ψ3 (ξ) = det(V1

P3 V1 CA−1 ) = 0

where P1 = M31 M−1 M12 M−1 , P2 = M31 M−1 M22 M−1 ,
11
32
21
32
and P3 = M12 M−1 M33 M−1 , and ψ1 (ξ), ψ2 (ξ), ψ3 (ξ)
32
13
are rational functions in the ﬁeld F2m (ξ). Deﬁne ψ(ξ) =
3
m
i=1 ψi (ξ). We assume that F2 is sufﬁciently large such that
if ψ(ξ) is a non-zero rational function, there are assignment
of values to ξ, denoted by ξ0 , such that ψ(ξ0 ) = 0.
We also deﬁne the following rational functions:

At the edge of the network, we apply interference alignment
[9] [10] via precoding at senders and decoding at receivers.
k
1
Let Xi = (Xi , · · · , Xi i )T denote the input vector at sender
si , where ki = n + 1 for i = 1 and ki = n otherwise. We use
precoding matrix Vi to encode Xi into 2n+1 symbols, which
are then transmitted in 2n + 1 time slots. The output vector
3
2n+1 T
1
at di is Zi = (Zi , · · · , Zi
) = j=1 Mij Vj Xj , where
Mij is a (2n + 1) × (2n + 1) diagonal matrix with the (k, k)
element being mij (xk ), where xk represents the coding vector
for the kth use of the network. V1 is a (2n + 1) × (n + 1)
matrix, and V2 , V3 are both (2n+1)×n matrices. Vi can still
contain indeterminate variables. Let ξ denote the vector of all
variables in x1 , · · · , x2n+1 and V1 , V2 , V3 . We require the
following conditions are satisﬁed for some values of ξ [10]:
A1 :
A2 :
A3 :
B1 :
B2 :
B3 :

(2)

m31 (x)m22 (x)
m31 (x)m12 (x)
p2 (x) =
m11 (x)m32 (x)
m21 (x)m32 (x)
m12 (x)m33 (x)
m31 (x)m12 (x)m23 (x)
p3 (x) =
η(x) =
m32 (x)m13 (x)
m21 (x)m32 (x)m13 (x)

p1 (x) =

(3)

Clearly, pi (x) and η(x) form the elements along the diagonals of Pi and T respectively. Hence, the following lemma
holds:
Lemma 1: R∗ is feasible through PBNA if and only if 1)
n
Eq. (2) is satisﬁed, and 2) B1 , B2 , B3 are satisﬁed.
The fundamental design problem in PBNA is to ﬁnd V1
such that all the conditions in Lemma 1 are satisﬁed. Indeed,
the major restriction on V1 comes from Eq. (2). As shown
in [9], the construction of V1 depends on whether η(x) is
constant. When η(x) is constant, and thus T = I2n+1 , we set
C = BA. Therefore, any arbitrary V1 can satisfy Eq. (2). In
contrast, when η(x) is not constant, we can no longer choose
V1 freely. [10] proposed the following precoding matrix,
which has also been used by most of recent work [9] [11]
[12]:

span(M12 V2 ) = span(M13 V3 )
span(M23 V3 ) ⊂ span(M21 V1 )
span(M32 V2 ) ⊂ span(M31 V1 )
rank(M11 V1 M12 V2 ) = 2n + 1
rank(M21 V1 M22 V2 ) = 2n + 1
rank(M31 V1 M33 V3 ) = 2n + 1

∗
V1 = (w Tw · · · Tn w)

Condition Ai guarantees that all the interferences at di
are aligned, i.e., mapped into the same linear space, while
condition Bi ensures that all source symbols for the ith
unicast session can be decoded. These conditions ensure
that we can achieve a rate tuple (R1 , R2 , R3 ) = R∗
n
n+1
n
n
( 2n+1 , 2n+1 , 2n+1 ), which approaches ( 1 , 1 , 1 ) as n → ∞.
2 2 2
In this case, we say that R∗ is feasible through PBNA.
n

(4)

where w is a column vector of 2n + 1 ones. Meanwhile, we
set A = In , C consists of the left n columns of In+1 , and B
the right n columns of In+1 ; this construction satisﬁes Eq. (2).
Note that the form of V1 is determined by A, B and C. With
different A, B and C, we can derive different V1 ; therefore
∗
the choice of V1 is not limited to just V1 .
As observed in [11], graphs can introduce dependence
between transfer functions1 so that PBNA may be infeasible. This is a fundamental difference compared to wireless

Previous work [9] [11] [12] only considered the feasibility
∗
of PBNA under a particular precoding matrix, i.e., V1 in
Eq. (4), which was ﬁrst introduced in [10]. To address this
limitation and characterize the feasibility of PBNA for any
precoding matrix, we reformulate A1 , A2 , A3 and B1 , B2 , B3
without any assumption about the structure of precoding

1 Dependence here means that one transfer function (namely m (x),
ii
corresponding to signal for the ith unicast ﬂow) can be written as a rational
function of other transfer (interference) functions. The exact functional form
is dictated by Eq. (6) or Eq. (7)-(9).

2

(a) p1 (x) = p2 (x) = p3 (x) =
η(x) = 1

(b) p1 (x) =

η(x)
η(x)+1

Fig. 1: Examples of graphs where PBNA is infeasible
Fig. 2: The construction of H (in the proof of Linearization Property)

interference channel, where channel gains can change independently and interference alignment is always feasible. Fig.
1 depicts some examples of graphs where PBNA is infeasible.
In Fig. 1(a), pi (x) = η(x) = 1 for i ∈ {1, 2, 3}, thus
Pi = I2n+1 , implying B1 , B2 , B3 are all violated. In Fig.
η(x)
1(b), p1 (x) = η(x)+1 , which also violates B1 . This example
shows that the conjecture proposed by Ramakrishnan et al.
[11] doesn’t hold beyond three symbol extensions. Moreover,
by exchanging s1 ↔ s2 and d1 ↔ d2 , we obtain another
counter example, where p2 (x) = 1 + η(x), violating B2 .
As a ﬁrst step, [9] proposed the following set of conditions
for PBNA.2 For i ∈ {1, 2, 3},
pi (x) ∈
/

f (η(x))
: f (z), g(z) ∈ F2m [z], g(z) = 0
g(η(x))

is enabled by Lemma 2 (P1 is disjoint with P2 ).

Note that, in contrast to Eq. (5), the above set of conditions
guarantee that R∗ is NA-feasible for a ﬁxed value of n. Next,
n
we show that Eq. (6) is also necessary for the feasibility of
PBNA with respect to any V1 satisfying the conditions of
Lemma 1.
Theorem 2: Assume η(x) is not constant. R∗ is feasible
n
through PBNA if and only if for each i ∈ {1, 2, 3}, pi (x) ∈
/
Sn .
We greatly reduce Eq. (6) to the following conditions:
Theorem 3 (The Main Theorem): Assume η(x) is not constant. For n > 1, R∗ is feasible through PBNA if and only if
n
the following conditions are satisﬁed:

(5)

m21 (x)m13 (x)
m31 (x)m12 (x)
+ b1
m23 (x)
m32 (x)
m32 (x)m21 (x)
m12 (x)m23 (x)
m22 (x) = a2
+ b2
m31 (x)
m13 (x)
m13 (x)m32 (x)
m23 (x)m31 (x)
m33 (x) = a3
+ b3
m12 (x)
m21 (x)
m11 (x) = a1

In [9], it was proved that if Eq. (5) is satisﬁed, we can use
∗
V1 to asymptotically achieve half rate in an inﬁnite number
of time slots. Unfortunately, since Eq. (5) contains an inﬁnite
number of conditions, it is impractical to verify. Moreover,
since only one particular matrix was considered in [9], Eq.
(5) was only shown to be sufﬁcient for PBNA.

η(x)
1 + η(x)
p2 (x) ∈ {1, η(x), 1 + η(x)}
/
p3 (x) ∈ {1, η(x), 1 + η(x)}
/

A. η(x) Is Constant
In this case, we can choose V1 freely, and thus the feasibility condition of PBNA can be signiﬁcantly simpliﬁed.
Moreover, we can achieve one half rate in exactly two time
slots, as stated in the following theorem (See Section V-A).
Theorem 1: Assume η(x) is constant. The rate tuple
( 1 , 1 , 1 ) is feasible through PBNA if and only if pi (x) is
2 2 2
not constant for each i ∈ {1, 2, 3}.

p1 (x) ∈
/

(9)

1, η(x),

(10)
(11)
(12)

The basic idea behind the Main Theorem is that we can
compare the degree of a variable in pi (x) with that of a rational
function in Sn . This technique enables us to reduce Sn to the
0 +a1 η(x)
form { a0 +b1 η(x) }. Thus, we only need to consider a ﬁnite
b
number of rational functions, namely Eq. (7)-(9). This enables
an efﬁcient algorithm for checking the feasibility of PBNA.
The key for enabling this reduction lies in two graph-related
properties, which we refer to as Linearization Property and
Square-Term Property, as described in the next section.

B. η(x) Is Not Constant
In this case, we cannot choose V1 freely. Using similar
technique as in [9], we can rewrite Eq. (5) as follows: 3
pi (x) ∈Sn =
/

df ≤ n, dg ≤ n − 1

(8)

where for i ∈ {1, 2, 3}, ai , bi are constants in {0, 1} and
cannot be zeros at the same time.
Note that Eq. (7)-(9) correspond to the following conditions
respectively:

III. OVERVIEW OF M AIN R ESULTS
We now state our main results; proofs are deferred to
Section V and [13]. Since the construction of V1 depends
on whether η(x) is constant, we distinguish two cases.

f (η(x))
: f (z), g(z) ∈ F2m [z],
g(η(x))
f (z)g(z) = 0, gcd(f (z), g(z)) = 1,

(7)

IV. G RAPH -R ELATED P ROPERTIES
Our key intuition is that pi (x) is not an arbitrary function
but depends on transfer functions, as speciﬁed in Eq. (3).
Therefore, pi (x) have special algebraic properties, which can
be exploited to simplify Eq. (6).
First note that all pi (x)’s are of the following general form:

(6)

∀i ∈ {1, 2, 3}

2 There is actually a small difference between Eq. (5) and the original
formulation in [9], in which p1 (x) is replaced by 1/p1 (x). It is easy to
see that the two are equivalent.
3 Notation: For two polynomials f (x) and g(x), let gcd(f (x), g(x)) denote
their greatest common divisor, and df the degree of f (x).

h(x) =

3

mab (x)mpq (x)
,
maq (x)mpb (x)

a, b, p, q ∈ {1, 2, 3}, a = p, b = q.

numerator of h(x) under some assignment to x, it must also
appear in the denominator of h(x), and vice versa.
Lemma 4 (Square-Term Property): For a coding variable
xee , let f1 (x) and f2 (x) be the coefﬁcients of x2
ee
in mab (x)mpq (x) and maq (x)mpb (x) respectively. Then
f1 (x) = f2 (x).
Proof: For any xee , deﬁne Q1 = {(P1 , P2 ) ∈ Pab ×Ppq :
x2 | t(P1 )t(P2 )} and Q2 = {(P3 , P4 ) ∈ Paq × Ppb : x2 |
ee
ee
t(P3 )t(P4 )}. Consider a path pair (P1 , P2 ) ∈ Q1 . Since the
degree of xee in t(P1 ) and t(P2 ) is at most one, we must
have xee | t(P1 ) and xee | t(P2 ). Thus e, e ∈ P1 ∩ P2 . Let
1
2
P1 , P1 be the parts of P1 before e and after e respectively.
1
2
Similarly, deﬁne P2 and P2 . Then construct two new paths:
1
2
1
2
P3 = P2 ∪ {e, e } ∪ P1 and P4 = P1 ∪ {e, e } ∪ P2 (see Fig.
3). Clearly, t(P1 )t(P2 ) = t(P3 )t(P4 ), and thus (P3 , P4 ) ∈ Q2 .
The above method establishes a one-to-one mapping φ : Q1 →
Q2 , such that for φ((P1 , P2 )) = (P3 , P4 ), t(P1 )t(P2 ) =
1
t(P3 )t(P4 ). Hence, f1 (x) = x2
(P1 ,P2 )∈Q1 t(P1 )t(P2 ) =

Fig. 3: Illustration of Square-Term Property. A term with x2
ee
introduced by (P1 , P2 ) in the numerator of h(x) equals another term
introduced by (P3 , P4 ) in the denominator of h(x).

Furthermore, each path pair in Pab × Ppq contributes a term
in mab (x)mpq (x), and each path pair in Paq ×Ppb contributes
a term in maq (x)mpb (x):
mab (x)mpq (x) =
maq (x)mpb (x) =

(P1 ,P2 )∈Pab ×Ppq
(P3 ,P4 )∈Paq ×Ppb

t(P1 )t(P2 )
t(P3 )t(P4 )

A. Linearization Property
First, consider the following lemma, which provides an easy
way to check whether pi (x) ∈ {1, η(x)} (as in Section VI).
/
The intuition is that we can multicast two symbols from sb , sq
to da , dp by network coding if and only if the minimum cut
separating sb , sq from da , dp is greater than one [2].
Lemma 2: mab (x)mpq (x) = maq (x)mpb (x) if and only if
there is disjoint path pair (P1 , P2 ) ∈ Pab × Ppq or (P3 , P4 ) ∈
Paq × Ppb .
Proof: See [13].
The ﬁrst graph-related property states that pi (x) can be
transformed into its simplest non-trivial form (i.e., a linear
function or the inverse of a linear function). More formally:
Lemma 3 (Linearization Property): Let
h(x)
=
mab (x)mpq (x)
u(x)
maq (x)mpb (x) = v(x) such that gcd(u(x), v(x)) = 1. Assume
h(x) is not constant. Then, for sufﬁciently large m, we can
assign values to x other than a variable xee such that u(x)
and v(x) are transformed into either u(xee ) = c1 xee + c0 ,
v(xee ) = c2 or u(xee ) = c2 , v(xee ) = c1 xee + c0 , where
c0 , c1 , c2 are constants in F2m , and c1 c2 = 0.
Proof: Due to lack of space, we provide the proof outline
and refer the reader to [13] for the complete proof. The key is
to ﬁnd a subgraph H and consider h(x) restricted to H, i.e.,
m (x )m (xH )
h(xH ) = mab (xH )mpq (xH ) , where xH represents the coding
aq
H
pb
vector of H. In addition, we require that some variable xee
appears exclusively in the numerator or the denominator of
h(xH ). Thus, by assigning values to xH other than xee , we
can transform h(xH ) into a linear function or the inverse
of a linear function in terms of xee . Since h(xH ) can be
acquired through a partial assignment to x, this transformation
also holds for the original graph G . Fig. 2 illustrates how to
construct H. As shown in this ﬁgure, the structure of H can
be one of three cases. A key observation is that for each case,
there must be e, e ∈ P1 ∪P2 such that xee appears exclusively
in the numerator of h(xH ). Similarly, if there exists disjoint
path pair (P3 , P4 ) ∈ Paq ×Ppb , there exists xee which appears
exclusively in the denominator of h(xH ).

1
x2
ee

ee

(P3 ,P4 )∈Q2

t(P3 )t(P4 ) = f2 (x).

V. F EASIBILITY C ONDITION OF PBNA
In this section, we provide the proofs of Theorems 1, 2 and
the proof outline of the Main Theorem. Due to lack of space,
details are deferred to [13].
A. η(x) Is Constant
Proof of Theorem 1: In this case, T is identity matrix.
We set V1 = (θ1 θ2 )T , where θ1 , θ2 are arbitrary variables,
and A, B, C are all scalar value 1. It is easy to see that Eq.
(2) is satisﬁed. Moreover, if pi (x) is not constant, we have
ψi (ξ) = det

θ1
θ2

pi (x1 )θ1
pi (x2 )θ2

= θ1 θ2 (pi (x1 ) − pi (x2 )) = 0

1
and Bi is satisﬁed. Thus ( 2 , 1 , 1 ) is feasible through PBNA.
2 2
Conversely, if pi (x) is constant, Bi is violated, and thus
( 1 , 1 , 1 ) is not feasible through PBNA.
2 2 2

B. η(x) Is Not Constant
The general form of V1 that satisﬁes Eq. (2) is as follows:
Lemma 5: Any V1 satisfying Eq. (2) has the form V1 =
∗
∗
GV1 F, where V1 is deﬁned in Eq. (4), F is an (n+1)×(n+1)
matrix, and G is a (2n + 1) × (2n + 1) diagonal matrix, with
the (i, i) element being fi (η(xi )), where fi (z) is a non-zero
rational function in F2m (z). Moreover, the (n + 1)th row of
FC and the 1st row of FBA are both zero vectors.
Proof: See [13].
Lemma 5 indicates that there is a direct relation between
∗
V1 and the general form of V1 , which we use to prove that
Eq. (6) is also necessary for the feasibility of PBNA.
Proof of Theorem 2: The sufﬁciency of Eq. (6) was
proved in [9]. Now assume pi (x) = f (η(x)) ∈ Sn , where
g(η(x))
n
n−1
f (z) = k=0 ak z k and g(z) = k=0 bk z k . We will prove
that for any V1 satisfying Eq. (2), Bi cannot be satisﬁed,
thus R∗ is not NA-feasible. Apparently, if rank(V1 ) < n + 1,
n
Bi is violated. Thus, in the rest of this proof, we assume
rank(V1 ) = n + 1.
∗
By Lemma 5, V1 = GV1 F, where F is an (n +
1) × (n + 1) invertible matrix. The jth row of V1

B. Square-Term Property
The second graph-related property is stated in Lemma 4: the
coefﬁcient of x2 in the numerator of h(x) equals its counteree
part in the denominator of h(x). Thus, if x2 appears in the
ee

4

is rj = fj (η(xj ))(1, η(xj ), · · · , η n (xj ))F. Since the
(n + 1)th row of FC is zero, we have rj C =
fj (η(xj ))(1, η(xj ), · · · , η n−1 (xj ))H, where H consists of
the top n rows of FC and rank(H) = n. Let a =
(a0 , a1 , · · · , an )T and b = (b0 , b1 , · · · , bn−1 )T . For i =
1, 2, 3, we deﬁne a = F−1 a and b = H−1 b. It follows

graph structure. A counter example is shown in Fig. 1(b).
Nevertheless, we can still check the conditions by evaluating
the rational functions through T random tests:
for k = 1 to T do
Assign random values to x, denoted by x0
η(x0
If p1 (x0 ) = 1+η(x) ) , return success
0
end for
Return failure (i.e., B1 is violated)

rj a = fj (η(xj ))(1, η(xj ), · · · , η n (xj ))a
= fj (η(xj ))f (η(xj ))

Using Lemma 4 of [3], we can upper-bound the probability of
error by [1 − (1 − 23 )L ]T , where L is the maximum distance
m
from any sender to any receiver in the network. Thus, the error
can be made arbitrarily small for sufﬁciently large m and T .
The running time of the algorithm is O(T |E|Din ), where Din
is the maximum in-degree of any node in the network.

= fj (η(xj ))pi (xj )g(η(xj ))
= pi (xj )fj (η(xj ))(1, η(xj ), · · · , η n−1 (xj ))b
= pi (xj )fj (η(xj ))(1, η(xj ), · · · , η n−1 (xj ))Hb
= pi (xj )rj Cb
Hence, the columns of (V1 Pi V1 C) are linearly dependent,
violating Bi . Likewise, we can prove the case i = 3.
For the proof of the Main Theorem, we need to rearrange
the ratio of rational functions f (η(x)) in Eq. (6) to a ratio of
g(η(x))
coprime polynomials with variables x. To this end, we use a
property of polynomials stated in the following lemma.
Lemma 6: Let F be a ﬁeld. z is a variable and y =
(y1 , y2 , · · · , yk ) is a vector of variables. Consider four nonzero polynomials f (z), g(z) ∈ F[z] and s(y), t(y) ∈ F[y],
such that gcd(f (z), g(z)) = 1 and gcd(s(y), t(y)) = 1.
Denote d = max{df , dg }. Deﬁne two polynomials in F[y]:
α(y) = f ( s(y) )td (y) and β(y) = g( s(y) )td (y). Then
t(y)
t(y)
gcd(α(y), β(y)) = 1.
Proof: See [13].
We now have all the ingredients to outline the proof of the
Main Theorem. The complete proof is described in [13].
Proof Outline of the Main Theorem: The necessity of
Eq. (7)-(9) follows directly from Theorem 2. We only need to
prove their sufﬁciency.
η(x)
First, we prove that if pi ∈ S = {1, η(x), 1+η(x), 1+η(x) },
/
∗
then pi (x) ∈ Sn , and thus Rn is feasible through PBNA. By
/
contradiction, assume pi (x) = f (η(x)) , where f (z), g(z) ∈
g(η(x))
F2m [z] and gcd(f (z), g(z)) = 1. Denote d = max{df , dg }.
We apply a simple degree-counting technique along with
Lemma 3 and 6 to prove that d = 1, and thus f (η(x)) can
g(η(x))

VII. C ONCLUSION
In this paper, we study the feasibility of PBNA for three
unicast sessions. We ﬁrst prove that the set of conditions
proposed by [9] are also necessary for the feasibility of
PBNA with respect to any valid precoding matrix. Then, we
reduce this set of conditions to just four conditions, using two
graph-related properties along with a simple degree-counting
technique. This reduction enables an efﬁcient algorithm for
checking the feasibility of PBNA.
R EFERENCES
[1] R. Ahlswede, N. Cai, S.-Y. R. Li, and R. Yeung, “Network information
ﬂow,” IEEE Trans. on Inf. Th., vol. 46, no. 4, pp. 1204–1216, July 2000.
[2] R. Koetter and M. M´ dard, “An algebraic approach to network coding,”
e
IEEE/ACM Trans. on Net., vol. 11, no. 5, pp. 782–795, Oct. 2003.
[3] T. Ho, M. M´ dard, R. Koetter, D. R. Karger, M. Effros, J. Shi, and
e
B. Leong, “A random linear network coding approach to multicast,”
IEEE Trans. on Inf. Theory, vol. 52, no. 10, pp. 4413–4430, 2006.
[4] A. R. Lehman and E. Lehman, “Complexity classiﬁcation of network
information ﬂow problems,” in Proc. of ACM-SIAM SODA, 2004.
[5] D. Traskov, N. Ratnakar, D. S. Lun, R. Koetter, and M. M´ dard,
e
“Network coding for multiple unicasts: An approach based on linear
optimization,” in Proc. of IEEE ISIT, 2006.
[6] M. Kim, M. M´ dard, U.-M. O’Reilly, and D. Traskov, “An evolutionary
e
approach to inter-session network coding,” in Proc. of INFOCOM, 2009.
[7] M. M´ dard, M. Effros, D. Karger, and T. Ho, “On coding for none
multicast networks,” in in Proc. of Allerton Conference, 2003.
[8] N. J. A. Harvey, R. Kleinberg, and A. R. Lehman, “On the capacity of
information networks,” Special of the IEEE ToIT and IEEE/ACM ToN,
vol. 52, no. 6, pp. 2345–2364, June 2006.
[9] A. Das, S. Vishwanath, S. Jafar, and A. Markopoulou, “Network coding
for multiple unicasts: An interference alignment approach,” in Proc of
IEEE ISIT, 2010.
[10] V. R. Cadambe and S. A. Jafar, “Interference alignment and degrees
of freedom of the k-user interference channel,” IEEE Transactions on
Information Theory, vol. 54, no. 8, pp. 3425–3441, 2008.
[11] A. Ramakrishnan, A. Das, H. Maleki, A. Markopoulou, S. Jafar, and
S. Vishwanath, “Network coding for three unicast sessions: Interference
alignment approaches,” in Allerton Conference, Sept. 2010.
[12] J. Han, C. C. Wang, and N. B. Shroff, “Analysis of precoding-based
intersession network coding and the corresponding 3-unicast interference
alignment scheme,” in in Proc. of Allerton Conference, 2011.
[13] C. Meng, A. Ramakrishnan, A. Markopoulou, and S. A. Jafar, “On
the feasibility of precoding-based network alignment for three unicast
sessions,” arXiV, Tech. Rep., Feb. 2012, (and on http://odysseas.calit2.
uci.edu/wiki/doku.php/public:publication).

0 +a1 η(x)
only be of the form a0 +b1 η(x) . Then, we use Lemma 3 and 4
b
to rule out other cases.
We note that in [12] the authors proved that p1 (x) =
η(x)
η(x)
1 + η(x), p2 (x) = 1+η(x) and p3 (x) = 1+η(x) . Combined
with the above results, we have proved that if Eq. (7)-(9) are
satisﬁed, R∗ is feasible through PBNA.
n

VI. C HECKING THE F EASIBILITY OF PBNA
For a given graph, checking the feasibility of PBNA is now
reduced to checking whether Eq. (10)-(12). This is a multivariate polynomial identity testing problem. To check whether
pi (x) = 1, we use Ford-Fulkerson Algorithm, as per Lemma
η(x)
2. To check whether pi (x) = η(x), we deﬁne qi (x) = pi (x)
and consider qi (x) = 1. Therefore, Ford-Fulkerson Algorithm
can be used to check this condition as well. For the other
η(x)
conditions (p1 (x) = 1+η(x) and p2 (x), p3 (x) = 1 + η(x)),
it is still not clear what is their interpretation in terms of

5

