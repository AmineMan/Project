Title:          ISIT2012_Recommender.dvi
Creator:        dvips(k) 5.99 Copyright 2010 Radical Eye Software
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 17:57:54 2012
ModDate:        Tue Jun 19 12:55:38 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      320208 bytes
Optimized:      no
PDF version:    1.7
ISIT'2012 1569566853

BPRS: Belief Propagation Based Iterative
Recommender System
Erman Ayday, Arash Einolghozati, Faramarz Fekri
School of Electrical and Computer Engineering
Georgia Institute of Technology, Atlanta, GA 30332
Email:{eaydayi, einolghozati, fekri}@ece.gatech.edu
most accurate method in the Root Mean Square Error (RMSE)
sense. However, most existing and highly popular Matrix
Factorization-based recommender algorithms are shown to be
prone to malicious behavior [1] and they have scalability
issues. In other words, they fall short of incorporating the
attack proﬁles and the extra noise generated by the malicious
users. Further, each new update (using the most recent data or
ratings) for a particular active user requires to solve the entire
problem for every user in the system. Hence, new research
needed to focus on algorithms which meet these challenges
and provide scalable, accurate and dependable recommender
systems.
In this paper we introduce the ﬁrst application of Belief
Propagation (BP), an iterative probabilistic algorithm, to solve
the recommendation problem. We have applied BP to trust
and reputation systems in our previous work [2], [3]. In such
systems, BP is used to solve the inference problem for ﬁnding
the global reputation of service providers in a network based
on the previous ratings of the users. The main difference between trust and reputation systems and recommender systems
is that in the former one the inference problem has to be solved
globally but in the latter one, the inferences are local and
speciﬁc for each user. In [4] and [5], we have studeied the
reputation system for Delay tolerant networks (DTN) and P2P
networks respectively.
The key observation we make is that recommender systems
deal with complicated global functions of many variables (e.g.,
users and items). By using a factor graph, we can obtain
a qualitative representation of how the users and items are
related on a graphical structure. Therefore, we propose to
model the recommender system on a factor graph using which
our goal is to compute the marginal probability distribution
functions of the variables representing the ratings to be predicted for the users. However, we observe that computing the
marginal probability functions is computationally prohibitive
for large-scale recommender systems. Therefore, we utilize the
BP algorithm to efﬁciently compute these marginal probability
distributions. The key role of the BP algorithm is that we can
use it to compute the marginal distributions in a complexity
that grows linearly with the number of nodes (i.e, users/items).
Hereafter, we refer to our scheme as the “Belief Propagation Based Iterative Recommender System” (BPRS). BPRS
has several prominent features. First, it does not require to
solve the problem for all users if it wishes to update the

Abstract—In this paper we introduce the ﬁrst application of
the Belief Propagation (BP) algorithm in the design of recommender systems. We formulate the recommendation problem
as an inference problem and aim to compute the marginal
probability distributions of the variables which represent the
ratings to be predicted. However, computing these marginal
probability functions is computationally prohibitive for largescale systems. Therefore, we utilize the BP algorithm to efﬁciently
compute these functions. Recommendations for each active user
are then iteratively computed by probabilistic message passing.
As opposed to the previous recommender algorithms, BPRS does
not require solving the recommendation problem for all the users
if it wishes to update the recommendations for only a single
active. Further, BPRS computes the recommendations for each
user with linear complexity and without requiring a training
period. Via computer simulations (using the 100K MovieLens
dataset), we verify that BPRS iteratively reduces the error in
the predicted ratings of the users until it converges. Finally, we
conﬁrm that BPRS is comparable to the state of art methods
such as Correlation-based neighborhood model (CorNgbr) and
Singular Value Decomposition (SVD) in terms of rating and
precision accuracy. Therefore, we believe that the BP-based
recommendation algorithm is a new promising approach which
offers a signiﬁcant advantage on scalability while providing
competitive accuracy for the recommender systems.

I. I NTRODUCTION
Today, the quantity of available information grows rapidly,
overwhelming consumers to discover useful information and
ﬁlter out the irrelevant items. Thus, the user is confronted
with a big challenge of ﬁnding the most relevant information
or item in the short amount of time. Recommender systems
are aimed at addressing this overload problem, suggesting to
the users those items that meet their interests and preferences.
More generally, recommender systems can learn about user
preferences and proﬁle over time, based on data mining
algorithms, and automatically suggest products (from a large
space of possible options) that ﬁt the users’ needs. Hence, it is
foreseeable that the social web is going to be driven by these
recommender systems.
However, there are certain challenges to design scalable,
accurate and dependable recommender systems. The available
data for the recommender systems is incomplete, uncertain,
inconsistent and/or intentionally-contaminated. Further, since
new data (ratings) becomes available continuously, recommendations need to be updated in frequent intervals causing
computational limitations for large-scale systems. Latent factor
models (such as Matrix Factorization) have proven to be the

1

predictions for only a single active user and it does not require
a training period to utilize the most recent data (ratings).
Second, its complexity remains linear per single user, making
it very attractive for large-scale systems. Therefore, it can
update the recommendations for each active (online) user
instantaneously using the most recent data (ratings). Further,
we show that BPRS provides comparable usage prediction
and rating prediction accuracy to other popular methods such
as the Correlation-based neighborhood model (CorNgbr) and
Singular Value Decomposition (SVD). Therefore, we are very
optimistic that this work promises a new direction for the
recommender systems which will be scalable, accurate, and
resilient to attacks.
The rest of this paper is organized as follows. In the rest of
this section, we summarize the related work. In Section II, we
describe the proposed BPRS in detail. Next, in Section III, we
evaluate BPRS via computer simulations using the MovieLens
dataset. Finally, Section IV concludes the paper.

including LDPC codes, turbo codes, free energy approximation, and satisﬁability. BP is a method for computing marginal
distributions of the unobserved nodes conditioned on the
observed ones.
Our objective is to formulate the recommendation problem
as making statistical inference about the ratings of users for
unseen items based on observations. That is, given the past
data evidence, what would be the likelihood (probability) that
the rating takes a particular value? Here, the probability is
the degree of belief to which the prediction of the rating is
supported by the available evidence. This requires ﬁnding the
marginal probability distributions of the variables representing
the ratings of the items to be predicted conditioned on some
observed preferences.
We assume two different sets in the system: i) the set of
users U and ii) the set of items (products) I. Users provide
feedbacks, in the form of ratings, about the items for which
they have an opinion. The main goal is to provide accurate
recommendations for every user by predicting the ratings of
the user for the items that he/she has not rated before (unseen
item). Here, we consider an arbitrary user z (referred as the
active user) and compute the prediction of ratings for user z
for unseen items. We assume u users and s items in the system
(i.e., |U| = u and |I| = s). Let Gz = {Gzj : j ∈ I} be the
collection of variables representing the ratings of the items to
be predicted for the active user z. Note that a subset of these
variables are already known as the corresponding items were
rated by user z. Hence, they do not require any prediction. Let
also Rz = {Rzi : i ∈ U} be the conﬁdence of the system on
the users for their ratings’ reliability, given the active user is
z. Further, we let Tij represent the rating provided previously
by user i about the item j. We denote T as the s × u item-user
matrix that stores these ratings, and Ti as the set of ratings
provided by the user i. We note that some rating entries could
be missing (attributed to unseen items). To be consistent with
the most of existing recommender systems, we assume that
the rating values are integers from the set Υ = {1, 2, 3, 4, 5}.
The recommendation problem can be viewed as ﬁnding
the marginal probability distributions of each variable in
Gz , given the observed data (i.e., existing ratings and the
conﬁdence of the system for the user’s ratings). There are s
marginal probability functions, p(Gzj |T, Rz ), each of which
is associated with a variable Gzj ; the predicted rating of item
j for user z. We formulate the problem by considering the
global function p(Gz |T, Rz ), which is the joint probability
distribution function of the variables in Gz given the rating
matrix and the conﬁdence of the system for the user’s ratings.
Then, clearly, each marginal probability function p(Gzj |T, Rz )
may be obtained as follows:

A. Related Work
Recommender systems [6] can be classiﬁed into two main
categories: i) content-based ﬁltering [7] in which the system
uses behavioral data about a user to recommend items similar
to those previously consumed by the user, and ii) collaborative ﬁltering [8] in which the system compares one user’s
behavior against the other users’ behaviors and identiﬁes items
which were preferred by similar users. Collaborative ﬁltering
algorithms fall further into two general classes: memorybased [9] and model-based algorithms [10], [11]. Modelbased algorithms include methods exploiting Singular Value
Decomposition (SVD), Principal Component Analysis (PCA)
and Maximum Margin Matrix Factorization (MMMF) techniques [12], [13].
The application of Bayesian networks and message passing
algorithms for recommender systems is also studied in the
past [14], [15]. In [14], the message passing technique is used
to determine the latent factors of the users and items (as an alternative to SVD). In [15], because of the fuzziness associated
with the ambiguity in the description of the ratings, a (noniterative) inference is proposed among the users to remove
this ambiguity. The key difference between our approach and
the other message passing-based methods is that, we describe
the recommendation problem as computing marginal likelihood distributions from complicated global functions of many
variables and to use Belief Propagation (BP) to ﬁnd them.
This is inspired by successful applications of BP algorithms in
various ﬁelds such as decoding of error correcting codes [16],
Artiﬁcial Intelligence [17], and reputation systems [2].
II. B ELIEF P ROPAGATION FOR
R ECOMMENDER S YSTEMS

p(Gz |T, Rz ),

p(Gzj |T, Rz ) =

(1)

Gz \{Gzj }

Belief Propagation (BP) [16], [17] is a message passing
algorithm for performing interface on graphical models (e.g.,
factor graphs, Bayesian networks, Markov random ﬁelds). It
has demonstrated empirical success in numerous applications

where the notation Gz \{Gzj } implies all variables in Gz
except Gzj .

2

Unfortunately, the number of terms in (1) grows exponentially with the number of variables, making the direct
computation infeasible for large-scale systems. However, we
propose to factorize (1) to local functions fi using a factor
graph and utilize the BP algorithm to calculate the marginal
probability distributions in linear complexity. A factor graph is
a bipartite graph containing two sets of nodes (corresponding
to variables and factors) and edges incident between two sets.
Following [16], we form a factor graph by setting a variable
node for each variable Gzj , a factor node for each function
fi , and an edge connecting variable node j to the factor node
i if and only if Gzj is an argument of fi .
We arrange the collection of the users and items together
with the ratings provided by the users as a factor graph g(U, I).
Then, since we consider the particular active user z, the factor
ˆ
graph is reduced to g(U, I) (as in Fig. 1) by only keeping the
users that are connected to z via a path of length at most two
in g(U, I) (i.e., the users who rated at least one item that is also
rated by z) and removing all the other user nodes from the
graph together with their edges. In this representation, each
user corresponds to a factor node in the graph, shown as a
square and each item is represented by a variable node shown
as a hexagon. Further, each rating is represented by an edge
from the factor node to the variable node. Hence, if a user i
ˆ
(i ∈ U) has a rating about item j (j ∈ S), we place an edge
with value Tij from the factor node i to the variable node
ˆ
ˆ
representing item j. Eventually, the g(U, I) graph has |U| = u
ˆ
users and |I| = s items.
k

m

Tka

(ν)

b

(ν)

(ν)
λk→a (Gza ) =
(ν)

(ν−1)

fk (Gzk , Tk , Rzk

(ν−1)

(ν)
µx→k (Gzx ),

)
x∈∆

(ν)

Gzk \{Gza }

(3)

where Gzk is the set of variable nodes which are the arguments
of the local function fk at the factor node k. This message
(ν−1)
transfer is illustrated in the right half of Fig. 2. Further, Rzk
is a value between zero and one and can be calculated as
follows:

n

(ν−1)

Rzk

=1−

1
ρ|Nk |

(ν−1)

|Tki − x|µi→k (x).

(4)

i∈Nk x∈Υ

The above equation can be interpreted as one minus the
average inconsistency of user k calculated by using the messages it received from all its neighbors. Further, ρ, which is
the highest possible deviation of a user, is set to 4 in this
particular rating system, where the rating values are integers
from the set Υ. Thus, the reliability of users (in their ratings)
is measured based on the messages formed by the algorithm.
Using (3) and assuming that the predicted ratings in set Gzk
are independent from each other at each intermediate step (to
reduce the computational complexity), it can be shown that

T mc

a
Fig. 1.

in BPRS. We clarify that all the messages are formed by the
algorithm that is ran in the central authority. We represent
the set of neighbors of the variable node a and the factor
ˆ
nodes k and z (in g(U, I)) as Na , Nk , and Nz , respectively
(neighbors of an item are the set of users who rated the
item while neighbors of a user are the items which it rated).
(ν)
Further, let Ξ = Na \{k} and ∆ = Nk \{a}. Let Gzj and
(ν)
Rzi be the value of variable Gzj and system’s conﬁdence
on user i at the iteration ν of the algorithm, respectively. The
(ν)
(ν)
message λk→a (Gza ) (from factor node k to the variable node
(ν)
a) denotes the relative probabilities that Gza = ℓ (ℓ ∈ Υ)
(ν−1)
th
at the ν iteration, given Tka and Rzk . On the other
(ν)
(ν)
hand, µa→k (Gza ) (from variable node a to the factor node
(ν)
k) denotes the probability that Gza = ℓ (ℓ ∈ Υ) at the ν th
iteration.
The message from the factor node k to the variable node a
at the ν th iteration is formed using the principles of the BP
as

c

Graphical representation of the scheme from user z’s point of view.

Next, we suppose that the global function p(Gz |T, Rz )
factors into products of several local functions, each having
a subset of variables from Gz as arguments as follows:

(ν)

(ν−1)

fk (Gzk , Tk , Rzk

(ν−1)

(ν)

)=

fk (Gzi , Tk , Rzk

).

(5)

i∈Nk

p(Gz |T, Rz ) =

1
Z

fi (Gzi , Ti , Rzi ),

(2)

Thus, the message in (3) becomes

ˆ
i∈U
(ν)

(ν−1)

(ν)
(ν)
λk→a (Gza ) = fk (Gza , Tk , Rzk

where Z is the normalization constant and Gzi is a subset of
Gz . Hence, in the graph representation of Fig. 1, each factor
node is associated with a local function and each local function
fi represents the probability distributions of its arguments
given the conﬁdence of the system for the associated user and
the existing ratings of the associated user.
We now describe the message exchange between a user k
and an item a (in Fig. 1) provided that the active user is z

)×

(ν−1)
(ν)
fk (Gzi , Tk , Rzk )
(ν)
(ν)
Gzk \{Gza }

i∈Nk \{a}

(ν−1)

(ν)
µx→k (Gzx )
x∈∆

(6)
Since the second part of (6) is
(ν)
(ν)
(ν)
(ν−1)
λk→a (Gza )
∝
fk (Gza , Tk , Rzk ),
(ν)
(ν)
(ν)
(ν−1)
λk→a (Gza ) ∝ p(Gza |Tka , Rzk ), where

3

a constant,
and hence,

.

(ν−1)

(ν)
p(Gza = ℓ|Tka , Rzk

|κz (ℓ)|+1
a
[|κz (h)|+1]
a
h∈Υ

|κz (Tka )|+1
a
[|κz (h)|+1]
a

µ (v-1)
bk

n

if Tka = ℓ

N a\{k}

.
.
.

c

µ (v)
ak

λ(v )
na

a

k

µ (v-1)
ck

(v)

λka

if Tka = ℓ.

.
.
.

Nk \{a}

h∈Υ

(7)

Fig. 2.

Here, κa denotes the genre (i.e., type) or the set of genres of
item a. Further, |κz (h)| is the number of items in the same
a
genre as κa which are previously rated as h by the active user
z. The way we compute the probabilities in (7) resembles
the belief/plausibility concept of the Dempster-Shafer The(ν−1)
ory [18]. Given Tka = 1, Rzk
can be viewed as the belief
(ν)
th
of user k that Gza is one (at the ν iteration). In other words,
(ν)
in the eyes of user k, Gza is equal to one with probability
(ν−1)
(ν−1)
Rzk . Thus, (1 − Rzk ) corresponds to the uncertainty in
the belief of user k. In order to remove this uncertainty and
(ν)
(ν−1)
(ν)
express p(Gza |Tka , Rzk ) as the probabilities that Gza is
ℓ (ℓ ∈ Υ), we distribute the uncertainty among the possible
outcomes (one to ﬁve) in proportion to the histogram of the
ratings provided by the active user z for the items in the same
genre as κa . That is, if the active user previously provided
high ratings for the items in the same genre as κa , then
we distribute most of the uncertainty to the higher ratings
in proportion to the rating histogram of the active user for
the items in the same genre as κa . Similarly, if the active
user previously provided low ratings for the items in the same
genre as κa , we distribute most of the uncertainty to the lower
ratings. Therefore, from user k’s point of view, Gza is equal
(ν−1)
(ν−1)
|κz (1)|+1
a
to one with probability Rzk +(1−Rzk )×
[|κz (h)|+1] .
h∈Υ

Message exchange between the factor node k and variable node a.

a ∈ Nz , the messages generated from the variable node a
do not vary with iterations since the value of this variable
node (Gza ) is ﬁxed based on the ratings of the active user.
Therefore, the message from the variable node a to the factor
node k at the ν th iteration is given by
(ν)

(ν)
µa→k (Gza = ℓ) =






1
(ν)
λi→a (h)

h∈Υ i∈Ξ

(ν)

×
i∈Ξ

(ν)

λi→a (Gza ) if a ∈ Nz

1


0

if a ∈ Nz and Tza = ℓ
if a ∈ Nz and Tza = ℓ.
(8)

The algorithm proceeds to the next iteration in the same
way as the ν th iteration. We clarify that the iterative algorithm
(1)
(0)
starts by computing λk→a by using Rzk = ̺, where ̺
(0 < ̺ < 1) is the system’s present conﬁdence on the users
for the reliability of their ratings computed at the previous
execution of the algorithm. At the end of each iteration, the
upper equation in (8), after following modiﬁcation, is used to
compute the prediction of ratings of the active user z. That is,
(ν)
(ν)
we use the set Na instead of Ξ in (8) to compute µa (Gza )
for every item a for which the active user z did not have any
(ν)
(ν)
5
rating. Then, we set Gza = i=1 iµa (i). The iterations stop
when Gzj values converge for every item j.

a

On the other hand, z is equal to ℓ (ℓ = 1) with probability
it
(ν−1)
|κa (ℓ)|+1
(1 − Rk
)×
[|κz (h)|+1] . We note that the above discush∈Υ

b
(v)

λma


 R(ν−1) + (1 − R(ν−1) ) ×
 zk
zk





 (1 − R(ν−1) ) ×


zk

m

)=

a

sion assumed Tka = 1 and similar statements hold for the
cases when Tka = 2, 3, 4, 5. It is worth clarifying that, as
opposed to the Dempster-Shafer Theory, we do not combine
the beliefs of the users. Instead, we consider the belief of
(ν)
each user individually and calculate probabilities that Gza
being ℓ (ℓ ∈ Υ) in the eyes of each user as in (7). We
note that if the active user z did not rate any items from
this particular genre (κa ), we distribute the uncertainty in
proportion to the average rating of user z (for the items it
T
z zi
previously rated) (Az = i∈Nz | ). The above computation in
|N
(7) must be performed for every neighbors of each factor node.
This ﬁnishes the ﬁrst half of the ν th iteration. In the second
(ν)
(ν)
half of the ν th iteration, we calculate the message µa→k (Gza )
by multiplying all probabilities the variable node a received
from its neighbors excluding the one from the factor node k,
as shown in the left half of Fig. 2. We note that the previous
ratings of the active user play a key role in the algorithm.
Hence, the values of those variables in Gz which are associated
with the items already rated by the active user z are set to the
corresponding ratings (i.e., Gzj = Tzj if j ∈ Nz ). Thus, if

III. E VALUATION OF BPRS
We evaluate the performance of BPRS using the 100K
MovieLens dataset. The dataset contains 100, 000 ratings from
943 users on 1682 items (movies) in which each user has rated
at least 20 items. Further, the rating values are integers from 1
to 5. We note that based on our simulations, we observed that
BPRS converges, on the average, in 10 iterations. Therefore,
for the remaining of this section, we either show our results
during the ﬁrst 10 iterations or after the 10th iteration.
A. Prediction Accuracy
We evaluate the rating prediction accuracy of BPRS in terms
of Root Mean Square Error (RMSE) metrics over the predicted
ratings. We note that each test dataset is created by 80%/20%
split of the full data into training and test data.Then, we used
the training data (80% of the whole dataset) to predict the
ratings in the test dataset. We computed the RMSE as below:
1
ˆ
RMSE =
(Gij − Gij )2
(9)
|K|
i∈U,j∈I

4

IV. C ONCLUSION
In this paper, we introduced the Belief Propagation Based
Iterative Recommender System (BPRS). BPRS formulates the
recommendation problem as making statistical inference about
the ratings of users for unseen items based on observations.
BPRS provides a complexity that remains linear per single
active user, making it very attractive for large-scale systems.
Further, it can update the recommendations for each active
user instantaneously using the most recent data (ratings) and
without solving the recommendation problem for all users.
While providing these signiﬁcant scalability advantages over
the existing methods, we showed that BPRS also provides
comparable rating prediction accuracy with popular methods.
R EFERENCES

0.98
All connected users
Only 2−hop neighbors

0.97

RMSE

0.96
0.95
0.94
0.93
0.92
0.91
1

2

3

4

5
6
iteration

7

8

9

10

Fig. 3. Performance of BPRS in RMSE vs. number of iterations when: (i)
all users and (ii) only the 2-hop neighbors are used.

[1] Z. Cheng and N. Hurley, “Effective diverse and obfuscated attacks on
model-based recommender systems,” In Proceedings of the third ACM
conference on Recommender systems, pp. 141–148, 2009.
[2] E. Ayday and F. Fekri, “Application of belief propagation to trust
and reputation management,” in Information Theory Proceedings (ISIT),
2011 IEEE International Symposium on, 31 2011-aug. 5 2011, pp. 2173
–2177.
[3] ——, “Belief propagation based iterative trust and reputation management,” IEEE Transactions on Dependable and Secure Computing, vol. 9,
no. 3, pp. 375–386, 2012.
[4] ——, “An iterative algorithm for trust management and adversary
detection for delay tolerant networks,” To appear in IEEE Transactions
on Mobile Computing, 2012.
[5] ——, “BP-P2P: a belief propagation-based trust and reputation management for p2p networks,” Proceedings of IEEE Communications Society
Conference on Sensor, Mesh and Ad Hoc Communications and Networks
- SECON, 2012.
[6] P. Resnick and H. R. Varian, “Recommender systems,” Communications
of the ACM, vol. 40, pp. 56–58, March 1997.
[7] M. Balabanovic and Y. Shoham, “Fab: Content-based, collaborative
recommendation,” Communications of the ACM, vol. 40, pp. 66–72,
1997.
[8] P. Resnick, N. Iacovou, M. Suchak, P. Bergstrom, and J. Riedl, “GroupLens: an open architecture for collaborative ﬁltering of netnews,”
CSCW ’94: Proceedings of the 1994 ACM conference on Computer
supported cooperative work, pp. 175–186, 1994.
[9] J. Herlocker, J. A. Konstan, and J. Riedl, “An empirical analysis of
design choices in neighborhood-based collaborative ﬁltering algorithms,”
Information Retrieval, vol. 5, no. 4, pp. 287–310, 2002.
[10] T. Hofmann, “Latent class models for collaborative ﬁltering,” In Proceedings of the 16th International Joint Conference on Artiﬁcial Intelligence, pp. 688–693, 1999.
[11] Y. Koren, “Factorization meets the neighborhood: a multifaceted collaborative ﬁltering model,” In Proceeding of the 14th ACM SIGKDD
international conference on Knowledge discovery and data mining, pp.
426–434, 2008.
[12] B. M. Sarwar, G. Karypis, J. A. Konstan, and J. T. Riedl, “Application of
dimensionality reduction in recommender system - a case study,” ACM
WebKDD Workshop, 2000.
[13] N. Srebro, J. Rennie, and T. Jaakkola, “Maximum margin matrix factorizations,” In Proceedings of Advances in Neural Information Processing
Systems (NIPS), 2005.
[14] D. H. Stern, R. Herbrich, and T. Graepel, “Matchbox: large scale online
bayesian recommendations,” In Proceedings of the 18th international
conference on World wide web, pp. 111–120, 2009.
[15] L. M. de Campos, J. M. Fern´ ndez-Luna, and J. F. Huete, “A collaboa
rative recommender system based on probabilistic inference from fuzzy
observations,” Fuzzy Sets Syst., vol. 159, pp. 1554–1576, June 2008.
[16] F. Kschischang, B. Frey, and H. A. Loeliger, “Factor graphs and the sumproduct algorithm,” IEEE Transactions on Information Theory, vol. 47,
pp. 498–519, Feb. 2001.
[17] J. Pearl, Probabilistic Reasoning in Intelligent Systems: Networks of
Plausible Inference. Morgan Kaufmann Publishers, Inc., 1988.
[18] G. Shafer, A Mathematical Theory of Evidence. Princeton University
Press, Princeton, N.J., 1976.

where |K| is the number of ratings (to be predicted) in the test
ˆ
dataset, Gij is the actual value of the rating provided by user
i for the item j in the test dataset, and Gij is the predicted
rating value by the algorithm.
In Figs. 3, we show the RMSE provided by BPRS for two
different scenarios: when all users connected to each active
user via a path are used and when only the 2-hop neighbors
of each active user are used in the algorithm. We observe that
keeping only the 2-hop neighbors of each active user provides
better performance in terms of RMSE.
Finally, we evaluated BPRS against some popular recommendation algorithms such as: 1. MovieAvg (which computes
the predicting ratings for the movies by averaging all the
received ratings for each movie) with an RMSE of 1.053,
2. Correlation-based neighborhood model (CorNgbr), with an
RMSE of 0.9406 [11], and 3. SVD latent factor model, with 50
factors and RMSE of 0.9046 [11]. We conclude that BPRS is
comparable to existing methods such as CorNgbr and SVD
in terms of rating prediction accuracy. On the other hand,
BPRS generates recommendations in linear complexity for
each active user and updates the recommendations for each
active user instantaneously using the most recent data.
B. Computational Complexity
Assuming u users and s items in the system, we obtained
the computational complexity of BPRS (in the number of
multiplications) as max(O(cs), O(cu)) per each active user,
where c is the average number of nonzero elements in each
row of the user-item matrix. We note that due to the sparseness
of the user-item matrix, the coefﬁcient c is a small number.
Further, as we discussed before, BPRS converges, on the
average, in 10 iterations. Hence, we did not include the number
of iterations in the complexity measure as it only introduces
a small constant in front of the total complexity. This result
indicates that BPRS can compute the recommendations for
each active user very efﬁciently using the most recent data
(ratings). Therefore, we claim that the BP-based approach
toward the recommendation problem is very promising and
can result in a new class of accurate and scalable recommender
systems.

5

