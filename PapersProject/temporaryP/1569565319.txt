Title:          isit2012v2.dvi
Creator:        dvips(k) 5.991 Copyright 2011 Radical Eye Software
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Tue May  1 17:08:54 2012
ModDate:        Tue Jun 19 12:56:23 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      551559 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569565319

String reconciliation with unknown edit distance
Aryeh (Leonid) Kontorovich

Ari Trachtenberg

Email:karyeh@cs.bgu.ac.il
Department of Computer Science
Ben-Gurion University
Beer Sheva, Israel

Email:trachten@bu.edu
Department of Electrical & Computer Engineering
Boston University
Boston, MA 02215

can be combined into the string katana or kanata.
The work in [1] proposed two solutions to the reconstruction
ambiguity. The ﬁrst involves enumerating all (possibly exponentially many) Eulerian cycles in the graph, and transmitting
the index of the cycle producing the desired string; this can
require signiﬁcant computational resources and may incur an
additional communication cost superlinear in the number of
shingles. An alternate solution in the same work shows that
if all shingles are of a certain minimal length, roughly logarithmic in string length, then there is likely just one possible
reconstruction; that solution views strings unrealistically as
independent and identically distributed (iid) bits, and it also
only gives a probabilistic assurance of unique reconstruction.
In this work, we propose a third solution based on the theory
of uniquely decodable strings, wherein we efﬁciently tailor the
shingles so as to guarantee exactly one possible reconstruction.

Abstract—We consider the problem of reconciling two remote
strings of arbitrary and unknown similarity using minimum
communication, which is at the core of some important problems
in networking, cryptography, genetic engineering, and even
linguistics. Though this problem is efﬁciently convertible into
a set reconciliation instance, for which efﬁcient solutions exist,
this conversion may introduce ambiguity in the decoding process,
which may require signiﬁcant communication and computational
resources to resolve. We leverage some recent advances in efﬁcient
unique decodability of strings to reduce decoding ambiguity, and
thus pave the way for a practical implementation of this string
reconciler. For certain random strings and in some ideal cases,
our approach reconciles two length n strings that differ in α edits
(with α not known a priori) using O α log2 (n) communication.

I. I NTRODUCTION
The problem of efﬁciently reconciling similar strings is
fundamental to a variety of problems. Within a biological context, this problem is related to sequencing of DNA
from short reads [5] and reconstruction of protein sequences
from K-peptides [22]. Communications protocols [1, 3] attempt to identify differences between related documents using
string reconciliation, and fuzzy extractors [8] employ similar
techniques to match noise-prone biometric data to baseline
measurements in a cryptographically secure fashion. Even
computational linguistics uses related approaches to learn
transformations on varying-length sequences [21].

B. Outline
We begin in Section II with an overview of related work
from the information theory and theoretical computer science
communities, followed in Section III by a technical exposition
of the existing approach to string reconciliation on which this
work is based. Section IV summarizes relevant work in [13]
for efﬁciently determining whether a string has a unique
decoding. Our new string reconciliation protocol based upon
an automaton for detecting unique decodability is described in
Section V. We close with concluding remarks in Section VI.

A. Approach

II. R ELATED WORK

Our approach extends and, in many ways makes practical, the protocol in [1], which effectively translates the
edit distance problem into a set reconciliation problem. The
transformation is accomplished through the use of shingling [3,
4], wherein a string is divided into overlapping substrings
(called shingles). Two remote strings are thus reduced to sets
of shingles, which can be reconciled efﬁciently using existing
approaches (e.g. [16, 17]).
Once a remote string’s shingle set is known, the shingles can
be pieced together to determine the remote string. The problem
is that, in general, there may be a large number of possible
string reconstructions from a given collection of shingles,
equal to the number of Eulerian cycles in the corresponding
de Bruijn graph. For example, the shingles
{at, an, ka, na, ta}

1) Edit distance: The problem of determining the minimum
number of edits (insertions or deletions) required to transform
one string into another has a long history in the literature [6,
11]. Orlitsky [18] shows that amount of communication
Cα (x, y) needed to reconcile two strings x and y (of lengths
ˆ
|x| and |y| respectively) that are known to be at most α-edits
ˆ
apart is at most
Cα (x, y) ≤ f (y) + 3 log f (y) + logα + 13,
ˆ
ˆ
for
log

|y| + α
ˆ
α
ˆ

≤ f (y) ≤ log

|y| + α
ˆ
α
ˆ

+ 3 log(α),
ˆ

although he leaves an efﬁcient one-way protocol as an open
question.

(1)

1

The literature includes a variety of proposed protocols
for this problem. Cormode et al. [7] propose a hash-based
approach that requires a known bound α on edits between x
ˆ
and y (assuming, without loss of generality, that y is the longer
string) and communicates at most
4α log(

log(n)
2|y|
) log(2ˆ ) + O α log n log
α
1
α
ln 1−

A. Set reconciliation
The problem of set reconciliation seeks to reconcile two
remote sets SA and SB of b-bit integers using minimum
communication. The approach in [17] involves translating set
elements into an equivalent characteristic polynomial, so that
the process of set reconciliation is translated into an equivalent
problem of rational function interpolation, similar to ReedSolomon decoding.
The resulting algorithm requires one message of roughly
bm bits of communication and bm3 computation to reconcile
two sets that differ in m entries. As such, two sets of a billion
32-bit integer that differ in three integers can be reconciled
with roughly 96 bits of communication. The approach can
be improved to expected bm communication and computation
through the use of interaction [16] and generalized to multisets
(straightforwardly) and arbitrary error-correcting codes [12].

(2)

bits to reconcile the strings with probability of failure .
Orlitsky and Viswanthan [19] propose a interactive protocol
that does not need to know the number of edits in advance and
requires at most
2α log |y| (log |y| + log log |y| + log(1/ ) + log α)
bits of communication.
Other approaches include those of Evﬁmievski [10] for
small edit distances, Suel [23] based on delta-compression,
and Tridgell [24] which presents the computationally efﬁcient
(but potentially communicationally inefﬁcient) rsync protocol.
2) Unique Decoding: It was shown in [14] that the collection of strings having a unique reconstruction from the shingles
representation is a regular language. An explicit construction
of a deterministic ﬁnite-state automaton (DFA) recognizing
this language was given in by Li and Xie [15]. Unfortunately,
for an input alphabet Σ, this DFA has

B. String reconciliation
A string σ can be transformed into a multiset S through
shingling, or collecting all contiguous substrings of a given
length. For example, shingling the string katana into size
2 shingles produces the multiset in (1). As such, in order
to reconcile two strings σA and σB , the protocol STRINGRECON ﬁrst shingles each string, then reconciles the resulting
sets, and then puts the shingles back together into strings in
order to complete the reconciliation. It is important to note
that if two strings differ by α edits, then they will also differ
in O(α) shingles, as long as shingle size is a constant.
The process of putting shingles of length l back into a string
involves the construction of a modiﬁed de Bruijn graph of the
shingles. In this graph, each shingle corresponds to an edge,
with weight equal to the number times the shingle occurs in
the multiset. The vertices of the graph are all length l − 1
substrings over the shingling alphabet; in this manner, an edge
e(u, v) corresponds to a shingle s if u (resp. v) is a preﬁx (resp.
sufﬁx) of s. A special character $ used at the beginning and
end of the string in order to mark the ﬁrst and last shingle.
An Eulerian cycle in the modiﬁed de Bruijn graph, starting
at the ﬁrst shingle, necessarily corresponds to a string that
is consistent with the set of shingles. Unfortunately, there
may be a large number of such strings, requiring either the
enumeration of a speciﬁc cycle of interest or another way to
guarantee only one possible cycle.

2|Σ| (|Σ| + 1)(|Σ| + 1)(|Σ|+1) ∈ 2O(|Σ| log |Σ|)
states, and thus does not seem practical except for very small
alphabets.
Our work in [13], brieﬂy summarized in Section IV for sake
of completeness, has demonstrated that there is no DFA of
subexponential size for recognizing this language, and, instead,
exhibited an equivalent NFA with O(|Σ|3 ) states, which we
shall utilize in this paper.
There has also been work on the probability of a collection
of shingles having a unique reconstruction. The authors in [1]
show that we can expect a unique decoding for substrings of
identically distributed, independent random bits as long as the
substrings are roughly logarithmic in the size of the overall
decoded string (a precise statement is provided in Section V).
The work in [9] also provides evidence of a high probability
of unique decoding for logarithmically sized substrings, and
includes generalizations to non-binary and even non-uniformly
random characters for the strings. This is extended in [2] to
categorize the number of decodings for a given collection of
shingles, and [20] considers decoding from regularly gapped
collections of substrings in a DNA sequencing framework.

IV. U NIQUE DECODING
Our string reconciliation approach hinges upon the ability to
efﬁciently discern whether a string is uniquely decodable from
its shingles. To this end, we next summarize the relevant work
in [13] for the explicit construction of a deterministic ﬁnitestate automaton (DFA) recognizing exactly such strings, and
an equivalent, but more efﬁcient non-deterministic ﬁnite-state
automaton (NFA).

III. BASE PROTOCOL

A. Preliminaries
We assume a ﬁnite alphabet Σ along with a special delimiter
character $ ∈ Σ, and deﬁne Σ$ = Σ ∪ {$}. For k ≥ 1, the k/
k
gram map Φ takes string x ∈ $Σ∗ $ to a vector ξ ∈ NΣ$ , where

We next present the string reconciliation approach in [1],
which is based on a transformation to an instance of the set
reconciliation [17].

2

1. Split σ into a set Sσ of length l shingles, with the i-th
shingle of the string denoted si . Similarly split τ into Sτ .
2. Reconcile sets Sσ and Sτ .
0
3. The ﬁrst host sets Sσ ←− {s0 }.
4. For i from 1 to |σ| − l + 1 do
i
i−1
Sσ ←− Sσ ∪ {si }
i
While Sσ is not uniquely decodable
i
Merge the last two shingles added to Sσ .
5. Exchange indices of merged shingles.
i
i
6. Uniquely decode Sσ and Sτ on the remote hosts.

ξi1 ,...,ik ∈ N is the number of times the string i1 . . . ik ∈ Σk
occurred in x as a contiguous subsequence, counting overlaps.
Note that, though we focus this section on the bigram case
when k = 2, we will subsequently employ these results for
the general case k > 2.
As we have seen in the introduction, the bigram map Φ :
2
$Σ∗ $ → NΣ$ is not injective; for example, Φ($katana$) =
Φ($kanata$).
We denote by LUNIQ ⊆ Σ∗ the collection of all strings w for
which
Φ−1 (Φ($w$)) = {$w$}

Protocol 1: Reconciliation of remote strings σ and τ .

and refer to these strings as uniquely decodable, meaning
that there is exactly one way to reconstruct them from their
bigrams. The induced bigram graph of a string w ∈ Σ∗ is
a weighted directed graph G = (V, E), with V = Σ$ and
E = {e(a, b) : a, b ∈ Σ$ }, where the edge weight e(a, b) ≥ 0
records the number of times a occurs immediately before b
in the string $w$. Finall, we will denote the omission of a
symbol from the alphabet by Σx := Σ \ {x} for x ∈ Σ.
¯

A. Deﬁnitions
Our protocol is fundamentally based on the concept of
a shingling, as used in Section III. Recall that a shingle
s = s1 s2 . . . sk is simply an element of Σ∗ . For two shingles
$
l

s = s1 s2 . . . sk and t = t1 t2 . . . t , we write s
t if there
is some length ≥ l sufﬁx u of s that is also a preﬁx of t,
or, more precisely, if we can rewrite s = s u and t = ut
for strings s , t and |u| ≥ l. We deﬁne the non-overlapping
concatenation s t as the concatenation s ut , where s = s u,
3
tana and
t = ut and |u| = l − 1. For example, kata
kata tana = katana.
l
l
l
For a ﬁxed l, the sequence of shingles s1
s2
...
st
∗
1
2
is said to represent the word w ∈ Σ if w = s s . . . st
l
and si
si+1 for all i. If S = s1 , . . . , st is a multiset of
shingles, we will use Φ−1 (S) ⊂ Σ∗ to denote the collection of
all words represented by S. More formally, deﬁne Π = Π(S)
to be the set of all permutations on t = |S| elements with the
l
sπ(i+1) for all i. Then Φ−1 (S) is
property that sπ(i)

B. Construction and simulation of the NFA
For x ∈ Σ and a, b ∈ Σx , the languages
¯
Ix,a,b = L (Σ∗ axΣ∗ bΣ∗ )
a
¯
and

Jx,a,b = L (Σ∗ aΣ∗ bΣ∗ )
x
¯

form the obstruction language
Kx,a,b = Ix,a,b ∩ Jx,a,b ,
whose elements are called obstructions. The language of all
obstructions is thus
LOBST =

Kx,a,b .

(3)

w ∈ Σ∗ : $w$ = sπ(1)

x∈Σ a,b∈Σx
¯

The work in [13] provides a canonical DFA that recognizes
Kx,a,b with 9 states, regardless of Σ. Over all x ∈ Σ and
a, b ∈ Σx , there are
¯
|Σ| (|Σ| − 1 + (|Σ| − 1)(|Σ| − 2))

sπ(2)

...

sπ(t) , π ∈ Π .

We refer to the members of Φ−1 (S) as the decodings of S,
and say that S is uniquely decodable if |Φ−1 (S)| = 1.
An shingling I of a word w = w1 . . . wt ∈ Σ∗ is a set of
substrings of w that represents w. We say that I is an uniquely
decodable shingling of w if |Φ−1 (I(w))| = 1.
As a simple example, consider the string w = katana with
the shingling I(w) = {$k, ka, at, ta, an, na, n$}. As we saw
in the introduction, for l=2, I can be alternately decoded
into kanata and is thus not uniquely decodable. However, if
the second and third shingles are merged into ata, that the
shingling becomes {$k, ka, ata, an, na, n$}, and then there is
exactly one decoding: katana.

(4)

distinct obstruction languages, whose union can thus be accepted by an NFA of O(|Σ|3 ) states.
The main theorem is thus that the language of obstructions
is precisely the complement of the language of uniquely
decodable strings.
Theorem 1 ([13]).
LOBST = Σ∗ \ LUNIQ .

B. Details

The result of Theorem 1 is that the NFA accepting Kx,a,b ’s
can be used to efﬁciently test for unique decodability.

Protocol 1 transforms a string that is not uniquely decodable
into one that is by merging shingles. Several important details
of Protocol 1 require explanation and proof of correctness.
1) Steps 1 and 2: The ﬁrst two steps of the protocol derive
from the base protocol described in Section III. Note that l is
an implementation parameter.

V. S TRING RECONCILIATION
We next propose the main protocol of our paper for string
reconciliation, as an amalgam of Section III and the work
in [13], presented as a high-level description in Protocol 1.

3

$

$
$k

$k

k
ka

a

at

na
an

k

a$
ka

n

a

at

ta

tana

t

Fig. 1.

t

Fig. 2. A uniquely-decodable de Bruijn graph corresponding to the string
$katana$.

A de Bruijn graph corresponding to the string $katan.

i
2) Step 3: The expression Sσ represents the multiset of
shingles that have been seen so far. It is modiﬁed, by combining shingles as necessary in the subsequent steps, in order
to ensure unique decodability. If full reconciliation is desired
(i.e. both hosts know the other host’s string, as opposed to
just one host having this knowledge) then Steps 3 and 4 are
i
similarly run on the remote host with set Sτ .
3) Step 4: In merging two shingles sa and sb , we are simply
computing the non-overlapping concatenation sa := sa sb ,
as deﬁned earlier. Since the shingles are contiguous and based
on an initial length l shingling, we know necessarily that
l
sa
sb . Furthermore, it is clear that such merging will
always, eventually, lead to a decodable set of shingles because,
at worst, the protocol results in just one shingle representing
the entire string, which is necessarily uniquely decodable.
The main challenge of this step is in checking whether
a given set of shingles is uniquely decodable. This can be
done by considering the de Bruijn graph of the shingles.
The vertices of this graph are the length l − 1 preﬁxes and
sufﬁxes of the shingles, and the edges correspond directly to
shingles, as described in Section III. Clearly a given set of
shingles is uniquely decodable iff there is a unique Eulerian
cycle through this graph. At the same point, if we were to
relabel all vertices with distinct characters over a ﬁctitious
alphabet Σ of cardinality S, then we can view the graph as a
bigram graph over Σ . In other words, determining the unique
decodability of the shingle set is equivalent to determining the
unique decodability of a string corresponding to an arbitrary
Eulerian path in the graph, and this can be tested using the
machinery described in Section IV.
4) Step 5: Each host needs to know which shingles were
merged on the other host in order to produce a uniquely
decodable multiset of shingles. Since each merge involves at
least one shingle of length l, it sufﬁces to exchange a list
of indices of length l shingles that are involved in a merge.
The index can be chosen canonically from an alphabetically
ordered list of all shingles.
The success of the protocol relies upon having as few merge

operations as possible, since, at worst, every shingle is merged
in this step, requiring n log n bits of communication for a
shingle set of size n. In the best case, no shingles are merged
and the communication complexity of the protocol is directly
related to the edit distance between reconciled strings.
Though it is hard to give precise bounds on the number of
shingles that are merged in this step, the work in [1] provides
some guidance for random strings. Speciﬁcally, for strings of
n random bits, in which each bit is 0 with probability p > 0.5,
then we can expect each node in the de Bruijn graph of length
l shingles to have only one outgoing edge (implying unique
decodability) if
l ≤n+1+

W (− ln(p)p−n )
,
ln p

(5)

where W (·) is the Lambert W function. When n goes to inﬁnity, then (5) is O(log(n)), meaning that logarithmically sized
shingles should avoid communicationally expensive merges.
5) Step 6: The resulting collection of shingles can only be
decoded in one way, which can be provided by any efﬁcient
algorithm for generating an Eulerian cycle through the graph.
C. Example
We next present an example of Protocol 1 in action.
Consider two remote hosts, one with the string σ = katana
and the other with the string τ = kanatas. In Step 1 of the
protocol, the two hosts produce the set of length l = 2 shingles
Sσ = {$k, ka, at, ta, an, na, a$}
and
Sτ = {$k, ka, at, ta, an, na, as, s$} .
In Step 2, both hosts utilize a set-reconciliation protocol to
reconcile their shingle sets. At the end of this step, the ﬁrst
host knows Sτ and the second host knows Sσ .
0
In Step 3, the ﬁrst host sets Sσ = {$k}, corresponding to
its ﬁrst shingle. Then, in Step 4, the host extends this until it

4

reaches a non-uniquely decodable multiset:
1
Sσ
2
Sσ
3
Sσ
4
Sσ
5
Sσ

ACKNOWLEDGMENT
This work was supported in part by NSF CCF-0916892.

= {$k, ka}
= {$k, ka, at}

R EFERENCES

= {$k, ka, at, ta}

[1] Sachin Agarwal, Vikas Chauhan, and Ari Trachtenberg. Bandwidth
efﬁcient string reconciliation using puzzles. IEEE Trans. Parallel
Distrib. Syst., 17(11):1217–1225, 2006.
[2] Richard Arratia, B´ la Bollob´ s, Don Coppersmith, and Gregory B.
e
a
Sorkin. Euler circuits and dna sequencing by hybridization. Discrete
Applied Mathematics, 104(1 - 3):63 – 96, 2000.
[3] A. Broder. On the resemblance and containment of documents. Compression and Complexity of Sequences, June 1997.
[4] Andrei Z. Broder, Moses Charikar, Alan M. Frieze, and Michael Mitzenmacher. Min-wise independent permutations. Journal of Computer and
System Sciences, 60(3):630–659, 2000.
[5] Mark Chaisson, Pavel A. Pevzner, and Haixu Tang. Fragment assembly
with short reads. Bioinformatics, 20(13):2067–2074, 2004.
[6] T.H. Cormen, C.E. Leiserson, R.L. Rivest, and C.F. Stein. Introduction
to Algorithms. MIT Press, 2001.
[7] G. Cormode, M. Paterson, S.C. Sahinalp, and U. Vishkin. Communication complexity of document exchange. In SODA, pages 197–206,
2000.
[8] Yevgeniy Dodis, Rafail Ostrovsky, Leonid Reyzin, and Adam Smith.
Fuzzy extractors: How to generate strong keys from biometrics and other
noisy data. SIAM J. Comput., 38(1):97–139, 2008.
[9] Martin Dyer, Alan Frieze, and Stephen Suen. The probability of unique
solutions of sequencing by hybridization. Journal of Computational
Biology, 1(2):105–110, Summer 1994.
[10] A.V. Evﬁmievski. A probabilistic algorithm for updating ﬁles over a
communication link. Theoretical Computer Science, pages 191–199,
2000.
[11] Dan Gusﬁeld. Algorithms on Strings, Trees, and Sequences - Computer
Science and Computational Biology. Cambridge University Press, 1997.
[12] M. Karpovsky, L. Levitin, and A. Trachtenberg. Data veriﬁcation and
reconciliation with generalized error-control codes. 39th Annual Allerton
Conference on Communication, Control, and Computing, October 2001.
[13] Aryeh (Leonid) Kontorovich and Ari Trachtenberg. Unique decodability
for string reconciliation. submitted.
[14] Leonid Kontorovich. Uniquely decodable n-gram embeddings. Theor.
Comput. Sci., 329(1-3):271–284, 2004.
[15] Qiang Li and Huimin Xie. Finite automata for testing composition-based
reconstructibility of sequences. J. Comput. Syst. Sci., 74(5):870–874,
2008.
[16] Y. Minsky and A. Trachtenberg. Scalable set reconciliation. In Proc. 40th Allerton Conference on Comm., Control, and Computing, Monticello,
IL., October 2002.
[17] Y. Minsky, A. Trachtenberg, and R. Zippel. Set reconciliation with
nearly optimal communication complexity. IEEE Trans. on Info. Theory,
September 2003.
[18] A. Orlitsky. Interactive communication: Balanced distributions, correlated ﬁles, and average-case complexity. In Proceedings of the 32nd
Annual Symposium on Foundations of Computer Science, pages 228–
238, 1991.
[19] A. Orlitsky and K. Viswanathan. Practical protocols for interactive
communication. In IEEE International Symposium on Info. Theory, June
2001.
[20] Franco P. Preparata and Eli Upfal. Sequencing-by-hybridization at the
information-theory bound: An optimal algorithm. Journal of Computational Biology, 7(3-4):621–630, August 2000.
[21] D. E. Rumelhart and J. L. McClelland. On learning past tenses of
english verbs. In Parallel Distributed Processing: Vol 2: Psychological
and Biological Models, pages 216–271. MIT press, 1986.
[22] Xiaoli Shi, Huimin Xie, Shuyu Zhang, and Bailin Hao. Decomposition
and reconstruction of protein sequences: The problem of uniqueness
and factorizable language. Journal of the Korean Physical Society,
50(1I):118–123, 2007.
[23] Torsten Suel, Patrick Noel, and Dimitre Trendaﬁlov. Improved ﬁle
synchronization techniques for maintaining large replicated collections
over slow networks. In ICDE, pages 153–164, 2004.
[24] A. Tridgell. Efﬁcient algorithms for sorting and synchronization. PhD
thesis, The Australian National University, 2000.

= {$k, ka, at, ta, an}
= {$k, ka, at, ta, an, na}

5
To notice that Sσ is not uniquely decodable, the host
considers the de Bruijn graph in Figure 1 and runs the
NFA described in Section IV on the corresponding alphabet
{$, k, a, t, n} for the preﬁx $katana formed from an arbitrary
Eulerian path through the graph (starting at $).
5
Correcting the non-unique decodability of Sσ involves
merging shingles an and na into ana, and then again with
shingle ta into tana. The resulting shingles
5
Sσ = {$k, ka, at, tana}

are uniquely decodable, and Step 4 continues without further
merges to produce
6
Sσ = {$k, ka, at, tana, a$}.

In Step 5, the host must communicate the fact that it had
merged an and na into the shingle ana, and then merged ta
into ana to get tana. This involves transmitting the indices of
an and ta in the alphabetical ordering of Sσ :
[$k, a$, an, at, ka, na, ta];
as such, the host transmit the integers 2 and 6.
Finally, the remote host produces a de Bruijn graph of the
6
shingle set Sσ , with vertices corresponding to a length l − 1 =
1 preﬁx and sufﬁx of each shingle, as in Figure 2. There is
only one decoding of this de Bruijn graph, namely the string
$katana$.
D. Communication Complexity
Only Steps 2 and 5 in Protocol 1 transmit data.
For two strings of length n differing in α edits, Step 2 will
require O(α l2 ) bits of communication for the implementation
parameter l. Step 5 will require between 0 and n log(n−l +1)
communication, depending on the decodability of the string.
When the two strings are composed of random iid bits, then,
under the appropriate choice of l from (5), we can expect
that no merging is needed giving an overall communication
complexity that is O α log2 (n) , for large n.
VI. C ONCLUSION
We have provided a novel algorithm for string reconciliation
by combining an existing approach based on transformation to
set reconciliation with an efﬁcient means for testing the unique
decodability of a string. In the best case and in certain random
cases, our approach provides a computationally efﬁcient and
nearly communicationally optimal protocol for string reconciliation, although we leave open a precise categorization of
when or how often this best case appears in practical situations.

5

