Creator:         TeX output 2012.05.18:1723
Producer:       Appligent StampPDF Batch, version 5.1
CreationDate:   Fri May 18 19:15:51 2012
ModDate:        Tue Jun 19 12:54:10 2012
Tagged:         no
Pages:          5
Encrypted:      no
Page size:      612 x 792 pts (letter)
File size:      294864 bytes
Optimized:      no
PDF version:    1.6
ISIT'2012 1569566269

An algorithm for list decoding number ﬁeld codes
Jean-Francois Biasse
¸

Guillaume Quintin

Department of Computer Science
University of Calgary
2500 University Drive NW
Calgary, Alberta, Canada T2N 1N4
Email: biasse@lix.polytechnique.fr

LIX
´
Ecole Polytechnique
91128 Palaiseau, France
Email: quintin@lix.polytechnique.fr

having good properties for the underlying codes. In particular,
Guruswami [2] showed the existence of asymptotically good
number ﬁeld codes, that is a family Ci of [ni , ki , di ]q codes of
increasing block length with
di
ki
> 0 and lim inf
> 0.
lim inf
ni
ni
Neither of them could provide a decoding algorithm. In the
concluding remarks of [2], Guruswami identiﬁes the application of the decoding paradigm of [8], [9], [4] to number ﬁeld
codes as an open problem.
Contribution: The main contribution of this paper is to
provide the ﬁrst algorithm for decoding number ﬁeld codes.
We ﬁrst show that a direct adaptation of an analogue of
Coppersmith’s theorem due to Cohn and Heninger [10] allows
to follow the approach of Boneh [6] which does not allow
to reach the Johnson bound. Then we adapt the decoding
paradigm of [8, Chap. 7] to number ﬁeld codes, by using
methods for manipulating modules over the ring of integers of
a number ﬁeld recently described in [3] to achieve the Johnson
bound.
Throughout this paper, we denote by K a number ﬁeld of
degree d, of discriminant ∆ and of ring of integers OK . The
prime ideals (pi )i≤n satisfy N (p1 ) < N (p2 ) < · · · < N (pn ),
and we deﬁne N := i≤n N (pi ) and B := i≤k N (pi )1/d
for integers k, n such that 0 < k < n. Before describing our
algorithm in more details in the following sections, let us state
the main result of the paper.

Abstract—We present an algorithm for list decoding codewords
of algebraic number ﬁeld codes in polynomial time. This is
the ﬁrst explicit procedure for decoding number ﬁeld codes
whose construction were previously described by Lenstra [1] and
Guruswami [2]. We rely on a new algorithm for computing the
Hermite normal form of the basis of an OK -module due to Biasse
and Fieker [3] where OK is the ring of integers of a number
ﬁeld K.

I. I NTRODUCTION
Algorithms for list decoding Reed-Solomon codes, and their
generalization the algebraic-geometric codes are now well
understood. The codewords consist of sets of functions whose
evaluation at a certain number of points are sent, thus allowing
the receiver to retrieve them provided that the number of errors
is manageable.
The idea behind algebraic-geometric codes can be adapted
to deﬁne algebraic codes whose messages are encoded as a
list of residues redundant enough to allow errors during the
transmission. The Chinese Remainder codes (CRT codes) have
been fairly studied by the community [4], [5]. The encoded
messages are residues modulo N := p1 , · · · , pn of numbers
m ≤ K := p1 · · · pk where p1 < p2 < · · · < pn are prime
numbers. They are encoded by using
Z −→
Z/p1 × · · · × Z/pn
m −→ (m mod p1 , · · · , m mod pn ).
Decoding algorithms for CRT codes were signiﬁcantly improved to reach the same level of tolerance to errors as those
for Reed-Solomon codes [6], [7], [4]. As algebraic-geometric
codes are a generalization of Reed-Solomon codes, the idea
arose that we could generalize the results for CRT codes to
redundant residue codes based on number ﬁelds. Indeed, we
can easily deﬁne an analogue of the CRT codes where a
number ﬁeld K plays the role of Q and its ring of integers
OK plays the role of Z. Then, for prime ideals p1 , · · · , pn
such that N (p1 ) < · · · < N (pn ), a message m ∈ OK can be
encoded by using
c:

OK
m

Theorem 1. Let ε > 0, and a message m ∈ OK satisfying
m ≤ B, then there is an algorithm that returns all the
messages m ∈ OK such that m ≤ B and that c(m) and
c(m ) have mutual agreement t satisfying
t≥

k(n + ε).

This algorithm is polynomial in d , log(N ), 1/ε and log |∆|.
II. G ENERALITIES ON NUMBER FIELDS
Let K be a number ﬁeld of degree d. It has r1 ≤
d real embeddings (θi )i≤r1 and 2r2 complex embeddings
(θi )r1 <i≤r1 +2r2 (coming as r2 pairs of conjugates). The ﬁeld
K is isomorphic to OK ⊗ Q where OK denotes the ring of
integers of K. We can embed K in

−→
OK /p1 × · · · × OK /pn
−→ (m mod p1 , · · · , m mod pn ).

The construction of good codes on number ﬁelds have been
independently studied by Lenstra [1] and Guruswami [2].
They provided indications on how to chose number ﬁelds

KR := K ⊗ R

1

Rr1 × Cr2 ,

n
Theorem 3. Let (r1 , · · · , rn ) ∈ OK and m ∈ OK satisfying
∀i, m = ri mod pi , then Theorem 2 applied to f (ω) := ω−m
allows to return in polynomial time a list of m ∈ OK with
N (m ) ≤ i≤k N (pi ) that differ from m in at most e places
where

and extend the θi ’s to KR . Let T2 be the Hermitian form on
KR deﬁned by
T2 (x, x ) :=

θi (x)θi (x ),
i

and let x := T2 (x, x) be the corresponding L2 -norm. Let
(αi )i≤d be such that OK = ⊕i Zαi , then the discriminant of
K is given by ∆ = det2 (T2 (αi , αj )). The norm of an element
x ∈ K is deﬁned by N (x) = i |θi (x)|.
We encode our messages with prime ideals of OK . However, for decoding, we need a more general notion of ideal,
namely the fractional ideals of OK . A subset a ⊆ K is said to
be a fractional ideal if ∃r ∈ Z, ra ⊆ OK . When a fractional
ideal is contained in OK , we refer to it as an integral ideal.The
sum and product of two fractional ideals of OK is given by

e<n−

IV. J OHNSON - TYPE BOUND FOR NUMBER FIELDS CODES
A Johnson-type bound is a positive number J depending
on the distance, the blocklength and the cardinalities of the
alphabets constituting the code. It garanties that a “small”
number of codewords are in any sphere of radius J. By “small”
number, we mean a number of codewords which is linear in the
code blocklength and the dimension of the code. In our case,
the Johnson-type bound for number ﬁelds codes depends only
on the code blocklength and its minimal distance, and “small”
n
means polynomial in i=1 log N (pi ).
The Johnson-type bound of [8, Section 7.6.1] remains valid
for number ﬁeld codes. For any prime ideal p ⊂ OK , the
quotient OK /p is a ﬁnite ﬁeld. Thus the i’th symbol of a
codeword comes from an alphabet of size N (pi ) = |OK /pi |
and [8, Th. 7.10] can be applied. Let t be the least positive
d
t
integer such that i=1 N (pi ) > 2B , where d = [K : Q]
d
t
and let T = i=1 N (pi ). Then, by [2, Lem. 12], the minimal
hamming distance of the number ﬁelds code is at least n−t+1.
Using [8, Th. 7.10], we can show that for a given message and
ε > 0, only a “small” number of codewords satisfy

a + b = {a + b | a ∈ a, b ∈ b}.
Any non zero fractional ideal a of OK is invertible, that
is there exists a−1 := {x ∈ K | xa ⊆ OK } such
that aa−1 = OK . The norm of integral ideals is given by
N (I) := [OK : I], which extends to fractional ideals by
N (I/J) := N (I)/N (J). The norm of a principal ideal agrees
with the norm of its generator N (xOK ) = |N (x)|.
In the following, we will study ﬁnitely generated sub OK module of OK [y]. Let M ⊆ K l be a ﬁnitely generated OK module. As in [11, Chap. 1], we say that [(ai ), (ai )]i≤n , where
ai ∈ K and ai is a fractional ideal of K, is a pseudo-basis for
M if M = a1 a1 ⊕ · · · ⊕ an an . We also call a pseudo-matrix
representing M the matrix of the coefﬁcients of the (ai )i≤n
along with the ideals ai . The algorithm [3, Alg.4] returns a
pseudo-matrix representing M where the matrix of the (ai )i≤n
has a triangular shape in polynomial time.
III. D ECODING WITH C OPPERSMITH ’ S THEOREM

n

ai >

An analogue of Coppersmith’s theorem was described by
Cohn and Heninger in [10]. It was used to provide an elegant
way of decoding Reed-Solomon codes, and the possibility to
use it for breaking lattice- based cryptosystems in OK modules
was considered, although they concluded that it would not
improve the state-of-the-art algorithms.

i

λi < (2+o(1))

N (I)

n
i=1

.

Although not mentioned in [10], a straightforward adaptation of Theorem 2 with β :=

log N (pi )
i≤n log N (pi )
i≤k

(1)

where ai = 1 if the codeword and the message agree
at the i-th position, ai = 0 otherwise. Thus, if our list
decoding algorithm returns all the codewords having at most
n − (t + ε)n errors then this number is garanteed to
be “small”. Therefore, the Johnson bound appears to be
a good objective for our algorithm. Note that we would
derive a different bound by using weighted distances. In
particular, by using the log-weighted hamming distance i.e.
d(x, y) =
log N (pi ), the condition would be

N (gcd(f (ω)OK , I) > N (I)β ,
β 2 /l

(t + ε)n,

i=1

Theorem 2 (Cohn-Heninger). Let f ∈ OK [X] be a monic
polynomial of degree l, 0 < β ≤ 1, λ1 , · · · , λd > 0 and
I
OK an ideal. We can ﬁnd in polynomial time all the
ω ∈ OK such that |ω|i := |σi (ω)| ≤ λi and

provided that the λi satisfy

log N (pn )
.
log N (p1 )

In the rest of the paper, we present a method based on
Guruswami’s general framework for residue codes [8] that
)
allows us to get rid in the dependency in log N (pn) in the
log N (p1
decoding bound thus reaching the Johnson bound.

ab = {a1 b1 + · · · + al bl | l ∈ N, a1 , · · · al ∈ a, b1 , · · · bl ∈ b}

−d2 /2

kn

i:x=y mod pi

ai log N (pi ) >

(log T + ε) log N .

V. G ENERAL DESCRIPTION OF THE ALGORITHM

where

In this section, we give a high-level description of our
decoding algorithm. We follow the approach of the general
framework described in [8], making the arrangements required
in our context. Our code is the set of m ∈ OK such that

0 < k < n, I := i≤n pi and ∀i, λi := i≤k N (pi )1/d
provides a polynomial time algorithm for decoding number
ﬁeld codes.

2

1/d
m ≤ B where B =
. We also deﬁne
i≤k N (pi )
N := i≤n N (pi ). A codeword m is encoded via

OK
m

Proof: As in [12, Chap. 5], we use the standard results of
Minkowski theory for our purposes. More precisely, there is
an isomorphism f : KR −→ Rr1 +2r2 and a scalar product
r1 +2r2
(x, y) :=
i≤r1 xi yi +
r1 <i≤r1 +2r2 2xi yi on R
r1 +2r2
transferring the canonical measure from KR to R
.
Let λ = f (OK ), X := {x ∈ KR | x ≤ F }, and
m ∈ N. We know from Minkowski’s lattice point theorem
that if Vol(X) > m2d det(λ), then #(f (x) ∩ λ) ≥ m. As
Vol(X) = 2r2 2π d/2 F d /Γ(d/2) and det(λ) = |∆|, we
have the desired result.
Then, we must derive from Lemma 1 an analogue of [8,
Lemma 7.6] in our context. This lemma allows us to estimate
the number of polynomials of degree l satisfying (2). To
simplify the expressions, we use the following notation in the
rest of the paper

−→
OK /p1 × · · · × OK /pn
−→ (m mod p1 , · · · , m mod pn ).

Let z1 , · · · , zn be non-negative real numbers, and let Z be a
parameter. In this section, as well as in Section VI and VII, we
assume that the zi are integers. We assume that we received
a vector (r1 , · · · , rn ) ∈ i OK /pi . We wish to retrieve all
the codewords m such that
i ai zi > Z where ai = 1 if
m mod pi = ri and 0 otherwise (we say that m and (ri )i≤n
have weighted agreement Z).
We ﬁnd the codewords m with desired weighted agreement
by computing roots of a polynomial c ∈ OK [y] that satisﬁes
m ≤ B =⇒ c(m) < F,

(2)

for an appropriate bound F . We choose the polynomial c
satisfying (2) in the ideal i≤n Jizi ⊆ OK [y] where

αd,∆,γ :=

With such a choice of a polynomial, we necessarily have
zi ai
c(m) ∈
, where ai = 1 if c(m) mod pi = ri ,
i pi
0 otherwise. In particular, if c(m) = 0 then N (c(m)) ≥
zi ai
. In addition, we know, from the inequality
i N (pi )
beween arithmetic and geometric mean, that c(m) ≥
√
dN (c(m))1/d . We thus know that if the weighted agreement
satisﬁes
d
ai zi log N (pi ) > − log(d) + d log(F ),
(3)
2
i≤n
√
1/d
> F , then c(m)
which in turns implies d ( i N (pi )zi ai )
has to be zero, since otherwise it would contradict (2).

(αd,∆,γ )

.

F
l+1

l+1

l+1

d

l

B

−i

,

i=0

which ﬁnishes the proof.
Now that we know how to estimate the number of c ∈
OK [y] of degree at most l satisfying (2), we need to ﬁnd a
lower bound on F to ensure that we can ﬁnd such a polynomial
in i Jizi . The following lemma is an equivalent of [8, Lemma
7.7].
Lemma 3. Let l, B, F be positive integers, there exists c ∈
zi
i Ji satisfying (2) provided that
F > 2(l + 1)B

VI. E XISTENCE OF THE DECODING POLYNOMIAL
In this section, given weights (zi )i≤n , we prove the existence of a polynomial c ∈ i Jizi and a constant F > 0 such
that for all m ≤ B, m ∈ OK , we have c(m) ≤ F .
This proof is not constructive. The actual computation of this
polynomial will be described in Section VII. We ﬁrst need to
estimate the number of elements of OK bounded by a given
size.

1
d(l+1)

1

l/2

(αd,∆,γ )1/d

N (pi )(

zi +1
2

)

. (4)

i

Proof: Let us apply Lemma 2 to F = F/2. There are at
least
αd,∆,γ

F/2
(l + 1)B l/2

d

l+1

polynomial c ∈ OK [y] satisfying m ≤ B ⇒ c(m) <
F/2. In addition, we know from [8, Corollary 7.5] that
+1
zi
(zi2 ) ≥ |O [y]/
K
i |N (pi )|
i Ji |, which implies that if (4)
is satisﬁed, then necessarily

Lemma 1. Let F > 0 and 0 < γ < 1, then the number of
x ∈ OK such that x ≤ F is at least
d

|∆|Γ(d/2)

|∆|Γ(d/2)

Proof: Let c(y) = c0 +c1 y+· · ·+cl y l . We want the ci ’s to
satisfy ci mi < F /(l + 1) whenever m ≤ B. This is the
case when ci < F /(B i (l + 1)). By Lemma 1, there are at
d
least αd,∆,γ F /((l + 1)B i ) possibilities for ci . Therefore,
the number of polynomials c satisfying (2) is at least

Algorithm 1 Decoding algorithm
Require: OK , z1 , · · · , zn , B, Z, r1 , · · · , rn ∈ i OK /pi .
Ensure: All m such that i ai zi > Z.
1: Compute l and F .
zi
2: Find c ∈
i≤n Ji ⊆ OK [y] of degree at most l such that
m ≤ B =⇒ c(m) < F .
3: Find all roots of c and report those roots ξ such that ξ ≤
B and i ai zi > Z.

2r1 +r2 −1+γ

2r1 +r2 −1+γ

Lemma 2. For positive integers B, F , the number of polynomials c ∈ OK [y] of degree at most l satisfying (2) is at
least
d l+1
F
.
αd,∆,γ
(l + 1)B l/2

Ji = {a(y)(y − ri ) + p · b(y) | a, b ∈ OK [y] and p ∈ pi }.

π d/2 F

π d/2

αd,∆,γ

.

3

F/2
(l + 1)B l/2

d

l+1

> OK [y]/

Jizi .
i

then by combining (3), (4) and Algorithm 2, we know
that given (r1 , · · · , rn ) ∈
i≤n OK /pi , l > 0, B =
N (pi )1/d and integer weights zi > 0, Algorithm 2
i≤k
returns a polynomial c of degree at most l such that all
m ∈ OK satisfying m ≤ B and

This means that there are at least two distinct polynomials
c1 , c2 ∈ OK [y] of degree at most l such that (c1 − c2 ) ∈
zi
i Ji and c1 (m) , c2 (m) < F/2 whenever m ≤ B.
The choice of c := c1 − c2 ﬁnishes the proof.
VII. C OMPUTATION OF THE DECODING POLYNOMIAL
Let l > 0 be an integer to be determined later. To compute
c ∈ i Jizi of degree at most l satisfying (2), we need to ﬁnd
a short pseudo-basis of the sub OK -module M ∩ i Jizi of
K l+1 where M is the OK -module of the elements of OK [y]
of degree at most l embedded in K l+1 via i ci y i → (ci ).
We ﬁrst compute a pseudo-generating set for each M ∩ Jizi ,
then we compute a pseudo-basis for their intersection, and we
ﬁnally call the algorithm of [13] to produce a short pseudobasis of M ∩ i Jizi from which we derive c.
An algorithm for computing a pseudo-basis of the intersection of two modules given by their pseudo-basis is described
by Cohen in [11, 1.5.2]. It relies on the HNF algorithm for
OK -modules. The HNF algorithm presented in [11, 1.4] is
not polynomial, but a variant recently presented in [3] enjoys
this property. We can therefore apply [11, 1.5.2] with the HNF
of [3] successively for each pseudo-basis of M ∩Jizi to produce
a pseudo-basis of M ∩ i Jizi .

ai zi log N (pi ) ≥
i≤n

+

11:

i≤n

Proposition 1. Let ε > 0, non-negative reals zi , B =
1/d
, and an encoded message (r1 , · · · , rn ) ∈
i≤k N (pi )
i OK /pi , then our algorithm ﬁnds all the m ∈ OK such
that m ≤ B and

ai zi log N (pi ) ≥



log(2d2 B d ) 

2
2
zi log N (pi ) + εzmax ,
i≤n

i≤n

where ai = 1 if m mod pi = ri , 0 otherwise.
Proof: Note that we can assume without loss of generality
∗
that zmax = 1. Let zi = Azi for a sufﬁciently large integer
∗
A, which thus satisﬁes Azi ≤ zi < Azi + 1. The decoding
condition (5) is met whenever
ai zi log N (pi ) ≥
i≤n

+
+

A
2(l + 1)

i≤n

3
2
zi + 2
A
A

log N (pi )

1
log βd,∆,γ .
A

l := A



Let [(bi ), (bi )]i≤l+1 be a short pseudo-basis of M2 obtained with the reduction algorithm of [13].
Let x1 , x2 be a short basis of b1 obtained with [13, Th.
3].
return c ∈ M1 corresponding to x1 b1 ∈ M2 .

2
l
3d
log(2d B d ) +
log(l + 1)
2A
2A

2
zi +

3
2
Let Zi := zi + A zi +


(v0 , v1 , · · · , vl ) ∈ M1 ⇐⇒ (v0 , v1 ·B, · · · , vl ·(B)l ) ∈ M2 .

10:

zi + 1
log N (pi ) + log βd,∆,γ , (5)
2

(where ai = 1 if m mod pi = ri , 0 otherwise) are roots of c.
In the following, we no longer assume the zi to be integers.
However, we will use our previous results with the integer
∗
weights zi := Azi for a sufﬁciently large integer A to be
determined.

Algorithm 2 Computation of the decoding polynomial
Require: (pi , zi )i≤n , l, N , B, F such that ∃c ∈ i Jizi of
degree at most l satisfying (2) for F , and the encoded
message (r1 , · · · , rn ) ∈ i OK /pi .
zi
satisfying (2) for F
=
Ensure: c
∈
i Ji
√
dl
11
2 2 l + 1 22+d(6+3d) d3 |∆|2+ 2d F of degree at
most l.
1: for i ≤ n do
2:
zi ← min(zi , l).
˜
3:
For 0 ≤ j ≤ zi : ai ← pzi −j , ai ← (y − ri )j .
˜ j
j
i
4:
For 1 ≤ j ≤ l − zi : ai ← OK , ai ← y j (y − ri )zi .
j
j
5:
Let (ai ), (ai )j≤l+1 be a pseudo matrix for M ∩ Jizi .
j
j
6: end for
7: Compute a pseudo-basis [(ci ), (ci )]i≤l+1 of M1 = M ∩
zi
i Ji .
8: Deduce a pseudo-basis [(di ), (di )]i≤l+1 of the module M2
given by

9:

1
l+1

2
l
3d
log(2d B d ) +
log(l + 1)
2
2

(6)

for i ≤ n and

Zi log N (pi )
i≤n
 − 1.

log(2d2 B d )


2
A2

2

We assume that A ≥ log(2d B d ), which ensures that l > 0.
For this choice of l, condition (6) is satisﬁed whenever


Zi log N (pi )
3d
i≤n
+ 1
log A
ai zi log N (pi ) ≥
2A
log(2d2 B d )
i≤n



VIII. G OOD WEIGHT SETTINGS
To derive our main result, we need to consider weights zi >
0 in R rather than Z. Let
d

βd,∆,γ :=

+

αd,∆,γ

1
d

log(2d2 B d ) 

Zi log N (pi )
i≤n

11

d3− 2 23(1+d(2+d)) |∆|2+ 2d



,

+

4

1
log βd,∆,γ .
A

(7)

log β

Assume that A ≥ 10 log N and A ≥ logd,∆,γ , then for N
ε
N
enough, the right side of (7) is at most

log log N
2
2
O
+ log(2d B d ) 
zi log N (pi ) +
log N
i≤n



of modules over a Dedekind domain, and carefully analyse the
process of intersecting them, as well as ﬁnding short elements.
We proved that our algorithm is polynomial in the size of the
input, that is in d, log(N ), log |∆| and 1 .
ε


ε
2

ACKNOWLEDGMENT



log(2d2 B d ) 

≤

large

2
zi log N (pi ) + ε

The ﬁrst author would like to thank Guillaume Hanrot for
his helpful comments on the approach based on Coppersmith’s
theorem. We also thank an anonymous referee for helpful
comments on this paper.

i≤n

The degree l of our decoding polynomial c is therefore
polynomial in log N , 1 , d and log |∆|. By [14, 2.3], we know
ε
that the complexity to ﬁnd the roots of c is polynomial in d,
l and in the logarithm of the height of c, which we already
proved to be polynomial in the desired values.

R EFERENCES
[1] H. Lenstra, “Codes from algebraic number ﬁelds,” in Mathematics and
computer science II, Fundamental contributions in the Netherlands since
1945, ser. CWI Monograph, M. Hazewinkel, J. Lenstra, and L. L.
Meertens, Eds., vol. 4, North-Holland, Amsterdam, 1986, pp. 94–104.
[2] V. Guruswami, “Constructions of codes from number ﬁelds,” IEEE
Transactions on Information Theory, vol. 49, no. 3, pp. 594–603, 2003.
[3] J.-F. Biasse and C. Fieker, “A polynomial time algorithm for computing
the hnf of a module over the integers of a number ﬁeld,” 2012, To appear
in the proceedings of the 37th International Symposium on Symbolic
and Algebraic Computation (ISSAC).
[4] V. Guruswami, A. Sahai, and M. Sudan, “Soft-decision decoding of
chinese remainder codes,” in Proceedings of the 41st Annual Symposium
on Foundations of Computer Science. Washington, DC, USA: IEEE
Computer Society, 2000, pp. 159–168.
[5] D. Mandelbaum, “On a class of arithmetic codes and a decoding
algorithm (corresp.),” IEEE Transactions on Information Theory, vol. 22,
pp. 85–88, 1976.
[6] D. Boneh, “Finding smooth integers in short intervals using
crt decoding,” in Proceedings of the thirty-second annual ACM
symposium on Theory of computing, ser. STOC ’00.
New
York, NY, USA: ACM, 2000, pp. 265–272. [Online]. Available:
http://doi.acm.org/10.1145/335305.335337
[7] O. Goldreich, D. Ron, and M. Sudan, “Chinese remaindering with
errors,” in Proceedings of the thirty-ﬁrst annual ACM symposium on
Theory of computing, ser. STOC ’99. New York, NY, USA: ACM,
1999, pp. 225–234.
[8] V. Guruswami, List Decoding of Error-Correcting Codes: Winning
Thesis of the 2002 ACM Doctoral Dissertation Competition (Lecture
Notes in Computer Science). Secaucus, NJ, USA: Springer-Verlag New
York, Inc., 2005.
[9] V. Guruswami and M. Sudan, “Improved decoding of reed-solomon
and algebraic-geometric codes,” in IEEE Symposium on Foundations
of Computer Science, vol. 5, 1999, pp. 28–39.
[10] H. Cohn and N. Heninger, “Ideal forms of coppersmith’s theorem
and guruswami-sudan list decoding,” in Proceedings of Innovations in
computer science, 2011.
[11] H. Cohen, Advanced topics in computational algebraic number theory,
ser. Graduate Texts in Mathematics. Springer-Verlag, 1991, vol. 193.
[12] J. Neukirch, Algebraic number theory, ser. Comprehensive Studies in
Mathematics. Springer-Verlag, 1999, iSBN 3-540-65399-6.
[13] C. Fieker and D. Stehl´ , “Short bases of lattices over number ﬁelds,”
e
in Algorithmic Number Theory, 9th International Symposium, ANTSIX, Nancy, France, July 19-23, 2010. Proceedings, ser. Lecture Notes
in Computer Science, G. Hanrot, F. Morain, and E. Thom´ , Eds., vol.
e
6197. Springer, 2010, pp. 157–173.
[14] A. Ayad, “A lecture on the complexity of factoring polynomials over
global ﬁelds,” International Mathematical Forum, vol. 5, no. 10, pp.
477–486, 2010.

Corollary 1. Let ε > 0, k < n and prime ideals p1 , · · · pn satisfying N (pi ) < N (pi+1 ) and log N (pk+1 ) ≥ (k log N (pk )+
d2 ), then with the previous notations, our algorithm ﬁnds a list
of all codewords which agree with a received word in t places
provided t ≥ k(n + ε).
Proof: The proof is similar to the one of [8, Th. 7.14].
d2

d

log(2 B
The main difference is that we deﬁne δ := k − log N (pk+1))
which satisﬁes δ ≥ 0 since by assumption log N (pk+1 ) ≥
(k log N (pk ) + d2 ). We apply Proposition 1 with zi =
1/ log N (pi ) for i ≥ k+1, zi = 1/ log N (pk+1 ) for i ≤ k, and
ε = ε/ log N (pk+1 ). It allows us to retrieve the codewords
whose number of agreements t is at least

log(2d2 B d )
log N (pk+1 )
≤δ+

log(B)
+
log N (pk+1 )

log(2d2 B d )
log N (pk+1 )

n

i=k+1

N (pk+1 )
+ε
log N (pi )

log(2d2 B d )
+
log N (pk+1 )

n

i=k+1

N (pk+1 )
+ε .
log N (pi )

This condition is met whenever t ≥ δ + (k − δ)(n − δ + ε).
From the Cauchy-Schwartz inequality, we notice that
k(n + ε) ≥

(k − δ)(n − δ + ε),

which proves that our decoding algorithm works when t ≥
k(n + ε).
IX. C ONCLUSION
We presented the ﬁrst method for list decoding number ﬁeld
codes. A straightforward application of Theorem 2 allows to
derive a decoding algorithm in polynomial time. However,
we cannot achieve the Johnson bound with this method. To
solve this problem, we described an analogue of the CRT list
decoding algorithm for codes based on number ﬁelds. This is
the ﬁrst algorithm allowing list decoding of number ﬁeld codes
up to the Johnson bound. We followed the approach of [8,
Ch. 7] that provides a general frameworks for list decoding of
algebraic codes, along with its application to CRT codes. The
modiﬁcations to make this strategy efﬁcient in the context of
number ﬁelds are substantial. We needed to refer to the theory

5

